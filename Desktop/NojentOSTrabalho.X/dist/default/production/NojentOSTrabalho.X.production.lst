

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Dec  8 10:35:16 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18LF4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           ; Version 1.44
    77                           ; Generated 14/09/2017 GMT
    78                           ; 
    79                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC18LF4520 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110  0000                     
   111 ;; Function _nojoTaskIdle is unused but had its address taken
   112  0000                     
   113 ;;___wmul@product	offset	0
   114 ;;___wmul@multiplier	offset=-2 (param)
   115 ;;___wmul@multiplicand	offset=-4 (param)
   116 ;;LCDWriteString@msg	offset=-2 (param)
   117 ;;LCDGotoXY@x	offset=-1 (param)
   118 ;;LCDGotoXY@y	offset=-2 (param)
   119 ;;LCDByte@temp	offset	0
   120 ;;LCDByte@ln	offset	1
   121 ;;LCDByte@hn	offset	2
   122 ;;LCDByte@c	offset=-1 (param)
   123 ;;LCDByte@isdata	offset=-2 (param)
   124 ;;LCDBusyLoop@status	offset	0
   125 ;;LCDBusyLoop@temp	offset	1
   126 ;;LCDBusyLoop@busy	offset	2
   127 ;;sem_wait@handler	offset=-2 (param)
   128 ;;queue_insert@pos	offset	0
   129 ;;queue_insert@queue_handler	offset=-2 (param)
   130 ;;queue_insert@task_pos	offset=-6 (param)
   131 ;;sem_post@handler	offset=-2 (param)
   132 ;;queue_remove@value	offset	0
   133 ;;queue_remove@queue_handler	offset=-2 (param)
   134 ;;nojoDispatcher@task_pos	offset	0
   135 ;;nojoDispatcher@state	offset=-1 (param)
   136 ;;RR_scheduler@pos_next_task	offset	0
   137 ;;RR_scheduler@i	offset	4
   138 ;;RR_scheduler@installed	offset	8
   139 ;;___wmul@product	offset	0
   140 ;;___wmul@multiplier	offset=-2 (param)
   141 ;;___wmul@multiplicand	offset=-4 (param)
   142 ;;___llmod@counter	offset	0
   143 ;;___llmod@dividend	offset=-4 (param)
   144 ;;___llmod@divisor	offset=-8 (param)
   145 ;;round@f	offset	0
   146 ;;round@x	offset=-3 (param)
   147 ;;trunc@i	offset	0
   148 ;;trunc@expon	offset	3
   149 ;;trunc@x	offset=-3 (param)
   150 ;;frexp@value	offset=-3 (param)
   151 ;;frexp@eptr	offset=-5 (param)
   152 ;;___fttol@lval	offset	0
   153 ;;___fttol@exp1	offset	4
   154 ;;___fttol@sign1	offset	5
   155 ;;___fttol@f1	offset=-3 (param)
   156 ;;___altoft@sign	offset	0
   157 ;;___altoft@exp	offset	1
   158 ;;___altoft@c	offset=-4 (param)
   159 ;;___ftsub@f1	offset=-3 (param)
   160 ;;___ftsub@f2	offset=-6 (param)
   161 ;;___ftadd@exp1	offset	0
   162 ;;___ftadd@exp2	offset	1
   163 ;;___ftadd@sign	offset	2
   164 ;;___ftadd@f1	offset=-3 (param)
   165 ;;___ftadd@f2	offset=-6 (param)
   166 ;;___lwtoft@c	offset=-2 (param)
   167 ;;___ftmul@f3_as_product	offset	0
   168 ;;___ftmul@sign	offset	3
   169 ;;___ftmul@cntr	offset	4
   170 ;;___ftmul@exp	offset	5
   171 ;;___ftmul@f1	offset=-3 (param)
   172 ;;___ftmul@f2	offset=-6 (param)
   173 ;;___ftpack@arg	offset=-3 (param)
   174 ;;___ftpack@exp	offset=-4 (param)
   175 ;;___ftpack@sign	offset=-5 (param)
   176 ;;LCDWriteString@msg	offset=-2 (param)
   177 ;;LCDWriteInt@str	offset	0
   178 ;;LCDWriteInt@i	offset	5
   179 ;;LCDWriteInt@j	offset	7
   180 ;;LCDWriteInt@val	offset=-2 (param)
   181 ;;LCDWriteInt@field_length	offset=-4 (param)
   182 ;;___awmod@sign	offset	0
   183 ;;___awmod@counter	offset	1
   184 ;;___awmod@dividend	offset=-2 (param)
   185 ;;___awmod@divisor	offset=-4 (param)
   186 ;;___awdiv@quotient	offset	0
   187 ;;___awdiv@sign	offset	2
   188 ;;___awdiv@counter	offset	3
   189 ;;___awdiv@dividend	offset=-2 (param)
   190 ;;___awdiv@divisor	offset=-4 (param)
   191 ;;LCDGotoXY@x	offset=-1 (param)
   192 ;;LCDGotoXY@y	offset=-2 (param)
   193 ;;LCDByte@temp	offset	0
   194 ;;LCDByte@ln	offset	1
   195 ;;LCDByte@hn	offset	2
   196 ;;LCDByte@c	offset=-1 (param)
   197 ;;LCDByte@isdata	offset=-2 (param)
   198 ;;LCDBusyLoop@status	offset	0
   199 ;;LCDBusyLoop@temp	offset	1
   200 ;;LCDBusyLoop@busy	offset	2
   201 ;;ADCRead@ch	offset=-1 (param)
   202 ;;libera_processos@i	offset	0
   203 ;;nojoDispatcher@task_pos	offset	0
   204 ;;nojoDispatcher@state	offset=-1 (param)
   205 ;;RR_scheduler@pos_next_task	offset	0
   206 ;;RR_scheduler@i	offset	4
   207 ;;RR_scheduler@installed	offset	8
   208 ;;___llmod@counter	offset	0
   209 ;;___llmod@dividend	offset=-4 (param)
   210 ;;___llmod@divisor	offset=-8 (param)
   211 ;;___wmul@product	offset	0
   212 ;;___wmul@multiplier	offset=-2 (param)
   213 ;;___wmul@multiplicand	offset=-4 (param)
   214                           
   215                           	psect	idataCOMRAM
   216  0032E2                     __pidataCOMRAM:
   217                           	opt stack 0
   218                           
   219                           ;initializer for _state
   220  0032E2  30                 	db	48
   221  0000                     _TMR0	set	4054
   222  0000                     _ADRES	set	4035
   223  0000                     _TRISB	set	3987
   224  0000                     _PORTD	set	3971
   225  0000                     _TRISD	set	3989
   226  0000                     _LATD	set	3980
   227  0000                     _LATB	set	3978
   228  0000                     _T0CONbits	set	4053
   229  0000                     _ADCON0	set	4034
   230  0000                     _PORTCbits	set	3970
   231  0000                     _TRISCbits	set	3988
   232  0000                     _ADCON2	set	4032
   233  0000                     _STKPTR	set	4092
   234  0000                     _TOSH	set	4094
   235  0000                     _TOSL	set	4093
   236  0000                     _TOSU	set	4095
   237  0000                     _INTCONbits	set	4082
   238  0000                     _GODONE	set	32273
   239  0000                     _ADON	set	32272
   240  0000                     _TMR0ON	set	32431
   241                           
   242                           	psect	smallconst
   243  000600                     __psmallconst:
   244                           	opt stack 0
   245  000600  00                 	db	0
   246  000601                     STR_4:
   247  000601  3D                 	db	61	;'='
   248  000602  3D                 	db	61	;'='
   249  000603  3D                 	db	61	;'='
   250  000604  46                 	db	70	;'F'
   251  000605  49                 	db	73	;'I'
   252  000606  4D                 	db	77	;'M'
   253  000607  3D                 	db	61	;'='
   254  000608  3D                 	db	61	;'='
   255  000609  3D                 	db	61	;'='
   256  00060A  00                 	db	0
   257  00060B                     STR_1:
   258  00060B  50                 	db	80	;'P'
   259  00060C  69                 	db	105	;'i'
   260  00060D  73                 	db	115	;'s'
   261  00060E  63                 	db	99	;'c'
   262  00060F  69                 	db	105	;'i'
   263  000610  6E                 	db	110	;'n'
   264  000611  61                 	db	97	;'a'
   265  000612  00                 	db	0
   266  000613                     STR_3:
   267  000613  70                 	db	112	;'p'
   268  000614  48                 	db	72	;'H'
   269  000615  3A                 	db	58	;':'
   270  000616  00                 	db	0
   271  000617                     STR_2:
   272  000617  43                 	db	67	;'C'
   273  000618  3A                 	db	58	;':'
   274  000619  00                 	db	0
   275                           
   276                           ; #config settings
   277  00061A  00                 	db	0	; dummy byte at the end
   278  0000                     
   279                           	psect	cinit
   280  003078                     __pcinit:
   281                           	opt stack 0
   282  003078                     start_initialization:
   283                           	opt stack 0
   284  003078                     __initialization:
   285                           	opt stack 0
   286                           
   287                           ; Initialize objects allocated to COMRAM (1 bytes)
   288                           ; load TBLPTR registers with __pidataCOMRAM
   289  003078  0EE2               	movlw	low __pidataCOMRAM
   290  00307A  6EF6               	movwf	tblptrl,c
   291  00307C  0E32               	movlw	high __pidataCOMRAM
   292  00307E  6EF7               	movwf	tblptrh,c
   293  003080  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   294  003082  6EF8               	movwf	tblptru,c
   295  003084  0009               	tblrd		*+	;fetch initializer
   296  003086  CFF5 F05B          	movff	tablat,__pdataCOMRAM
   297                           
   298                           ; Clear objects allocated to BIGRAM (1080 bytes)
   299  00308A  EE01  F021         	lfsr	0,__pbssBIGRAM
   300  00308E  EE24 F038          	lfsr	2,1080
   301  003092                     clear_0:
   302  003092  6AEE               	clrf	postinc0,c
   303  003094  50DD               	movf	postdec2,w,c
   304  003096  50D9               	movf	fsr2l,w,c
   305  003098  E1FC               	bnz	clear_0
   306  00309A  50DA               	movf	fsr2h,w,c
   307  00309C  E1FA               	bnz	clear_0
   308                           
   309                           ; Clear objects allocated to BANK0 (88 bytes)
   310  00309E  EE00  F080         	lfsr	0,__pbssBANK0
   311  0030A2  0E58               	movlw	88
   312  0030A4                     clear_1:
   313  0030A4  6AEE               	clrf	postinc0,c
   314  0030A6  06E8               	decf	wreg,f,c
   315  0030A8  E1FD               	bnz	clear_1
   316                           
   317                           ; Clear objects allocated to COMRAM (40 bytes)
   318  0030AA  EE00  F001         	lfsr	0,__pbssCOMRAM
   319  0030AE  0E28               	movlw	40
   320  0030B0                     clear_2:
   321  0030B0  6AEE               	clrf	postinc0,c
   322  0030B2  06E8               	decf	wreg,f,c
   323  0030B4  E1FD               	bnz	clear_2
   324  0030B6                     end_of_initialization:
   325                           	opt stack 0
   326  0030B6                     __end_of__initialization:
   327                           	opt stack 0
   328  0030B6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   329  0030B8  6EF8               	movwf	tblptru,c
   330  0030BA  0100               	movlb	0
   331  0030BC  EF34  F00C         	goto	_main	;jump to C main() function
   332                           tblptru	equ	0xFF8
   333                           tblptrh	equ	0xFF7
   334                           tblptrl	equ	0xFF6
   335                           tablat	equ	0xFF5
   336                           postinc0	equ	0xFEE
   337                           wreg	equ	0xFE8
   338                           postdec2	equ	0xFDD
   339                           fsr2h	equ	0xFDA
   340                           fsr2l	equ	0xFD9
   341                           
   342                           	psect	bssCOMRAM
   343  000001                     __pbssCOMRAM:
   344                           	opt stack 0
   345  000001                     LCDWriteInt@F2966:
   346                           	opt stack 0
   347  000001                     	ds	5
   348  000006                     _errno:
   349                           	opt stack 0
   350  000006                     	ds	2
   351  000008                     _contagem:
   352                           	opt stack 0
   353  000008                     	ds	2
   354  00000A                     _medph:
   355                           	opt stack 0
   356  00000A                     	ds	2
   357  00000C                     _medcloro:
   358                           	opt stack 0
   359  00000C                     	ds	2
   360  00000E                     _val:
   361                           	opt stack 0
   362  00000E                     	ds	2
   363  000010                     _tSTATUS:
   364                           	opt stack 0
   365  000010                     	ds	1
   366  000011                     _tBSR:
   367                           	opt stack 0
   368  000011                     	ds	1
   369  000012                     _tWORK:
   370                           	opt stack 0
   371  000012                     	ds	1
   372  000013                     _mensagens:
   373                           	opt stack 0
   374  000013                     	ds	22
   375                           tblptru	equ	0xFF8
   376                           tblptrh	equ	0xFF7
   377                           tblptrl	equ	0xFF6
   378                           tablat	equ	0xFF5
   379                           postinc0	equ	0xFEE
   380                           wreg	equ	0xFE8
   381                           postdec2	equ	0xFDD
   382                           fsr2h	equ	0xFDA
   383                           fsr2l	equ	0xFD9
   384                           
   385                           	psect	dataCOMRAM
   386  00005B                     __pdataCOMRAM:
   387                           	opt stack 0
   388  00005B                     _state:
   389                           	opt stack 0
   390  00005B                     	ds	1
   391                           tblptru	equ	0xFF8
   392                           tblptrh	equ	0xFF7
   393                           tblptrl	equ	0xFF6
   394                           tablat	equ	0xFF5
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           postdec2	equ	0xFDD
   398                           fsr2h	equ	0xFDA
   399                           fsr2l	equ	0xFD9
   400                           
   401                           	psect	bssBANK0
   402  000080                     __pbssBANK0:
   403                           	opt stack 0
   404  000080                     _Q_DELAY:
   405                           	opt stack 0
   406  000080                     	ds	36
   407  0000A4                     _s_2:
   408                           	opt stack 0
   409  0000A4                     	ds	26
   410  0000BE                     _s_1:
   411                           	opt stack 0
   412  0000BE                     	ds	26
   413                           tblptru	equ	0xFF8
   414                           tblptrh	equ	0xFF7
   415                           tblptrl	equ	0xFF6
   416                           tablat	equ	0xFF5
   417                           postinc0	equ	0xFEE
   418                           wreg	equ	0xFE8
   419                           postdec2	equ	0xFDD
   420                           fsr2h	equ	0xFDA
   421                           fsr2l	equ	0xFD9
   422                           
   423                           	psect	bssBIGRAM
   424  000121                     __pbssBIGRAM:
   425                           	opt stack 0
   426  000121                     _F_APTOS:
   427                           	opt stack 0
   428  000121                     	ds	568
   429  000359                     __uDynamicHeap:
   430                           	opt stack 0
   431  000359                     	ds	512
   432                           tblptru	equ	0xFF8
   433                           tblptrh	equ	0xFF7
   434                           tblptrl	equ	0xFF6
   435                           tablat	equ	0xFF5
   436                           postinc0	equ	0xFEE
   437                           wreg	equ	0xFE8
   438                           postdec2	equ	0xFDD
   439                           fsr2h	equ	0xFDA
   440                           fsr2l	equ	0xFD9
   441                           
   442                           	psect	cstackBANK1
   443  000100                     __pcstackBANK1:
   444                           	opt stack 0
   445  000100                     ??_delay_queue_insert:
   446  000100                     SRAMalloc@temp:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0x0
   450  000100                     	ds	2
   451  000102                     SRAMalloc@segLen:
   452                           	opt stack 0
   453                           
   454                           ; 1 bytes @ 0x2
   455  000102                     	ds	1
   456  000103                     SRAMalloc@segHeader:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0x3
   460  000103                     	ds	1
   461  000104                     SRAMalloc@nBytes:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x4
   465  000104                     	ds	1
   466  000105                     SRAMalloc@pHeap:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0x5
   470  000105                     	ds	1
   471  000106                     nojoDelay@ms:
   472                           	opt stack 0
   473                           
   474                           ; 4 bytes @ 0x6
   475  000106                     	ds	1
   476  000107                     pipe_create@pipe_handler:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x7
   480  000107                     	ds	2
   481  000109                     pipe_create@id:
   482                           	opt stack 0
   483                           
   484                           ; 4 bytes @ 0x9
   485  000109                     	ds	4
   486  00010D                     pipe_create@size:
   487                           	opt stack 0
   488                           
   489                           ; 4 bytes @ 0xD
   490  00010D                     	ds	4
   491  000111                     ??_LCDInit:
   492  000111                     delay_queue_create@delay_queue_handler:
   493                           	opt stack 0
   494  000111                     queue_create@queue_handler:
   495                           	opt stack 0
   496  000111                     SRAMInitHeap@pHeap:
   497                           	opt stack 0
   498  000111                     nojoTaskCreate@id:
   499                           	opt stack 0
   500                           
   501                           ; 4 bytes @ 0x11
   502  000111                     	ds	1
   503  000112                     LCDInit@style:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x12
   507  000112                     	ds	1
   508  000113                     ??_delay_queue_create:
   509  000113                     sem_create@handler:
   510                           	opt stack 0
   511  000113                     SRAMInitHeap@count:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x13
   515  000113                     	ds	2
   516  000115                     delay_queue_create@i:
   517                           	opt stack 0
   518  000115                     nojoTaskCreate@prior:
   519                           	opt stack 0
   520  000115                     sem_create@initial_value:
   521                           	opt stack 0
   522                           
   523                           ; 4 bytes @ 0x15
   524  000115                     	ds	2
   525  000117                     
   526                           ; 1 bytes @ 0x17
   527  000117                     	ds	2
   528  000119                     nojoTaskCreate@task_PTR:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x19
   532  000119                     	ds	2
   533  00011B                     ??_nojoTaskCreate:
   534                           
   535                           ; 1 bytes @ 0x1B
   536  00011B                     	ds	6
   537  000121                     tblptru	equ	0xFF8
   538                           tblptrh	equ	0xFF7
   539                           tblptrl	equ	0xFF6
   540                           tablat	equ	0xFF5
   541                           postinc0	equ	0xFEE
   542                           wreg	equ	0xFE8
   543                           postdec2	equ	0xFDD
   544                           fsr2h	equ	0xFDA
   545                           fsr2l	equ	0xFD9
   546                           
   547                           ; 1 bytes @ 0x21
   548                           
   549                           	psect	cstackBANK0
   550  0000D8                     __pcstackBANK0:
   551                           	opt stack 0
   552  0000D8                     pipe_read@pipe_handler:
   553                           	opt stack 0
   554  0000D8                     pipe_destroy@pipe_handler:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x0
   558  0000D8                     	ds	2
   559  0000DA                     pipe_read@msg:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x2
   563  0000DA                     	ds	2
   564  0000DC                     ??_pipe_read:
   565                           
   566                           ; 1 bytes @ 0x4
   567  0000DC                     	ds	8
   568  0000E4                     controle@msg:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0xC
   572  0000E4                     	ds	1
   573  0000E5                     delay_queue_insert@delay_queue_handler:
   574                           	opt stack 0
   575  0000E5                     pipe_write@pipe_handler:
   576                           	opt stack 0
   577  0000E5                     __SRAMmerge@pSegA:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0xD
   581  0000E5                     	ds	2
   582  0000E7                     ??__SRAMmerge:
   583  0000E7                     pipe_write@msg:
   584                           	opt stack 0
   585  0000E7                     delay_queue_insert@task_pos:
   586                           	opt stack 0
   587                           
   588                           ; 4 bytes @ 0xF
   589  0000E7                     	ds	1
   590  0000E8                     ??_pipe_write:
   591  0000E8                     __SRAMmerge@uSum:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0x10
   595  0000E8                     	ds	1
   596  0000E9                     __SRAMmerge@pSegB:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x11
   600  0000E9                     	ds	2
   601  0000EB                     __SRAMmerge@uSegA:
   602                           	opt stack 0
   603  0000EB                     delay_queue_insert@ms:
   604                           	opt stack 0
   605                           
   606                           ; 4 bytes @ 0x13
   607  0000EB                     	ds	1
   608  0000EC                     __SRAMmerge@uSegB:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x14
   612  0000EC                     	ds	1
   613  0000ED                     ?_SRAMalloc:
   614                           	opt stack 0
   615                           
   616                           ; 2 bytes @ 0x15
   617  0000ED                     	ds	2
   618  0000EF                     ??_SRAMalloc:
   619  0000EF                     delay_queue_insert@i:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x17
   623  0000EF                     	ds	2
   624  0000F1                     tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           postdec2	equ	0xFDD
   631                           fsr2h	equ	0xFDA
   632                           fsr2l	equ	0xFD9
   633                           
   634                           ; 1 bytes @ 0x19
   635                           
   636                           	psect	cstackCOMRAM
   637  000029                     __pcstackCOMRAM:
   638                           	opt stack 0
   639  000029                     ?_limpeza:
   640                           	opt stack 0
   641  000029                     ?_cloro:
   642                           	opt stack 0
   643  000029                     ?_ph:
   644                           	opt stack 0
   645  000029                     ?_controle:
   646                           	opt stack 0
   647  000029                     delay_queue_remove@delay_queue_handler:
   648                           	opt stack 0
   649                           
   650                           ; 2 bytes @ 0x0
   651  000029                     	ds	2
   652  00002B                     delay_queue_remove@task_pos:
   653                           	opt stack 0
   654                           
   655                           ; 4 bytes @ 0x2
   656  00002B                     	ds	4
   657  00002F                     ??_delay_queue_remove:
   658                           
   659                           ; 1 bytes @ 0x6
   660  00002F                     	ds	4
   661  000033                     delay_queue_refresh@delay_queue_handler:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0xA
   665  000033                     	ds	2
   666  000035                     ??_delay_queue_refresh:
   667                           
   668                           ; 1 bytes @ 0xC
   669  000035                     	ds	8
   670  00003D                     delay_queue_refresh@i:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x14
   674  00003D                     	ds	2
   675  00003F                     ??_timer_ISR:
   676                           
   677                           ; 1 bytes @ 0x16
   678  00003F                     	ds	14
   679  00004D                     SRAMfree@pSRAM:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x24
   683  00004D                     	ds	2
   684  00004F                     tblptru	equ	0xFF8
   685                           tblptrh	equ	0xFF7
   686                           tblptrl	equ	0xFF6
   687                           tablat	equ	0xFF5
   688                           postinc0	equ	0xFEE
   689                           wreg	equ	0xFE8
   690                           postdec2	equ	0xFDD
   691                           fsr2h	equ	0xFDA
   692                           fsr2l	equ	0xFD9
   693                           
   694                           ; 1 bytes @ 0x26
   695 ;;
   696 ;;Main: autosize = 0, tempsize = 0, incstack = 2, save=0
   697 ;;
   698 ;; *************** function _main *****************
   699 ;; Defined at:
   700 ;;		line 10 in file "main.c"
   701 ;; Parameters:    Size  Location     Type
   702 ;;		None
   703 ;; Auto vars:     Size  Location     Type
   704 ;;		None
   705 ;; Return value:  Size  Location     Type
   706 ;;                  2  157[None  ] int 
   707 ;; Registers used:
   708 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, tblptrl, tblptrh, tblptru, prodl, pr
      +odh, cstack
   709 ;; Tracked objects:
   710 ;;		On entry : 0/0
   711 ;;		On exit  : 0/0
   712 ;;		Unchanged: 0/0
   713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   714 ;;      Params:         0       0       0       0       0       0       0
   715 ;;      Locals:         0       0       0       0       0       0       0
   716 ;;      Temps:          0       0       0       0       0       0       0
   717 ;;      Totals:         0       0       0       0       0       0       0
   718 ;;Total ram usage:        0 bytes
   719 ;; Hardware stack levels required when called:   12
   720 ;; This function calls:
   721 ;;		_ADCInit
   722 ;;		_LCDGotoXY
   723 ;;		_LCDInit
   724 ;;		_LCDWriteString
   725 ;;		_PORTInit
   726 ;;		_SRAMInitHeap
   727 ;;		_nojoScheduler
   728 ;;		_nojoStart
   729 ;;		_nojoTaskCreate
   730 ;;		_sem_create
   731 ;;		_setupTimer
   732 ;; This function is called by:
   733 ;;		Startup code after reset
   734 ;; This function uses a non-reentrant model
   735 ;;
   736                           
   737                           	psect	text0
   738  001868                     __ptext0:
   739                           	opt stack 0
   740  001868                     _main:
   741                           	opt stack 19
   742                           
   743                           ;main.c: 12: nojoStart();
   744                           
   745                           ;incstack = 0
   746  001868  EC36  F017         	call	_nojoStart	;wreg free
   747                           
   748                           ;main.c: 13: setupTimer();
   749  00186C  EC45  F019         	call	_setupTimer	;wreg free
   750                           
   751                           ;main.c: 14: SRAMInitHeap();
   752  001870  EC0E  F018         	call	_SRAMInitHeap	;wreg free
   753                           
   754                           ;main.c: 15: LCDInit(0B00000001);
   755  001874  0E01               	movlw	1
   756  001876  ECDF  F017         	call	_LCDInit
   757                           
   758                           ;main.c: 16: { LCDGotoXY(0,0); LCDWriteString("Piscina");};
   759  00187A  0E00               	movlw	0
   760  00187C  6EE6               	movwf	postinc1,c
   761  00187E  0E00               	movlw	0
   762  001880  6EE6               	movwf	postinc1,c
   763  001882  ECF7  F018         	call	_LCDGotoXY	;wreg free
   764  001886  0E0B               	movlw	low STR_1
   765  001888  6EE6               	movwf	postinc1,c
   766  00188A  0E06               	movlw	high STR_1
   767  00188C  6EE6               	movwf	postinc1,c
   768  00188E  EC78  F017         	call	_LCDWriteString	;wreg free
   769                           
   770                           ;main.c: 18: PORTInit();
   771  001892  EC50  F019         	call	_PORTInit	;wreg free
   772                           
   773                           ;main.c: 20: ADCInit();
   774  001896  EC6E  F019         	call	_ADCInit	;wreg free
   775                           
   776                           ;main.c: 22: extern sem_t s_1, s_2;
   777                           ;main.c: 24: sem_create(&s_1, 0);
   778  00189A  0EBE               	movlw	low _s_1
   779  00189C  0101               	movlb	1	; () banked
   780  00189E  6F13               	movwf	sem_create@handler& (0+255),b
   781  0018A0  0E00               	movlw	high _s_1
   782  0018A2  6F14               	movwf	(sem_create@handler+1)& (0+255),b
   783  0018A4  0E00               	movlw	0
   784  0018A6  6F15               	movwf	sem_create@initial_value& (0+255),b
   785  0018A8  0E00               	movlw	0
   786  0018AA  6F16               	movwf	(sem_create@initial_value+1)& (0+255),b
   787  0018AC  0E00               	movlw	0
   788  0018AE  6F17               	movwf	(sem_create@initial_value+2)& (0+255),b
   789  0018B0  0E00               	movlw	0
   790  0018B2  6F18               	movwf	(sem_create@initial_value+3)& (0+255),b
   791  0018B4  EC25  F019         	call	_sem_create	;wreg free
   792                           
   793                           ;main.c: 26: sem_create(&s_2, 1);
   794  0018B8  0EA4               	movlw	low _s_2
   795  0018BA  0101               	movlb	1	; () banked
   796  0018BC  6F13               	movwf	sem_create@handler& (0+255),b
   797  0018BE  0E00               	movlw	high _s_2
   798  0018C0  6F14               	movwf	(sem_create@handler+1)& (0+255),b
   799  0018C2  0E01               	movlw	1
   800  0018C4  6F15               	movwf	sem_create@initial_value& (0+255),b
   801  0018C6  0E00               	movlw	0
   802  0018C8  6F16               	movwf	(sem_create@initial_value+1)& (0+255),b
   803  0018CA  0E00               	movlw	0
   804  0018CC  6F17               	movwf	(sem_create@initial_value+2)& (0+255),b
   805  0018CE  0E00               	movlw	0
   806  0018D0  6F18               	movwf	(sem_create@initial_value+3)& (0+255),b
   807  0018D2  EC25  F019         	call	_sem_create	;wreg free
   808                           
   809                           ;main.c: 29: nojoTaskCreate(1, 10, limpeza);
   810  0018D6  0E01               	movlw	1
   811  0018D8  0101               	movlb	1	; () banked
   812  0018DA  6F11               	movwf	nojoTaskCreate@id& (0+255),b
   813  0018DC  0E00               	movlw	0
   814  0018DE  6F12               	movwf	(nojoTaskCreate@id+1)& (0+255),b
   815  0018E0  0E00               	movlw	0
   816  0018E2  6F13               	movwf	(nojoTaskCreate@id+2)& (0+255),b
   817  0018E4  0E00               	movlw	0
   818  0018E6  6F14               	movwf	(nojoTaskCreate@id+3)& (0+255),b
   819  0018E8  0E0A               	movlw	10
   820  0018EA  6F15               	movwf	nojoTaskCreate@prior& (0+255),b
   821  0018EC  0E00               	movlw	0
   822  0018EE  6F16               	movwf	(nojoTaskCreate@prior+1)& (0+255),b
   823  0018F0  0E00               	movlw	0
   824  0018F2  6F17               	movwf	(nojoTaskCreate@prior+2)& (0+255),b
   825  0018F4  0E00               	movlw	0
   826  0018F6  6F18               	movwf	(nojoTaskCreate@prior+3)& (0+255),b
   827  0018F8  0EB0               	movlw	low _limpeza
   828  0018FA  6F19               	movwf	nojoTaskCreate@task_PTR& (0+255),b
   829  0018FC  0E1A               	movlw	high _limpeza
   830  0018FE  6F1A               	movwf	(nojoTaskCreate@task_PTR+1)& (0+255),b
   831  001900  EC37  F007         	call	_nojoTaskCreate	;wreg free
   832                           
   833                           ;main.c: 30: nojoTaskCreate(2, 9, cloro);
   834  001904  0E02               	movlw	2
   835  001906  0101               	movlb	1	; () banked
   836  001908  6F11               	movwf	nojoTaskCreate@id& (0+255),b
   837  00190A  0E00               	movlw	0
   838  00190C  6F12               	movwf	(nojoTaskCreate@id+1)& (0+255),b
   839  00190E  0E00               	movlw	0
   840  001910  6F13               	movwf	(nojoTaskCreate@id+2)& (0+255),b
   841  001912  0E00               	movlw	0
   842  001914  6F14               	movwf	(nojoTaskCreate@id+3)& (0+255),b
   843  001916  0E09               	movlw	9
   844  001918  6F15               	movwf	nojoTaskCreate@prior& (0+255),b
   845  00191A  0E00               	movlw	0
   846  00191C  6F16               	movwf	(nojoTaskCreate@prior+1)& (0+255),b
   847  00191E  0E00               	movlw	0
   848  001920  6F17               	movwf	(nojoTaskCreate@prior+2)& (0+255),b
   849  001922  0E00               	movlw	0
   850  001924  6F18               	movwf	(nojoTaskCreate@prior+3)& (0+255),b
   851  001926  0E5A               	movlw	low _cloro
   852  001928  6F19               	movwf	nojoTaskCreate@task_PTR& (0+255),b
   853  00192A  0E26               	movlw	high _cloro
   854  00192C  6F1A               	movwf	(nojoTaskCreate@task_PTR+1)& (0+255),b
   855  00192E  EC37  F007         	call	_nojoTaskCreate	;wreg free
   856                           
   857                           ;main.c: 31: nojoTaskCreate(3, 8, ph);
   858  001932  0E03               	movlw	3
   859  001934  0101               	movlb	1	; () banked
   860  001936  6F11               	movwf	nojoTaskCreate@id& (0+255),b
   861  001938  0E00               	movlw	0
   862  00193A  6F12               	movwf	(nojoTaskCreate@id+1)& (0+255),b
   863  00193C  0E00               	movlw	0
   864  00193E  6F13               	movwf	(nojoTaskCreate@id+2)& (0+255),b
   865  001940  0E00               	movlw	0
   866  001942  6F14               	movwf	(nojoTaskCreate@id+3)& (0+255),b
   867  001944  0E08               	movlw	8
   868  001946  6F15               	movwf	nojoTaskCreate@prior& (0+255),b
   869  001948  0E00               	movlw	0
   870  00194A  6F16               	movwf	(nojoTaskCreate@prior+1)& (0+255),b
   871  00194C  0E00               	movlw	0
   872  00194E  6F17               	movwf	(nojoTaskCreate@prior+2)& (0+255),b
   873  001950  0E00               	movlw	0
   874  001952  6F18               	movwf	(nojoTaskCreate@prior+3)& (0+255),b
   875  001954  0EBE               	movlw	low _ph
   876  001956  6F19               	movwf	nojoTaskCreate@task_PTR& (0+255),b
   877  001958  0E27               	movlw	high _ph
   878  00195A  6F1A               	movwf	(nojoTaskCreate@task_PTR+1)& (0+255),b
   879  00195C  EC37  F007         	call	_nojoTaskCreate	;wreg free
   880                           
   881                           ;main.c: 32: nojoTaskCreate(4, 7, controle);
   882  001960  0E04               	movlw	4
   883  001962  0101               	movlb	1	; () banked
   884  001964  6F11               	movwf	nojoTaskCreate@id& (0+255),b
   885  001966  0E00               	movlw	0
   886  001968  6F12               	movwf	(nojoTaskCreate@id+1)& (0+255),b
   887  00196A  0E00               	movlw	0
   888  00196C  6F13               	movwf	(nojoTaskCreate@id+2)& (0+255),b
   889  00196E  0E00               	movlw	0
   890  001970  6F14               	movwf	(nojoTaskCreate@id+3)& (0+255),b
   891  001972  0E07               	movlw	7
   892  001974  6F15               	movwf	nojoTaskCreate@prior& (0+255),b
   893  001976  0E00               	movlw	0
   894  001978  6F16               	movwf	(nojoTaskCreate@prior+1)& (0+255),b
   895  00197A  0E00               	movlw	0
   896  00197C  6F17               	movwf	(nojoTaskCreate@prior+2)& (0+255),b
   897  00197E  0E00               	movlw	0
   898  001980  6F18               	movwf	(nojoTaskCreate@prior+3)& (0+255),b
   899  001982  0E40               	movlw	low _controle
   900  001984  6F19               	movwf	nojoTaskCreate@task_PTR& (0+255),b
   901  001986  0E31               	movlw	high _controle
   902  001988  6F1A               	movwf	(nojoTaskCreate@task_PTR+1)& (0+255),b
   903  00198A  EC37  F007         	call	_nojoTaskCreate	;wreg free
   904                           
   905                           ;main.c: 35: nojoScheduler();
   906  00198E  EC62  F019         	call	_nojoScheduler	;wreg free
   907  001992                     
   908                           ;main.c: 38: {
   909                           ;main.c: 39: __nop();
   910  001992  F000               	nop	
   911  001994  D7FE               	goto	l162
   912  001996                     __end_of_main:
   913                           	opt stack 0
   914                           tblptru	equ	0xFF8
   915                           tblptrh	equ	0xFF7
   916                           tblptrl	equ	0xFF6
   917                           tablat	equ	0xFF5
   918                           postinc0	equ	0xFEE
   919                           wreg	equ	0xFE8
   920                           postinc1	equ	0xFE6
   921                           postdec2	equ	0xFDD
   922                           fsr2h	equ	0xFDA
   923                           fsr2l	equ	0xFD9
   924                           
   925 ;; *************** function _setupTimer *****************
   926 ;; Defined at:
   927 ;;		line 7 in file "timer.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;		None
   930 ;; Auto vars:     Size  Location     Type
   931 ;;		None
   932 ;; Return value:  Size  Location     Type
   933 ;;                  1    wreg      void 
   934 ;; Registers used:
   935 ;;		wreg, status,2
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   941 ;;      Params:         0       0       0       0       0       0       0
   942 ;;      Locals:         0       0       0       0       0       0       0
   943 ;;      Temps:          0       0       0       0       0       0       0
   944 ;;      Totals:         0       0       0       0       0       0       0
   945 ;;Total ram usage:        0 bytes
   946 ;; Hardware stack levels used:    1
   947 ;; Hardware stack levels required when called:    9
   948 ;; This function calls:
   949 ;;		Nothing
   950 ;; This function is called by:
   951 ;;		_main
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955                           	psect	text1
   956  00328A                     __ptext1:
   957                           	opt stack 0
   958  00328A                     _setupTimer:
   959                           	opt stack 21
   960                           
   961                           ;timer.c: 10: T0CONbits.T0CS = 0;
   962                           
   963                           ;incstack = 0
   964  00328A  9AD5               	bcf	4053,5,c	;volatile
   965                           
   966                           ;timer.c: 11: T0CONbits.T08BIT = 0;
   967  00328C  9CD5               	bcf	4053,6,c	;volatile
   968                           
   969                           ;timer.c: 12: T0CONbits.PSA = 0;
   970  00328E  96D5               	bcf	4053,3,c	;volatile
   971                           
   972                           ;timer.c: 13: T0CONbits.T0PS = 0b010;
   973  003290  50D5               	movf	4053,w,c	;volatile
   974  003292  0BF8               	andlw	-8
   975  003294  0902               	iorlw	2
   976  003296  6ED5               	movwf	4053,c	;volatile
   977                           
   978                           ;timer.c: 14: INTCONbits.TMR0IE = 1;
   979  003298  8AF2               	bsf	intcon,5,c	;volatile
   980                           
   981                           ;timer.c: 15: INTCONbits.TMR0IF = 0;
   982  00329A  94F2               	bcf	intcon,2,c	;volatile
   983                           
   984                           ;timer.c: 16: INTCONbits.PEIE = 1;
   985  00329C  8CF2               	bsf	intcon,6,c	;volatile
   986  00329E  0012               	return		;funcret
   987  0032A0                     __end_of_setupTimer:
   988                           	opt stack 0
   989                           tblptru	equ	0xFF8
   990                           tblptrh	equ	0xFF7
   991                           tblptrl	equ	0xFF6
   992                           tablat	equ	0xFF5
   993                           intcon	equ	0xFF2
   994                           postinc0	equ	0xFEE
   995                           wreg	equ	0xFE8
   996                           postinc1	equ	0xFE6
   997                           postdec2	equ	0xFDD
   998                           fsr2h	equ	0xFDA
   999                           fsr2l	equ	0xFD9
  1000                           
  1001 ;; *************** function _sem_create *****************
  1002 ;; Defined at:
  1003 ;;		line 4 in file "semaphore.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;  handler         2   19[BANK1 ] PTR struct sem
  1006 ;;		 -> s_2(26), s_1(26), 
  1007 ;;  initial_valu    4   21[BANK1 ] unsigned long 
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;		None
  1010 ;; Return value:  Size  Location     Type
  1011 ;;                  1    wreg      void 
  1012 ;; Registers used:
  1013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1014 ;; Tracked objects:
  1015 ;;		On entry : 0/0
  1016 ;;		On exit  : 0/0
  1017 ;;		Unchanged: 0/0
  1018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1019 ;;      Params:         0       0       6       0       0       0       0
  1020 ;;      Locals:         0       0       0       0       0       0       0
  1021 ;;      Temps:          0       0       0       0       0       0       0
  1022 ;;      Totals:         0       0       6       0       0       0       0
  1023 ;;Total ram usage:        6 bytes
  1024 ;; Hardware stack levels used:    1
  1025 ;; Hardware stack levels required when called:   10
  1026 ;; This function calls:
  1027 ;;		_queue_create
  1028 ;; This function is called by:
  1029 ;;		_main
  1030 ;; This function uses a non-reentrant model
  1031 ;;
  1032                           
  1033                           	psect	text2
  1034  00324A                     __ptext2:
  1035                           	opt stack 0
  1036  00324A                     _sem_create:
  1037                           	opt stack 20
  1038                           
  1039                           ;semaphore.c: 5: handler->sem_value = initial_value;
  1040                           
  1041                           ;incstack = 0
  1042  00324A  C113  FFD9         	movff	sem_create@handler,fsr2l
  1043  00324E  C114  FFDA         	movff	sem_create@handler+1,fsr2h
  1044  003252  C115  FFDE         	movff	sem_create@initial_value,postinc2
  1045  003256  C116  FFDD         	movff	sem_create@initial_value+1,postdec2
  1046                           
  1047                           ;semaphore.c: 6: queue_create(&handler->sem_queue);
  1048  00325A  0E02               	movlw	2
  1049  00325C  0101               	movlb	1	; () banked
  1050  00325E  2513               	addwf	sem_create@handler& (0+255),w,b
  1051  003260  6F11               	movwf	queue_create@queue_handler& (0+255),b
  1052  003262  0E00               	movlw	0
  1053  003264  2114               	addwfc	(sem_create@handler+1)& (0+255),w,b
  1054  003266  6F12               	movwf	(queue_create@queue_handler+1)& (0+255),b
  1055  003268  EC0F  F019         	call	_queue_create	;wreg free
  1056  00326C  0012               	return		;funcret
  1057  00326E                     __end_of_sem_create:
  1058                           	opt stack 0
  1059                           tblptru	equ	0xFF8
  1060                           tblptrh	equ	0xFF7
  1061                           tblptrl	equ	0xFF6
  1062                           tablat	equ	0xFF5
  1063                           intcon	equ	0xFF2
  1064                           postinc0	equ	0xFEE
  1065                           wreg	equ	0xFE8
  1066                           postinc1	equ	0xFE6
  1067                           postinc2	equ	0xFDE
  1068                           postdec2	equ	0xFDD
  1069                           fsr2h	equ	0xFDA
  1070                           fsr2l	equ	0xFD9
  1071                           
  1072 ;; *************** function _queue_create *****************
  1073 ;; Defined at:
  1074 ;;		line 4 in file "queue.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;  queue_handle    2   17[BANK1 ] PTR struct queue
  1077 ;;		 -> s_2(26), s_1(26), 
  1078 ;; Auto vars:     Size  Location     Type
  1079 ;;		None
  1080 ;; Return value:  Size  Location     Type
  1081 ;;                  1    wreg      void 
  1082 ;; Registers used:
  1083 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1089 ;;      Params:         0       0       2       0       0       0       0
  1090 ;;      Locals:         0       0       0       0       0       0       0
  1091 ;;      Temps:          0       0       0       0       0       0       0
  1092 ;;      Totals:         0       0       2       0       0       0       0
  1093 ;;Total ram usage:        2 bytes
  1094 ;; Hardware stack levels used:    1
  1095 ;; Hardware stack levels required when called:    9
  1096 ;; This function calls:
  1097 ;;		Nothing
  1098 ;; This function is called by:
  1099 ;;		_sem_create
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           	psect	text3
  1104  00321E                     __ptext3:
  1105                           	opt stack 0
  1106  00321E                     _queue_create:
  1107                           	opt stack 20
  1108                           
  1109                           ;queue.c: 5: queue_handler->queue_first = 0;
  1110                           
  1111                           ;incstack = 0
  1112  00321E  0101               	movlb	1	; () banked
  1113  003220  EE20 F014          	lfsr	2,20
  1114  003224  5111               	movf	queue_create@queue_handler& (0+255),w,b
  1115  003226  26D9               	addwf	fsr2l,f,c
  1116  003228  5112               	movf	(queue_create@queue_handler+1)& (0+255),w,b
  1117  00322A  22DA               	addwfc	fsr2h,f,c
  1118  00322C  6ADE               	clrf	postinc2,c
  1119  00322E  6ADE               	clrf	postinc2,c
  1120  003230  6ADE               	clrf	postinc2,c
  1121  003232  6ADD               	clrf	postdec2,c
  1122                           
  1123                           ;queue.c: 6: queue_handler->queue_size = 0;
  1124  003234  EE20 F010          	lfsr	2,16
  1125  003238  5111               	movf	queue_create@queue_handler& (0+255),w,b
  1126  00323A  26D9               	addwf	fsr2l,f,c
  1127  00323C  5112               	movf	(queue_create@queue_handler+1)& (0+255),w,b
  1128  00323E  22DA               	addwfc	fsr2h,f,c
  1129  003240  6ADE               	clrf	postinc2,c
  1130  003242  6ADE               	clrf	postinc2,c
  1131  003244  6ADE               	clrf	postinc2,c
  1132  003246  6ADD               	clrf	postdec2,c
  1133                           
  1134                           ; BSR set to: 1
  1135  003248  0012               	return		;funcret
  1136  00324A                     __end_of_queue_create:
  1137                           	opt stack 0
  1138                           tblptru	equ	0xFF8
  1139                           tblptrh	equ	0xFF7
  1140                           tblptrl	equ	0xFF6
  1141                           tablat	equ	0xFF5
  1142                           intcon	equ	0xFF2
  1143                           postinc0	equ	0xFEE
  1144                           wreg	equ	0xFE8
  1145                           postinc1	equ	0xFE6
  1146                           postinc2	equ	0xFDE
  1147                           postdec2	equ	0xFDD
  1148                           fsr2h	equ	0xFDA
  1149                           fsr2l	equ	0xFD9
  1150                           
  1151 ;; *************** function _nojoTaskCreate *****************
  1152 ;; Defined at:
  1153 ;;		line 25 in file "kernel.c"
  1154 ;; Parameters:    Size  Location     Type
  1155 ;;  id              4   17[BANK1 ] unsigned long 
  1156 ;;  prior           4   21[BANK1 ] unsigned long 
  1157 ;;  task_PTR        2   25[BANK1 ] PTR FTN()PTR void 
  1158 ;;		 -> controle(2), ph(2), cloro(2), limpeza(2), 
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;		None
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  1    wreg      void 
  1163 ;; Registers used:
  1164 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1170 ;;      Params:         0       0      10       0       0       0       0
  1171 ;;      Locals:         0       0       0       0       0       0       0
  1172 ;;      Temps:          0       0       6       0       0       0       0
  1173 ;;      Totals:         0       0      16       0       0       0       0
  1174 ;;Total ram usage:       16 bytes
  1175 ;; Hardware stack levels used:    1
  1176 ;; Hardware stack levels required when called:   10
  1177 ;; This function calls:
  1178 ;;		___wmul
  1179 ;; This function is called by:
  1180 ;;		_main
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           	psect	text4
  1185  000E6E                     __ptext4:
  1186                           	opt stack 0
  1187  000E6E                     _nojoTaskCreate:
  1188                           	opt stack 20
  1189                           
  1190                           ;kernel.c: 27: F_APTOS.FILA_APTOS[F_APTOS.tasks_installed].task_ID = id;
  1191                           
  1192                           ; BSR set to: 1
  1193                           ;incstack = 0
  1194  000E6E  0E70               	movlw	112
  1195  000E70  6EE6               	movwf	postinc1,c
  1196  000E72  0E00               	movlw	0
  1197  000E74  6EE6               	movwf	postinc1,c
  1198  000E76  EE23  F051         	lfsr	2,_F_APTOS+560
  1199  000E7A  CFDE F11B          	movff	postinc2,??_nojoTaskCreate
  1200  000E7E  CFDD F11C          	movff	postdec2,??_nojoTaskCreate+1
  1201  000E82  C11B  FFE6         	movff	??_nojoTaskCreate,postinc1
  1202  000E86  C11C  FFE6         	movff	??_nojoTaskCreate+1,postinc1
  1203  000E8A  EC10  F016         	call	___wmul	;wreg free
  1204  000E8E  0E21               	movlw	low _F_APTOS
  1205  000E90  244F               	addwf	btemp,w,c
  1206  000E92  6ED9               	movwf	fsr2l,c
  1207  000E94  0E01               	movlw	high _F_APTOS
  1208  000E96  2050               	addwfc	btemp+1,w,c
  1209  000E98  6EDA               	movwf	fsr2h,c
  1210  000E9A  C111  FFDE         	movff	nojoTaskCreate@id,postinc2
  1211  000E9E  C112  FFDE         	movff	nojoTaskCreate@id+1,postinc2
  1212  000EA2  C113  FFDE         	movff	nojoTaskCreate@id+2,postinc2
  1213  000EA6  C114  FFDE         	movff	nojoTaskCreate@id+3,postinc2
  1214                           
  1215                           ;kernel.c: 28: F_APTOS.FILA_APTOS[F_APTOS.tasks_installed].task_PRIOR = prior;
  1216  000EAA  0E70               	movlw	112
  1217  000EAC  6EE6               	movwf	postinc1,c
  1218  000EAE  0E00               	movlw	0
  1219  000EB0  6EE6               	movwf	postinc1,c
  1220  000EB2  EE23  F051         	lfsr	2,_F_APTOS+560
  1221  000EB6  CFDE F11B          	movff	postinc2,??_nojoTaskCreate
  1222  000EBA  CFDD F11C          	movff	postdec2,??_nojoTaskCreate+1
  1223  000EBE  C11B  FFE6         	movff	??_nojoTaskCreate,postinc1
  1224  000EC2  C11C  FFE6         	movff	??_nojoTaskCreate+1,postinc1
  1225  000EC6  EC10  F016         	call	___wmul	;wreg free
  1226  000ECA  0E04               	movlw	4
  1227  000ECC  264F               	addwf	btemp,f,c
  1228  000ECE  0E00               	movlw	0
  1229  000ED0  2250               	addwfc	btemp+1,f,c
  1230  000ED2  0E21               	movlw	low _F_APTOS
  1231  000ED4  244F               	addwf	btemp,w,c
  1232  000ED6  6ED9               	movwf	fsr2l,c
  1233  000ED8  0E01               	movlw	high _F_APTOS
  1234  000EDA  2050               	addwfc	btemp+1,w,c
  1235  000EDC  6EDA               	movwf	fsr2h,c
  1236  000EDE  C115  FFDE         	movff	nojoTaskCreate@prior,postinc2
  1237  000EE2  C116  FFDE         	movff	nojoTaskCreate@prior+1,postinc2
  1238  000EE6  C117  FFDE         	movff	nojoTaskCreate@prior+2,postinc2
  1239  000EEA  C118  FFDE         	movff	nojoTaskCreate@prior+3,postinc2
  1240                           
  1241                           ;kernel.c: 29: F_APTOS.FILA_APTOS[F_APTOS.tasks_installed].task_STATE = READY;
  1242  000EEE  0E70               	movlw	112
  1243  000EF0  6EE6               	movwf	postinc1,c
  1244  000EF2  0E00               	movlw	0
  1245  000EF4  6EE6               	movwf	postinc1,c
  1246  000EF6  EE23  F051         	lfsr	2,_F_APTOS+560
  1247  000EFA  CFDE F11B          	movff	postinc2,??_nojoTaskCreate
  1248  000EFE  CFDD F11C          	movff	postdec2,??_nojoTaskCreate+1
  1249  000F02  C11B  FFE6         	movff	??_nojoTaskCreate,postinc1
  1250  000F06  C11C  FFE6         	movff	??_nojoTaskCreate+1,postinc1
  1251  000F0A  EC10  F016         	call	___wmul	;wreg free
  1252  000F0E  0E08               	movlw	8
  1253  000F10  264F               	addwf	btemp,f,c
  1254  000F12  0E00               	movlw	0
  1255  000F14  2250               	addwfc	btemp+1,f,c
  1256  000F16  0E21               	movlw	low _F_APTOS
  1257  000F18  244F               	addwf	btemp,w,c
  1258  000F1A  6ED9               	movwf	fsr2l,c
  1259  000F1C  0E01               	movlw	high _F_APTOS
  1260  000F1E  2050               	addwfc	btemp+1,w,c
  1261  000F20  6EDA               	movwf	fsr2h,c
  1262  000F22  0E00               	movlw	0
  1263  000F24  6EDF               	movwf	indf2,c
  1264                           
  1265                           ;kernel.c: 30: F_APTOS.FILA_APTOS[F_APTOS.tasks_installed].task_PTR = task_PTR;
  1266  000F26  0E70               	movlw	112
  1267  000F28  6EE6               	movwf	postinc1,c
  1268  000F2A  0E00               	movlw	0
  1269  000F2C  6EE6               	movwf	postinc1,c
  1270  000F2E  EE23  F051         	lfsr	2,_F_APTOS+560
  1271  000F32  CFDE F11B          	movff	postinc2,??_nojoTaskCreate
  1272  000F36  CFDD F11C          	movff	postdec2,??_nojoTaskCreate+1
  1273  000F3A  C11B  FFE6         	movff	??_nojoTaskCreate,postinc1
  1274  000F3E  C11C  FFE6         	movff	??_nojoTaskCreate+1,postinc1
  1275  000F42  EC10  F016         	call	___wmul	;wreg free
  1276  000F46  0E09               	movlw	9
  1277  000F48  264F               	addwf	btemp,f,c
  1278  000F4A  0E00               	movlw	0
  1279  000F4C  2250               	addwfc	btemp+1,f,c
  1280  000F4E  0E21               	movlw	low _F_APTOS
  1281  000F50  244F               	addwf	btemp,w,c
  1282  000F52  6ED9               	movwf	fsr2l,c
  1283  000F54  0E01               	movlw	high _F_APTOS
  1284  000F56  2050               	addwfc	btemp+1,w,c
  1285  000F58  6EDA               	movwf	fsr2h,c
  1286  000F5A  C119  FFDE         	movff	nojoTaskCreate@task_PTR,postinc2
  1287  000F5E  C11A  FFDD         	movff	nojoTaskCreate@task_PTR+1,postdec2
  1288                           
  1289                           ;kernel.c: 31: F_APTOS.FILA_APTOS[F_APTOS.tasks_installed].task_CTX.ctx_STACK.task_stack
      +                          [0].TOSL = (uint32_t) task_PTR;
  1290  000F62  0E70               	movlw	112
  1291  000F64  6EE6               	movwf	postinc1,c
  1292  000F66  0E00               	movlw	0
  1293  000F68  6EE6               	movwf	postinc1,c
  1294  000F6A  EE23  F051         	lfsr	2,_F_APTOS+560
  1295  000F6E  CFDE F11B          	movff	postinc2,??_nojoTaskCreate
  1296  000F72  CFDD F11C          	movff	postdec2,??_nojoTaskCreate+1
  1297  000F76  C11B  FFE6         	movff	??_nojoTaskCreate,postinc1
  1298  000F7A  C11C  FFE6         	movff	??_nojoTaskCreate+1,postinc1
  1299  000F7E  EC10  F016         	call	___wmul	;wreg free
  1300  000F82  0E12               	movlw	18
  1301  000F84  264F               	addwf	btemp,f,c
  1302  000F86  0E00               	movlw	0
  1303  000F88  2250               	addwfc	btemp+1,f,c
  1304  000F8A  0E21               	movlw	low _F_APTOS
  1305  000F8C  244F               	addwf	btemp,w,c
  1306  000F8E  6ED9               	movwf	fsr2l,c
  1307  000F90  0E01               	movlw	high _F_APTOS
  1308  000F92  2050               	addwfc	btemp+1,w,c
  1309  000F94  6EDA               	movwf	fsr2h,c
  1310  000F96  C119  FFDF         	movff	nojoTaskCreate@task_PTR,indf2
  1311                           
  1312                           ;kernel.c: 32: F_APTOS.FILA_APTOS[F_APTOS.tasks_installed].task_CTX.ctx_STACK.task_stack
      +                          [0].TOSH = (uint32_t) task_PTR >> 8;
  1313  000F9A  0E70               	movlw	112
  1314  000F9C  6EE6               	movwf	postinc1,c
  1315  000F9E  0E00               	movlw	0
  1316  000FA0  6EE6               	movwf	postinc1,c
  1317  000FA2  EE23  F051         	lfsr	2,_F_APTOS+560
  1318  000FA6  CFDE F11B          	movff	postinc2,??_nojoTaskCreate
  1319  000FAA  CFDD F11C          	movff	postdec2,??_nojoTaskCreate+1
  1320  000FAE  C11B  FFE6         	movff	??_nojoTaskCreate,postinc1
  1321  000FB2  C11C  FFE6         	movff	??_nojoTaskCreate+1,postinc1
  1322  000FB6  EC10  F016         	call	___wmul	;wreg free
  1323  000FBA  0E13               	movlw	19
  1324  000FBC  264F               	addwf	btemp,f,c
  1325  000FBE  0E00               	movlw	0
  1326  000FC0  2250               	addwfc	btemp+1,f,c
  1327  000FC2  0E21               	movlw	low _F_APTOS
  1328  000FC4  244F               	addwf	btemp,w,c
  1329  000FC6  6ED9               	movwf	fsr2l,c
  1330  000FC8  0E01               	movlw	high _F_APTOS
  1331  000FCA  2050               	addwfc	btemp+1,w,c
  1332  000FCC  6EDA               	movwf	fsr2h,c
  1333  000FCE  0101               	movlb	1	; () banked
  1334  000FD0  5119               	movf	nojoTaskCreate@task_PTR& (0+255),w,b
  1335  000FD2  6F1D               	movwf	(??_nojoTaskCreate+2)& (0+255),b
  1336  000FD4  511A               	movf	(nojoTaskCreate@task_PTR+1)& (0+255),w,b
  1337  000FD6  6F1E               	movwf	(??_nojoTaskCreate+3)& (0+255),b
  1338  000FD8  6B1F               	clrf	(??_nojoTaskCreate+4)& (0+255),b
  1339  000FDA  6B20               	clrf	(??_nojoTaskCreate+5)& (0+255),b
  1340  000FDC  C11E  F11D         	movff	??_nojoTaskCreate+3,??_nojoTaskCreate+2
  1341  000FE0  C11F  F11E         	movff	??_nojoTaskCreate+4,??_nojoTaskCreate+3
  1342  000FE4  C120  F11F         	movff	??_nojoTaskCreate+5,??_nojoTaskCreate+4
  1343  000FE8  6B20               	clrf	(??_nojoTaskCreate+5)& (0+255),b
  1344  000FEA  511D               	movf	(??_nojoTaskCreate+2)& (0+255),w,b
  1345  000FEC  6EDF               	movwf	indf2,c
  1346                           
  1347                           ;kernel.c: 33: F_APTOS.FILA_APTOS[F_APTOS.tasks_installed].task_CTX.ctx_STACK.task_stack
      +                          [0].TOSU = (uint32_t) task_PTR >> 16;
  1348  000FEE  5119               	movf	nojoTaskCreate@task_PTR& (0+255),w,b
  1349  000FF0  6F1B               	movwf	??_nojoTaskCreate& (0+255),b
  1350  000FF2  511A               	movf	(nojoTaskCreate@task_PTR+1)& (0+255),w,b
  1351  000FF4  6F1C               	movwf	(??_nojoTaskCreate+1)& (0+255),b
  1352  000FF6  6B1D               	clrf	(??_nojoTaskCreate+2)& (0+255),b
  1353  000FF8  6B1E               	clrf	(??_nojoTaskCreate+3)& (0+255),b
  1354  000FFA  0E11               	movlw	17
  1355  000FFC  D005               	goto	u2970
  1356  000FFE                     u2975:
  1357  000FFE  90D8               	bcf	status,0,c
  1358  001000  331E               	rrcf	(??_nojoTaskCreate+3)& (0+255),f,b
  1359  001002  331D               	rrcf	(??_nojoTaskCreate+2)& (0+255),f,b
  1360  001004  331C               	rrcf	(??_nojoTaskCreate+1)& (0+255),f,b
  1361  001006  331B               	rrcf	??_nojoTaskCreate& (0+255),f,b
  1362  001008                     u2970:
  1363  001008  2EE8               	decfsz	wreg,f,c
  1364  00100A  D7F9               	goto	u2975
  1365  00100C  0E70               	movlw	112
  1366  00100E  6EE6               	movwf	postinc1,c
  1367  001010  0E00               	movlw	0
  1368  001012  6EE6               	movwf	postinc1,c
  1369  001014  EE23  F051         	lfsr	2,_F_APTOS+560
  1370  001018  CFDE F11F          	movff	postinc2,??_nojoTaskCreate+4
  1371  00101C  CFDD F120          	movff	postdec2,??_nojoTaskCreate+5
  1372  001020  C11F  FFE6         	movff	??_nojoTaskCreate+4,postinc1
  1373  001024  C120  FFE6         	movff	??_nojoTaskCreate+5,postinc1
  1374  001028  EC10  F016         	call	___wmul	;wreg free
  1375  00102C  0E14               	movlw	20
  1376  00102E  264F               	addwf	btemp,f,c
  1377  001030  0E00               	movlw	0
  1378  001032  2250               	addwfc	btemp+1,f,c
  1379  001034  0E21               	movlw	low _F_APTOS
  1380  001036  244F               	addwf	btemp,w,c
  1381  001038  6ED9               	movwf	fsr2l,c
  1382  00103A  0E01               	movlw	high _F_APTOS
  1383  00103C  2050               	addwfc	btemp+1,w,c
  1384  00103E  6EDA               	movwf	fsr2h,c
  1385  001040  50DF               	movf	223,w,c
  1386  001042  0101               	movlb	1	; () banked
  1387  001044  191B               	xorwf	??_nojoTaskCreate& (0+255),w,b
  1388  001046  0BE0               	andlw	-32
  1389  001048  191B               	xorwf	??_nojoTaskCreate& (0+255),w,b
  1390  00104A  6EDF               	movwf	223,c
  1391                           
  1392                           ;kernel.c: 34: F_APTOS.FILA_APTOS[F_APTOS.tasks_installed].task_CTX.ctx_STACK.stack_size
      +                           = 1;
  1393  00104C  0E70               	movlw	112
  1394  00104E  6EE6               	movwf	postinc1,c
  1395  001050  0E00               	movlw	0
  1396  001052  6EE6               	movwf	postinc1,c
  1397  001054  EE23  F051         	lfsr	2,_F_APTOS+560
  1398  001058  CFDE F11B          	movff	postinc2,??_nojoTaskCreate
  1399  00105C  CFDD F11C          	movff	postdec2,??_nojoTaskCreate+1
  1400  001060  C11B  FFE6         	movff	??_nojoTaskCreate,postinc1
  1401  001064  C11C  FFE6         	movff	??_nojoTaskCreate+1,postinc1
  1402  001068  EC10  F016         	call	___wmul	;wreg free
  1403  00106C  0E6F               	movlw	111
  1404  00106E  264F               	addwf	btemp,f,c
  1405  001070  0E00               	movlw	0
  1406  001072  2250               	addwfc	btemp+1,f,c
  1407  001074  0E21               	movlw	low _F_APTOS
  1408  001076  244F               	addwf	btemp,w,c
  1409  001078  6ED9               	movwf	fsr2l,c
  1410  00107A  0E01               	movlw	high _F_APTOS
  1411  00107C  2050               	addwfc	btemp+1,w,c
  1412  00107E  6EDA               	movwf	fsr2h,c
  1413  001080  0E01               	movlw	1
  1414  001082  6EDF               	movwf	indf2,c
  1415                           
  1416                           ;kernel.c: 35: F_APTOS.tasks_installed++;
  1417  001084  EE23  F051         	lfsr	2,_F_APTOS+560
  1418  001088  2ADE               	incf	postinc2,f,c
  1419  00108A  0E00               	movlw	0
  1420  00108C  22DE               	addwfc	postinc2,f,c
  1421  00108E  22DE               	addwfc	postinc2,f,c
  1422  001090  22DE               	addwfc	postinc2,f,c
  1423  001092  0012               	return		;funcret
  1424  001094                     __end_of_nojoTaskCreate:
  1425                           	opt stack 0
  1426                           tblptru	equ	0xFF8
  1427                           tblptrh	equ	0xFF7
  1428                           tblptrl	equ	0xFF6
  1429                           tablat	equ	0xFF5
  1430                           intcon	equ	0xFF2
  1431                           postinc0	equ	0xFEE
  1432                           wreg	equ	0xFE8
  1433                           postinc1	equ	0xFE6
  1434                           indf2	equ	0xFDF
  1435                           postinc2	equ	0xFDE
  1436                           postdec2	equ	0xFDD
  1437                           fsr2h	equ	0xFDA
  1438                           fsr2l	equ	0xFD9
  1439                           status	equ	0xFD8
  1440                           
  1441 ;; *************** function ___wmul *****************
  1442 ;; Defined at:
  1443 ;;		line 15 in file "/Applications/microchip/xc8/v1.44/sources/common/Umul16.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;  multiplier      2  [STACK] unsigned int 
  1446 ;;  multiplicand    2  [STACK] unsigned int 
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;  product         2  [STACK] unsigned int 
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  2  [STACK] unsigned int 
  1451 ;; Registers used:
  1452 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1458 ;;      Params:         0       0       0       0       0       0       0
  1459 ;;      Locals:         0       0       0       0       0       0       0
  1460 ;;      Temps:          0       0       0       0       0       0       0
  1461 ;;      Totals:         0       0       0       0       0       0       0
  1462 ;;Total ram usage:        0 bytes
  1463 ;; Hardware stack levels used:    1
  1464 ;; Hardware stack levels required when called:    9
  1465 ;; This function calls:
  1466 ;;		Nothing
  1467 ;; This function is called by:
  1468 ;;		_delay_queue_remove
  1469 ;;		_nojoTaskCreate
  1470 ;;		_nojoDispatcher
  1471 ;;		_libera_processos
  1472 ;;		_RR_scheduler
  1473 ;;		_sem_wait
  1474 ;;		_sem_post
  1475 ;;		_priority_scheduler
  1476 ;; This function uses a reentrant model
  1477 ;;
  1478                           
  1479                           	psect	text5
  1480  002C20                     __ptext5:
  1481                           	opt stack 0
  1482  002C20                     ___wmul:
  1483                           	opt stack 0
  1484                           
  1485                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  1486  002C20  52E6               	movf	postinc1,f,c
  1487  002C22  52E6               	movf	postinc1,f,c
  1488                           
  1489                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
  1490                           
  1491                           ;incstack = 0
  1492  002C24  0EFA               	movlw	-6
  1493  002C26  CFE3 F05A          	movff	plusw1,btemp+11
  1494                           
  1495                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
  1496  002C2A  0EFC               	movlw	-4
  1497  002C2C  50E3               	movf	plusw1,w,c
  1498  002C2E  025A               	mulwf	btemp+11,c
  1499                           
  1500                           ;stkvar	___wmul@product @ sp[(-2)+0]
  1501  002C30  0EFE               	movlw	-2
  1502  002C32  CFF3 FFE3          	movff	prodl,plusw1
  1503  002C36  0EFF               	movlw	-1
  1504  002C38  CFF4 FFE3          	movff	prodh,plusw1
  1505                           
  1506                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
  1507  002C3C  0EFB               	movlw	251
  1508  002C3E  24E1               	addwf	fsr1l,w,c
  1509  002C40  6ED9               	movwf	fsr2l,c
  1510  002C42  0EFF               	movlw	255
  1511  002C44  20E2               	addwfc	fsr1h,w,c
  1512  002C46  6EDA               	movwf	fsr2h,c
  1513  002C48  50DF               	movf	indf2,w,c
  1514  002C4A  6E5A               	movwf	btemp+11,c
  1515                           
  1516                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
  1517  002C4C  0EFC               	movlw	-4
  1518  002C4E  50E3               	movf	plusw1,w,c
  1519  002C50  025A               	mulwf	btemp+11,c
  1520  002C52  CFF3 FFF4          	movff	prodl,prodh
  1521  002C56  6AF3               	clrf	prodl,c
  1522                           
  1523                           ;stkvar	___wmul@product @ sp[(-2)+0]
  1524  002C58  50E1               	movf	fsr1l,w,c
  1525  002C5A  0FFE               	addlw	-2
  1526  002C5C  6ED9               	movwf	fsr2l,c
  1527  002C5E  50E2               	movf	fsr1h,w,c
  1528  002C60  6EDA               	movwf	fsr2h,c
  1529  002C62  0EFF               	movlw	255
  1530  002C64  22DA               	addwfc	fsr2h,f,c
  1531  002C66  50F3               	movf	prodl,w,c
  1532  002C68  26DE               	addwf	postinc2,f,c
  1533  002C6A  50F4               	movf	prodh,w,c
  1534  002C6C  22DD               	addwfc	postdec2,f,c
  1535                           
  1536                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
  1537  002C6E  0EFA               	movlw	-6
  1538  002C70  CFE3 F05A          	movff	plusw1,btemp+11
  1539                           
  1540                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
  1541  002C74  0EFD               	movlw	253
  1542  002C76  24E1               	addwf	fsr1l,w,c
  1543  002C78  6ED9               	movwf	fsr2l,c
  1544  002C7A  0EFF               	movlw	255
  1545  002C7C  20E2               	addwfc	fsr1h,w,c
  1546  002C7E  6EDA               	movwf	fsr2h,c
  1547  002C80  50DF               	movf	indf2,w,c
  1548  002C82  025A               	mulwf	btemp+11,c
  1549  002C84  CFF3 FFF4          	movff	prodl,prodh
  1550  002C88  6AF3               	clrf	prodl,c
  1551                           
  1552                           ;stkvar	___wmul@product @ sp[(-2)+0]
  1553  002C8A  50E1               	movf	fsr1l,w,c
  1554  002C8C  0FFE               	addlw	-2
  1555  002C8E  6ED9               	movwf	fsr2l,c
  1556  002C90  50E2               	movf	fsr1h,w,c
  1557  002C92  6EDA               	movwf	fsr2h,c
  1558  002C94  0EFF               	movlw	255
  1559  002C96  22DA               	addwfc	fsr2h,f,c
  1560  002C98  50F3               	movf	prodl,w,c
  1561  002C9A  26DE               	addwf	postinc2,f,c
  1562  002C9C  50F4               	movf	prodh,w,c
  1563  002C9E  22DD               	addwfc	postdec2,f,c
  1564                           
  1565                           ;stkvar	___wmul@product @ sp[(-2)+0]
  1566  002CA0  0EFE               	movlw	-2
  1567  002CA2  CFE3 F04F          	movff	plusw1,btemp
  1568  002CA6  0EFF               	movlw	-1
  1569  002CA8  CFE3 F050          	movff	plusw1,btemp+1
  1570                           
  1571                           ; ___wmul: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsiz
      +                          e = 4, vargsize = 0
  1572  002CAC  0EFA               	movlw	250
  1573  002CAE  26E1               	addwf	fsr1l,f,c
  1574  002CB0  0EFF               	movlw	255
  1575  002CB2  22E2               	addwfc	fsr1h,f,c
  1576  002CB4  0012               	return		;funcret
  1577  002CB6                     __end_of___wmul:
  1578                           	opt stack 0
  1579                           tblptru	equ	0xFF8
  1580                           tblptrh	equ	0xFF7
  1581                           tblptrl	equ	0xFF6
  1582                           tablat	equ	0xFF5
  1583                           prodh	equ	0xFF4
  1584                           prodl	equ	0xFF3
  1585                           intcon	equ	0xFF2
  1586                           postinc0	equ	0xFEE
  1587                           wreg	equ	0xFE8
  1588                           postinc1	equ	0xFE6
  1589                           plusw1	equ	0xFE3
  1590                           fsr1h	equ	0xFE2
  1591                           fsr1l	equ	0xFE1
  1592                           indf2	equ	0xFDF
  1593                           postinc2	equ	0xFDE
  1594                           postdec2	equ	0xFDD
  1595                           fsr2h	equ	0xFDA
  1596                           fsr2l	equ	0xFD9
  1597                           status	equ	0xFD8
  1598                           
  1599 ;; *************** function _nojoStart *****************
  1600 ;; Defined at:
  1601 ;;		line 7 in file "kernel.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;		None
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;		None
  1606 ;; Return value:  Size  Location     Type
  1607 ;;                  1    wreg      void 
  1608 ;; Registers used:
  1609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1615 ;;      Params:         0       0       0       0       0       0       0
  1616 ;;      Locals:         0       0       0       0       0       0       0
  1617 ;;      Temps:          0       0       0       0       0       0       0
  1618 ;;      Totals:         0       0       0       0       0       0       0
  1619 ;;Total ram usage:        0 bytes
  1620 ;; Hardware stack levels used:    1
  1621 ;; Hardware stack levels required when called:   10
  1622 ;; This function calls:
  1623 ;;		_delay_queue_create
  1624 ;; This function is called by:
  1625 ;;		_main
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           	psect	text6
  1630  002E6C                     __ptext6:
  1631                           	opt stack 0
  1632  002E6C                     _nojoStart:
  1633                           	opt stack 20
  1634                           
  1635                           ;kernel.c: 13: F_APTOS.FILA_APTOS[0].task_ID = 0;
  1636                           
  1637                           ;incstack = 0
  1638  002E6C  0E00               	movlw	0
  1639  002E6E  CFE8 F121          	movff	wreg,_F_APTOS
  1640  002E72  0E00               	movlw	0
  1641  002E74  CFE8 F122          	movff	wreg,_F_APTOS+1
  1642  002E78  0E00               	movlw	0
  1643  002E7A  CFE8 F123          	movff	wreg,_F_APTOS+2
  1644  002E7E  0E00               	movlw	0
  1645  002E80  CFE8 F124          	movff	wreg,_F_APTOS+3
  1646                           
  1647                           ;kernel.c: 14: F_APTOS.FILA_APTOS[0].task_PRIOR = 0;
  1648  002E84  0E00               	movlw	0
  1649  002E86  CFE8 F125          	movff	wreg,_F_APTOS+4
  1650  002E8A  0E00               	movlw	0
  1651  002E8C  CFE8 F126          	movff	wreg,_F_APTOS+5
  1652  002E90  0E00               	movlw	0
  1653  002E92  CFE8 F127          	movff	wreg,_F_APTOS+6
  1654  002E96  0E00               	movlw	0
  1655  002E98  CFE8 F128          	movff	wreg,_F_APTOS+7
  1656                           
  1657                           ;kernel.c: 15: F_APTOS.FILA_APTOS[0].task_STATE = READY;
  1658  002E9C  0E00               	movlw	0
  1659  002E9E  CFE8 F129          	movff	wreg,_F_APTOS+8
  1660                           
  1661                           ;kernel.c: 16: F_APTOS.FILA_APTOS[0].task_PTR = nojoTaskIdle;
  1662  002EA2  0E00               	movlw	0
  1663  002EA4  CFE8 F12A          	movff	wreg,_F_APTOS+9
  1664  002EA8  0E00               	movlw	0
  1665  002EAA  CFE8 F12B          	movff	wreg,_F_APTOS+10
  1666                           
  1667                           ;kernel.c: 17: F_APTOS.tasks_installed = 1;
  1668  002EAE  0E01               	movlw	1
  1669  002EB0  CFE8 F351          	movff	wreg,_F_APTOS+560
  1670  002EB4  0E00               	movlw	0
  1671  002EB6  CFE8 F352          	movff	wreg,_F_APTOS+561
  1672  002EBA  0E00               	movlw	0
  1673  002EBC  CFE8 F353          	movff	wreg,_F_APTOS+562
  1674  002EC0  0E00               	movlw	0
  1675  002EC2  CFE8 F354          	movff	wreg,_F_APTOS+563
  1676                           
  1677                           ;kernel.c: 18: F_APTOS.task_running = 0;
  1678  002EC6  0E00               	movlw	0
  1679  002EC8  CFE8 F355          	movff	wreg,_F_APTOS+564
  1680  002ECC  0E00               	movlw	0
  1681  002ECE  CFE8 F356          	movff	wreg,_F_APTOS+565
  1682  002ED2  0E00               	movlw	0
  1683  002ED4  CFE8 F357          	movff	wreg,_F_APTOS+566
  1684  002ED8  0E00               	movlw	0
  1685  002EDA  CFE8 F358          	movff	wreg,_F_APTOS+567
  1686                           
  1687                           ;kernel.c: 19: delay_queue_create(&Q_DELAY);
  1688  002EDE  0E80               	movlw	low _Q_DELAY
  1689  002EE0  0101               	movlb	1	; () banked
  1690  002EE2  6F11               	movwf	delay_queue_create@delay_queue_handler& (0+255),b
  1691  002EE4  0E00               	movlw	high _Q_DELAY
  1692  002EE6  6F12               	movwf	(delay_queue_create@delay_queue_handler+1)& (0+255),b
  1693  002EE8  ECAD  F017         	call	_delay_queue_create	;wreg free
  1694                           
  1695                           ;kernel.c: 22: INTCONbits.GIE = 1;
  1696  002EEC  8EF2               	bsf	intcon,7,c	;volatile
  1697  002EEE  0012               	return		;funcret
  1698  002EF0                     __end_of_nojoStart:
  1699                           	opt stack 0
  1700                           tblptru	equ	0xFF8
  1701                           tblptrh	equ	0xFF7
  1702                           tblptrl	equ	0xFF6
  1703                           tablat	equ	0xFF5
  1704                           prodh	equ	0xFF4
  1705                           prodl	equ	0xFF3
  1706                           intcon	equ	0xFF2
  1707                           postinc0	equ	0xFEE
  1708                           wreg	equ	0xFE8
  1709                           postinc1	equ	0xFE6
  1710                           plusw1	equ	0xFE3
  1711                           fsr1h	equ	0xFE2
  1712                           fsr1l	equ	0xFE1
  1713                           indf2	equ	0xFDF
  1714                           postinc2	equ	0xFDE
  1715                           postdec2	equ	0xFDD
  1716                           fsr2h	equ	0xFDA
  1717                           fsr2l	equ	0xFD9
  1718                           status	equ	0xFD8
  1719                           
  1720 ;; *************** function _delay_queue_create *****************
  1721 ;; Defined at:
  1722 ;;		line 8 in file "delay.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;  delay_queue_    2   17[BANK1 ] PTR struct queue_delay
  1725 ;;		 -> Q_DELAY(36), 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  i               2   21[BANK1 ] int 
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      void 
  1730 ;; Registers used:
  1731 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1737 ;;      Params:         0       0       2       0       0       0       0
  1738 ;;      Locals:         0       0       2       0       0       0       0
  1739 ;;      Temps:          0       0       2       0       0       0       0
  1740 ;;      Totals:         0       0       6       0       0       0       0
  1741 ;;Total ram usage:        6 bytes
  1742 ;; Hardware stack levels used:    1
  1743 ;; Hardware stack levels required when called:    9
  1744 ;; This function calls:
  1745 ;;		Nothing
  1746 ;; This function is called by:
  1747 ;;		_nojoStart
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text7
  1752  002F5A                     __ptext7:
  1753                           	opt stack 0
  1754  002F5A                     _delay_queue_create:
  1755                           	opt stack 20
  1756                           
  1757                           ;delay.c: 9: int i;
  1758                           ;delay.c: 10: delay_queue_handler->delay_queue_size = 0;
  1759                           
  1760                           ;incstack = 0
  1761  002F5A  0101               	movlb	1	; () banked
  1762  002F5C  EE20 F020          	lfsr	2,32
  1763  002F60  5111               	movf	delay_queue_create@delay_queue_handler& (0+255),w,b
  1764  002F62  26D9               	addwf	fsr2l,f,c
  1765  002F64  5112               	movf	(delay_queue_create@delay_queue_handler+1)& (0+255),w,b
  1766  002F66  22DA               	addwfc	fsr2h,f,c
  1767  002F68  6ADE               	clrf	postinc2,c
  1768  002F6A  6ADE               	clrf	postinc2,c
  1769  002F6C  6ADE               	clrf	postinc2,c
  1770  002F6E  6ADD               	clrf	postdec2,c
  1771                           
  1772                           ; BSR set to: 1
  1773                           ;delay.c: 11: for (i = 0; i < 4; i++)
  1774  002F70  0E00               	movlw	0
  1775  002F72  6F16               	movwf	(delay_queue_create@i+1)& (0+255),b
  1776  002F74  0E00               	movlw	0
  1777  002F76  6F15               	movwf	delay_queue_create@i& (0+255),b
  1778  002F78                     l3519:
  1779                           
  1780                           ; BSR set to: 1
  1781  002F78  BF16               	btfsc	(delay_queue_create@i+1)& (0+255),7,b
  1782  002F7A  D006               	goto	l15
  1783  002F7C  5116               	movf	(delay_queue_create@i+1)& (0+255),w,b
  1784  002F7E  E11E               	bnz	l17
  1785  002F80  0E04               	movlw	4
  1786  002F82  5D15               	subwf	delay_queue_create@i& (0+255),w,b
  1787  002F84  B0D8               	btfsc	status,0,c
  1788  002F86  0012               	return	
  1789  002F88                     l15:
  1790                           
  1791                           ; BSR set to: 1
  1792                           ;delay.c: 12: delay_queue_handler->delay_QUEUE[i].task_pos_ready_queue = 0;
  1793                           
  1794                           ; BSR set to: 1
  1795  002F88  C115  F113         	movff	delay_queue_create@i,??_delay_queue_create
  1796  002F8C  C116  F114         	movff	delay_queue_create@i+1,??_delay_queue_create+1
  1797  002F90  90D8               	bcf	status,0,c
  1798  002F92  3713               	rlcf	??_delay_queue_create& (0+255),f,b
  1799  002F94  3714               	rlcf	(??_delay_queue_create+1)& (0+255),f,b
  1800  002F96  90D8               	bcf	status,0,c
  1801  002F98  3713               	rlcf	??_delay_queue_create& (0+255),f,b
  1802  002F9A  3714               	rlcf	(??_delay_queue_create+1)& (0+255),f,b
  1803  002F9C  90D8               	bcf	status,0,c
  1804  002F9E  3713               	rlcf	??_delay_queue_create& (0+255),f,b
  1805  002FA0  3714               	rlcf	(??_delay_queue_create+1)& (0+255),f,b
  1806  002FA2  5113               	movf	??_delay_queue_create& (0+255),w,b
  1807  002FA4  2511               	addwf	delay_queue_create@delay_queue_handler& (0+255),w,b
  1808  002FA6  6ED9               	movwf	fsr2l,c
  1809  002FA8  5114               	movf	(??_delay_queue_create+1)& (0+255),w,b
  1810  002FAA  2112               	addwfc	(delay_queue_create@delay_queue_handler+1)& (0+255),w,b
  1811  002FAC  6EDA               	movwf	fsr2h,c
  1812  002FAE  6ADE               	clrf	postinc2,c
  1813  002FB0  6ADE               	clrf	postinc2,c
  1814  002FB2  6ADE               	clrf	postinc2,c
  1815  002FB4  6ADD               	clrf	postdec2,c
  1816                           
  1817                           ; BSR set to: 1
  1818  002FB6  4B15               	infsnz	delay_queue_create@i& (0+255),f,b
  1819  002FB8  2B16               	incf	(delay_queue_create@i+1)& (0+255),f,b
  1820  002FBA  D7DE               	goto	l3519
  1821  002FBC                     l17:
  1822                           
  1823                           ; BSR set to: 1
  1824  002FBC  0012               	return		;funcret
  1825  002FBE                     __end_of_delay_queue_create:
  1826                           	opt stack 0
  1827                           tblptru	equ	0xFF8
  1828                           tblptrh	equ	0xFF7
  1829                           tblptrl	equ	0xFF6
  1830                           tablat	equ	0xFF5
  1831                           prodh	equ	0xFF4
  1832                           prodl	equ	0xFF3
  1833                           intcon	equ	0xFF2
  1834                           postinc0	equ	0xFEE
  1835                           wreg	equ	0xFE8
  1836                           postinc1	equ	0xFE6
  1837                           plusw1	equ	0xFE3
  1838                           fsr1h	equ	0xFE2
  1839                           fsr1l	equ	0xFE1
  1840                           indf2	equ	0xFDF
  1841                           postinc2	equ	0xFDE
  1842                           postdec2	equ	0xFDD
  1843                           fsr2h	equ	0xFDA
  1844                           fsr2l	equ	0xFD9
  1845                           status	equ	0xFD8
  1846                           
  1847 ;; *************** function _nojoScheduler *****************
  1848 ;; Defined at:
  1849 ;;		line 20 in file "timer.c"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;		None
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;		None
  1854 ;; Return value:  Size  Location     Type
  1855 ;;                  1  [STACK] void 
  1856 ;; Registers used:
  1857 ;;		wreg, status,2
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1863 ;;      Params:         0       0       0       0       0       0       0
  1864 ;;      Locals:         0       0       0       0       0       0       0
  1865 ;;      Temps:          0       0       0       0       0       0       0
  1866 ;;      Totals:         0       0       0       0       0       0       0
  1867 ;;Total ram usage:        0 bytes
  1868 ;; Hardware stack levels used:    1
  1869 ;; Hardware stack levels required when called:    9
  1870 ;; This function calls:
  1871 ;;		Nothing
  1872 ;; This function is called by:
  1873 ;;		_delay_queue_insert
  1874 ;;		_main
  1875 ;; This function uses a reentrant model
  1876 ;;
  1877                           
  1878                           	psect	text8
  1879  0032C4                     __ptext8:
  1880                           	opt stack 0
  1881  0032C4                     _nojoScheduler:
  1882                           	opt stack 15
  1883                           
  1884                           ;timer.c: 22: TMR0 = 64911;
  1885                           
  1886                           ; BSR set to: 1
  1887                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  1888                           ;incstack = 0
  1889  0032C4  0EFD               	movlw	253
  1890  0032C6  6ED7               	movwf	4055,c	;volatile
  1891  0032C8  0E8F               	movlw	143
  1892  0032CA  6ED6               	movwf	4054,c	;volatile
  1893                           
  1894                           ;timer.c: 25: T0CONbits.TMR0ON = 1;
  1895  0032CC  8ED5               	bsf	4053,7,c	;volatile
  1896                           
  1897                           ; _nojoScheduler: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0,
      +                           argsize = 0, vargsize = 0
  1898  0032CE  0012               	return		;funcret
  1899  0032D0                     __end_of_nojoScheduler:
  1900                           	opt stack 0
  1901                           tblptru	equ	0xFF8
  1902                           tblptrh	equ	0xFF7
  1903                           tblptrl	equ	0xFF6
  1904                           tablat	equ	0xFF5
  1905                           prodh	equ	0xFF4
  1906                           prodl	equ	0xFF3
  1907                           intcon	equ	0xFF2
  1908                           postinc0	equ	0xFEE
  1909                           wreg	equ	0xFE8
  1910                           postinc1	equ	0xFE6
  1911                           plusw1	equ	0xFE3
  1912                           fsr1h	equ	0xFE2
  1913                           fsr1l	equ	0xFE1
  1914                           indf2	equ	0xFDF
  1915                           postinc2	equ	0xFDE
  1916                           postdec2	equ	0xFDD
  1917                           fsr2h	equ	0xFDA
  1918                           fsr2l	equ	0xFD9
  1919                           status	equ	0xFD8
  1920                           
  1921 ;; *************** function _SRAMInitHeap *****************
  1922 ;; Defined at:
  1923 ;;		line 314 in file "sralloc.c"
  1924 ;; Parameters:    Size  Location     Type
  1925 ;;		None
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;  count           2   19[BANK1 ] unsigned int 
  1928 ;;  pHeap           2   17[BANK1 ] PTR unsigned char 
  1929 ;;		 -> _uDynamicHeap(512), 
  1930 ;; Return value:  Size  Location     Type
  1931 ;;                  1    wreg      void 
  1932 ;; Registers used:
  1933 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1939 ;;      Params:         0       0       0       0       0       0       0
  1940 ;;      Locals:         0       0       4       0       0       0       0
  1941 ;;      Temps:          0       0       0       0       0       0       0
  1942 ;;      Totals:         0       0       4       0       0       0       0
  1943 ;;Total ram usage:        4 bytes
  1944 ;; Hardware stack levels used:    1
  1945 ;; Hardware stack levels required when called:    9
  1946 ;; This function calls:
  1947 ;;		Nothing
  1948 ;; This function is called by:
  1949 ;;		_main
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           	psect	text9
  1954  00301C                     __ptext9:
  1955                           	opt stack 0
  1956  00301C                     _SRAMInitHeap:
  1957                           	opt stack 21
  1958                           
  1959                           ;sralloc.c: 316: unsigned char *  pHeap;
  1960                           ;sralloc.c: 317: unsigned int count;
  1961                           ;sralloc.c: 319: pHeap = _uDynamicHeap;
  1962                           
  1963                           ;incstack = 0
  1964  00301C  0E59               	movlw	low __uDynamicHeap
  1965  00301E  0101               	movlb	1	; () banked
  1966  003020  6F11               	movwf	SRAMInitHeap@pHeap& (0+255),b
  1967  003022  0E03               	movlw	high __uDynamicHeap
  1968  003024  6F12               	movwf	(SRAMInitHeap@pHeap+1)& (0+255),b
  1969                           
  1970                           ; BSR set to: 1
  1971                           ;sralloc.c: 320: count = 0x200-1;
  1972  003026  0E01               	movlw	1
  1973  003028  6F14               	movwf	(SRAMInitHeap@count+1)& (0+255),b
  1974  00302A  6913               	setf	SRAMInitHeap@count& (0+255),b
  1975  00302C                     
  1976                           ; BSR set to: 1
  1977                           ;sralloc.c: 323: {
  1978                           ;sralloc.c: 324: if (count > 0x7F)
  1979                           
  1980                           ; BSR set to: 1
  1981  00302C  5114               	movf	(SRAMInitHeap@count+1)& (0+255),w,b
  1982  00302E  E104               	bnz	u3000
  1983  003030  0E80               	movlw	128
  1984  003032  5D13               	subwf	SRAMInitHeap@count& (0+255),w,b
  1985  003034  A0D8               	btfss	status,0,c
  1986  003036  D011               	goto	l291
  1987  003038                     u3000:
  1988                           
  1989                           ; BSR set to: 1
  1990                           ;sralloc.c: 325: {
  1991                           ;sralloc.c: 326: *pHeap = 0x7F;
  1992  003038  C111  FFD9         	movff	SRAMInitHeap@pHeap,fsr2l
  1993  00303C  C112  FFDA         	movff	SRAMInitHeap@pHeap+1,fsr2h
  1994  003040  0E7F               	movlw	127
  1995  003042  6EDF               	movwf	indf2,c
  1996                           
  1997                           ; BSR set to: 1
  1998                           ;sralloc.c: 327: pHeap += 0x7F;
  1999  003044  0E7F               	movlw	127
  2000  003046  2711               	addwf	SRAMInitHeap@pHeap& (0+255),f,b
  2001  003048  0E00               	movlw	0
  2002  00304A  2312               	addwfc	(SRAMInitHeap@pHeap+1)& (0+255),f,b
  2003                           
  2004                           ; BSR set to: 1
  2005                           ;sralloc.c: 328: count = count - 0x7F;
  2006  00304C  0E81               	movlw	129
  2007  00304E  2513               	addwf	SRAMInitHeap@count& (0+255),w,b
  2008  003050  6F13               	movwf	SRAMInitHeap@count& (0+255),b
  2009  003052  0EFF               	movlw	255
  2010  003054  2114               	addwfc	(SRAMInitHeap@count+1)& (0+255),w,b
  2011  003056  6F14               	movwf	(SRAMInitHeap@count+1)& (0+255),b
  2012                           
  2013                           ;sralloc.c: 329: }
  2014  003058  D7E9               	goto	l290
  2015  00305A                     l291:
  2016                           
  2017                           ; BSR set to: 1
  2018                           ;sralloc.c: 330: else
  2019                           ;sralloc.c: 331: {
  2020                           ;sralloc.c: 332: *pHeap = count;
  2021                           
  2022                           ; BSR set to: 1
  2023  00305A  C111  FFD9         	movff	SRAMInitHeap@pHeap,fsr2l
  2024  00305E  C112  FFDA         	movff	SRAMInitHeap@pHeap+1,fsr2h
  2025  003062  C113  FFDF         	movff	SRAMInitHeap@count,indf2
  2026                           
  2027                           ; BSR set to: 1
  2028                           ;sralloc.c: 333: *(pHeap + count) = 0;
  2029  003066  5113               	movf	SRAMInitHeap@count& (0+255),w,b
  2030  003068  2511               	addwf	SRAMInitHeap@pHeap& (0+255),w,b
  2031  00306A  6ED9               	movwf	fsr2l,c
  2032  00306C  5114               	movf	(SRAMInitHeap@count+1)& (0+255),w,b
  2033  00306E  2112               	addwfc	(SRAMInitHeap@pHeap+1)& (0+255),w,b
  2034  003070  6EDA               	movwf	fsr2h,c
  2035  003072  0E00               	movlw	0
  2036  003074  6EDF               	movwf	indf2,c
  2037                           
  2038                           ; BSR set to: 1
  2039                           ;sralloc.c: 334: return;
  2040  003076  0012               	return	
  2041  003078                     __end_of_SRAMInitHeap:
  2042                           	opt stack 0
  2043                           tblptru	equ	0xFF8
  2044                           tblptrh	equ	0xFF7
  2045                           tblptrl	equ	0xFF6
  2046                           tablat	equ	0xFF5
  2047                           prodh	equ	0xFF4
  2048                           prodl	equ	0xFF3
  2049                           intcon	equ	0xFF2
  2050                           postinc0	equ	0xFEE
  2051                           wreg	equ	0xFE8
  2052                           postinc1	equ	0xFE6
  2053                           plusw1	equ	0xFE3
  2054                           fsr1h	equ	0xFE2
  2055                           fsr1l	equ	0xFE1
  2056                           indf2	equ	0xFDF
  2057                           postinc2	equ	0xFDE
  2058                           postdec2	equ	0xFDD
  2059                           fsr2h	equ	0xFDA
  2060                           fsr2l	equ	0xFD9
  2061                           status	equ	0xFD8
  2062                           
  2063 ;; *************** function _PORTInit *****************
  2064 ;; Defined at:
  2065 ;;		line 48 in file "main.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;		None
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;		None
  2070 ;; Return value:  Size  Location     Type
  2071 ;;                  1    wreg      void 
  2072 ;; Registers used:
  2073 ;;		None
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2079 ;;      Params:         0       0       0       0       0       0       0
  2080 ;;      Locals:         0       0       0       0       0       0       0
  2081 ;;      Temps:          0       0       0       0       0       0       0
  2082 ;;      Totals:         0       0       0       0       0       0       0
  2083 ;;Total ram usage:        0 bytes
  2084 ;; Hardware stack levels used:    1
  2085 ;; Hardware stack levels required when called:    9
  2086 ;; This function calls:
  2087 ;;		Nothing
  2088 ;; This function is called by:
  2089 ;;		_main
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092                           
  2093                           	psect	text10
  2094  0032A0                     __ptext10:
  2095                           	opt stack 0
  2096  0032A0                     _PORTInit:
  2097                           	opt stack 21
  2098                           
  2099                           ;main.c: 50: TRISCbits.RC0 = 0;
  2100                           
  2101                           ; BSR set to: 1
  2102                           ;incstack = 0
  2103  0032A0  9094               	bcf	3988,0,c	;volatile
  2104                           
  2105                           ;main.c: 51: TRISCbits.RC1 = 0;
  2106  0032A2  9294               	bcf	3988,1,c	;volatile
  2107                           
  2108                           ;main.c: 52: TRISCbits.RC2 = 0;
  2109  0032A4  9494               	bcf	3988,2,c	;volatile
  2110                           
  2111                           ;main.c: 53: TRISCbits.RC3 = 0;
  2112  0032A6  9694               	bcf	3988,3,c	;volatile
  2113                           
  2114                           ;main.c: 54: TRISCbits.RC4 = 0;
  2115  0032A8  9894               	bcf	3988,4,c	;volatile
  2116                           
  2117                           ;main.c: 55: TRISCbits.RC5 = 0;
  2118  0032AA  9A94               	bcf	3988,5,c	;volatile
  2119                           
  2120                           ;main.c: 56: TRISCbits.RC7 = 1;
  2121  0032AC  8E94               	bsf	3988,7,c	;volatile
  2122                           
  2123                           ;main.c: 57: PORTCbits.RC0 = 0;
  2124  0032AE  9082               	bcf	3970,0,c	;volatile
  2125                           
  2126                           ;main.c: 58: PORTCbits.RC1 = 0;
  2127  0032B0  9282               	bcf	3970,1,c	;volatile
  2128  0032B2  0012               	return		;funcret
  2129  0032B4                     __end_of_PORTInit:
  2130                           	opt stack 0
  2131                           tblptru	equ	0xFF8
  2132                           tblptrh	equ	0xFF7
  2133                           tblptrl	equ	0xFF6
  2134                           tablat	equ	0xFF5
  2135                           prodh	equ	0xFF4
  2136                           prodl	equ	0xFF3
  2137                           intcon	equ	0xFF2
  2138                           postinc0	equ	0xFEE
  2139                           wreg	equ	0xFE8
  2140                           postinc1	equ	0xFE6
  2141                           plusw1	equ	0xFE3
  2142                           fsr1h	equ	0xFE2
  2143                           fsr1l	equ	0xFE1
  2144                           indf2	equ	0xFDF
  2145                           postinc2	equ	0xFDE
  2146                           postdec2	equ	0xFDD
  2147                           fsr2h	equ	0xFDA
  2148                           fsr2l	equ	0xFD9
  2149                           status	equ	0xFD8
  2150                           
  2151 ;; *************** function _LCDWriteString *****************
  2152 ;; Defined at:
  2153 ;;		line 204 in file "lcd.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;  msg             2  [STACK] PTR const unsigned char 
  2156 ;;		 -> STR_4(10), STR_3(4), STR_2(3), STR_1(8), 
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;                  1  [STACK] void 
  2161 ;; Registers used:
  2162 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+11, tblptrl, tblptrh, tblptru
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2168 ;;      Params:         0       0       0       0       0       0       0
  2169 ;;      Locals:         0       0       0       0       0       0       0
  2170 ;;      Temps:          0       0       0       0       0       0       0
  2171 ;;      Totals:         0       0       0       0       0       0       0
  2172 ;;Total ram usage:        0 bytes
  2173 ;; Hardware stack levels used:    1
  2174 ;; Hardware stack levels required when called:   11
  2175 ;; This function calls:
  2176 ;;		_LCDByte
  2177 ;; This function is called by:
  2178 ;;		_main
  2179 ;;		_cloro
  2180 ;;		_ph
  2181 ;;		_limpeza
  2182 ;; This function uses a reentrant model
  2183 ;;
  2184                           
  2185                           	psect	text11
  2186  002EF0                     __ptext11:
  2187                           	opt stack 0
  2188  002EF0                     _LCDWriteString:
  2189                           	opt stack 15
  2190                           
  2191                           ;lcd.c: 216: while(*msg!='\0')
  2192                           
  2193                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  2194                           ;incstack = 0
  2195  002EF0  D021               	goto	l3807
  2196  002EF2                     l3803:
  2197                           
  2198                           ;lcd.c: 217: {
  2199                           ;lcd.c: 218: (LCDByte(*msg,1));
  2200  002EF2  0E01               	movlw	1
  2201  002EF4  6EE6               	movwf	postinc1,c
  2202                           
  2203                           ;stkvar	LCDWriteString@msg @ sp[(-1)+-2]
  2204  002EF6  50E1               	movf	fsr1l,w,c
  2205  002EF8  0FFD               	addlw	-3
  2206  002EFA  6ED9               	movwf	fsr2l,c
  2207  002EFC  50E2               	movf	fsr1h,w,c
  2208  002EFE  6EDA               	movwf	fsr2h,c
  2209  002F00  0EFF               	movlw	255
  2210  002F02  22DA               	addwfc	fsr2h,f,c
  2211  002F04  CFDE FFF6          	movff	postinc2,tblptrl
  2212  002F08  CFDD FFF7          	movff	postdec2,tblptrh
  2213  002F0C                     	if	0	;tblptru may be non-zero
  2214  002F0C                     	endif
  2215  002F0C                     	if	0	;tblptru may be non-zero
  2216  002F0C                     	endif
  2217  002F0C  0008               	tblrd		*
  2218  002F0E  50F5               	movf	tablat,w,c
  2219  002F10  6EE6               	movwf	postinc1,c
  2220  002F12  ECDD  F014         	call	_LCDByte	;wreg free
  2221                           
  2222                           ;lcd.c: 219: msg++;
  2223                           ;stkvar	LCDWriteString@msg @ sp[(0)+-2]
  2224  002F16  0EFE               	movlw	-2
  2225  002F18  50E3               	movf	plusw1,w,c
  2226  002F1A  0F01               	addlw	1
  2227  002F1C  6E4F               	movwf	btemp,c
  2228  002F1E  0EFE               	movlw	-2
  2229  002F20  C04F  FFE3         	movff	btemp,plusw1
  2230  002F24  6A4F               	clrf	btemp,c
  2231  002F26  0EFF               	movlw	-1
  2232  002F28  50E3               	movf	plusw1,w,c
  2233  002F2A  204F               	addwfc	btemp,w,c
  2234  002F2C  6E4F               	movwf	btemp,c
  2235  002F2E  0EFF               	movlw	-1
  2236  002F30  C04F  FFE3         	movff	btemp,plusw1
  2237  002F34                     l3807:
  2238                           
  2239                           ;stkvar	LCDWriteString@msg @ sp[(0)+-2]
  2240  002F34  50E1               	movf	fsr1l,w,c
  2241  002F36  0FFE               	addlw	-2
  2242  002F38  6ED9               	movwf	fsr2l,c
  2243  002F3A  50E2               	movf	fsr1h,w,c
  2244  002F3C  6EDA               	movwf	fsr2h,c
  2245  002F3E  0EFF               	movlw	255
  2246  002F40  22DA               	addwfc	fsr2h,f,c
  2247  002F42  CFDE FFF6          	movff	postinc2,tblptrl
  2248  002F46  CFDD FFF7          	movff	postdec2,tblptrh
  2249  002F4A                     	if	0	;tblptru may be non-zero
  2250  002F4A                     	endif
  2251  002F4A                     	if	0	;tblptru may be non-zero
  2252  002F4A                     	endif
  2253  002F4A  0008               	tblrd		*
  2254  002F4C  50F5               	movf	tablat,w,c
  2255  002F4E  0900               	iorlw	0
  2256  002F50  A4D8               	btfss	status,2,c
  2257  002F52  D7CF               	goto	l3803
  2258                           
  2259                           ; _LCDWriteString: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2
      +                          , argsize = 2, vargsize = 0
  2260  002F54  52E5               	movf	postdec1,f,c
  2261  002F56  52E5               	movf	postdec1,f,c
  2262  002F58  0012               	return		;funcret
  2263  002F5A                     __end_of_LCDWriteString:
  2264                           	opt stack 0
  2265                           tblptru	equ	0xFF8
  2266                           tblptrh	equ	0xFF7
  2267                           tblptrl	equ	0xFF6
  2268                           tablat	equ	0xFF5
  2269                           prodh	equ	0xFF4
  2270                           prodl	equ	0xFF3
  2271                           intcon	equ	0xFF2
  2272                           postinc0	equ	0xFEE
  2273                           wreg	equ	0xFE8
  2274                           postinc1	equ	0xFE6
  2275                           postdec1	equ	0xFE5
  2276                           plusw1	equ	0xFE3
  2277                           fsr1h	equ	0xFE2
  2278                           fsr1l	equ	0xFE1
  2279                           indf2	equ	0xFDF
  2280                           postinc2	equ	0xFDE
  2281                           postdec2	equ	0xFDD
  2282                           fsr2h	equ	0xFDA
  2283                           fsr2l	equ	0xFD9
  2284                           status	equ	0xFD8
  2285                           
  2286 ;; *************** function _LCDInit *****************
  2287 ;; Defined at:
  2288 ;;		line 159 in file "lcd.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;  style           1    wreg     unsigned char 
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;  style           1   18[BANK1 ] unsigned char 
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      void 
  2295 ;; Registers used:
  2296 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+11, cstack
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2302 ;;      Params:         0       0       0       0       0       0       0
  2303 ;;      Locals:         0       0       1       0       0       0       0
  2304 ;;      Temps:          0       0       1       0       0       0       0
  2305 ;;      Totals:         0       0       2       0       0       0       0
  2306 ;;Total ram usage:        2 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; Hardware stack levels required when called:   11
  2309 ;; This function calls:
  2310 ;;		_LCDBusyLoop
  2311 ;;		_LCDByte
  2312 ;; This function is called by:
  2313 ;;		_main
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           	psect	text12
  2318  002FBE                     __ptext12:
  2319                           	opt stack 0
  2320  002FBE                     _LCDInit:
  2321                           	opt stack 19
  2322                           
  2323                           ;incstack = 0
  2324                           ;LCDInit@style stored from wreg
  2325  002FBE  0101               	movlb	1	; () banked
  2326  002FC0  6F12               	movwf	LCDInit@style& (0+255),b
  2327                           
  2328                           ;lcd.c: 174: _delay((unsigned long)((30)*(20000000UL/4000.0)));
  2329  002FC2  0EC3               	movlw	195
  2330  002FC4  0101               	movlb	1	; () banked
  2331  002FC6  6F11               	movwf	??_LCDInit& (0+255),b
  2332  002FC8  0ECD               	movlw	205
  2333  002FCA                     u3297:
  2334  002FCA  2EE8               	decfsz	wreg,f,c
  2335  002FCC  D7FE               	bra	u3297
  2336  002FCE  2F11               	decfsz	??_LCDInit& (0+255),f,b
  2337  002FD0  D7FC               	bra	u3297
  2338                           
  2339                           ;lcd.c: 177: TRISD&=(0xF0);
  2340  002FD2  0EF0               	movlw	240
  2341  002FD4  1695               	andwf	3989,f,c	;volatile
  2342                           
  2343                           ;lcd.c: 178: TRISD&=(~(1<<4));
  2344  002FD6  9895               	bcf	3989,4,c	;volatile
  2345                           
  2346                           ;lcd.c: 179: TRISB&=(~(1<<1));
  2347  002FD8  9293               	bcf	3987,1,c	;volatile
  2348                           
  2349                           ;lcd.c: 180: TRISB&=(~(1<<2));
  2350  002FDA  9493               	bcf	3987,2,c	;volatile
  2351                           
  2352                           ;lcd.c: 182: LATD&=0XF0;
  2353  002FDC  0EF0               	movlw	240
  2354  002FDE  168C               	andwf	3980,f,c	;volatile
  2355                           
  2356                           ;lcd.c: 183: (LATD&=(~(1<<4)));
  2357  002FE0  988C               	bcf	3980,4,c	;volatile
  2358                           
  2359                           ;lcd.c: 184: (LATB&=(~(1<<2)));
  2360  002FE2  948A               	bcf	3978,2,c	;volatile
  2361                           
  2362                           ;lcd.c: 185: (LATB&=(~(1<<1)));
  2363  002FE4  928A               	bcf	3978,1,c	;volatile
  2364                           
  2365                           ;lcd.c: 188: _delay((unsigned long)((0.3)*(20000000UL/4000000.0)));
  2366  002FE6  F000               	nop	
  2367                           
  2368                           ;lcd.c: 190: (LATD|=(1<<4));
  2369  002FE8  888C               	bsf	3980,4,c	;volatile
  2370                           
  2371                           ;lcd.c: 191: LATD|=(0b00000010);
  2372  002FEA  828C               	bsf	3980,1,c	;volatile
  2373                           
  2374                           ;lcd.c: 192: _delay((unsigned long)((1)*(20000000UL/4000000.0)));
  2375  002FEC  D000               	nop2		;2 cycle nop
  2376  002FEE  D000               	nop2		;2 cycle nop
  2377  002FF0  F000               	nop	
  2378                           
  2379                           ;lcd.c: 193: (LATD&=(~(1<<4)));
  2380  002FF2  988C               	bcf	3980,4,c	;volatile
  2381                           
  2382                           ;lcd.c: 194: _delay((unsigned long)((1)*(20000000UL/4000000.0)));
  2383  002FF4  D000               	nop2		;2 cycle nop
  2384  002FF6  D000               	nop2		;2 cycle nop
  2385  002FF8  F000               	nop	
  2386                           
  2387                           ;lcd.c: 197: LCDBusyLoop();
  2388  002FFA  EC2A  F015         	call	_LCDBusyLoop	;wreg free
  2389                           
  2390                           ;lcd.c: 201: (LCDByte(0b00001100|style,0));
  2391  002FFE  0E00               	movlw	0
  2392  003000  6EE6               	movwf	postinc1,c
  2393  003002  0101               	movlb	1	; () banked
  2394  003004  5112               	movf	LCDInit@style& (0+255),w,b
  2395  003006  090C               	iorlw	12
  2396  003008  6EE6               	movwf	postinc1,c
  2397  00300A  ECDD  F014         	call	_LCDByte	;wreg free
  2398                           
  2399                           ;lcd.c: 202: (LCDByte(0b00101000,0));
  2400  00300E  0E00               	movlw	0
  2401  003010  6EE6               	movwf	postinc1,c
  2402  003012  0E28               	movlw	40
  2403  003014  6EE6               	movwf	postinc1,c
  2404  003016  ECDD  F014         	call	_LCDByte	;wreg free
  2405  00301A  0012               	return		;funcret
  2406  00301C                     __end_of_LCDInit:
  2407                           	opt stack 0
  2408                           tblptru	equ	0xFF8
  2409                           tblptrh	equ	0xFF7
  2410                           tblptrl	equ	0xFF6
  2411                           tablat	equ	0xFF5
  2412                           prodh	equ	0xFF4
  2413                           prodl	equ	0xFF3
  2414                           intcon	equ	0xFF2
  2415                           postinc0	equ	0xFEE
  2416                           wreg	equ	0xFE8
  2417                           postinc1	equ	0xFE6
  2418                           postdec1	equ	0xFE5
  2419                           plusw1	equ	0xFE3
  2420                           fsr1h	equ	0xFE2
  2421                           fsr1l	equ	0xFE1
  2422                           indf2	equ	0xFDF
  2423                           postinc2	equ	0xFDE
  2424                           postdec2	equ	0xFDD
  2425                           fsr2h	equ	0xFDA
  2426                           fsr2l	equ	0xFD9
  2427                           status	equ	0xFD8
  2428                           
  2429 ;; *************** function _LCDGotoXY *****************
  2430 ;; Defined at:
  2431 ;;		line 255 in file "lcd.c"
  2432 ;; Parameters:    Size  Location     Type
  2433 ;;  x               1  [STACK] unsigned char 
  2434 ;;  y               1  [STACK] unsigned char 
  2435 ;; Auto vars:     Size  Location     Type
  2436 ;;		None
  2437 ;; Return value:  Size  Location     Type
  2438 ;;                  1  [STACK] void 
  2439 ;; Registers used:
  2440 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+11
  2441 ;; Tracked objects:
  2442 ;;		On entry : 0/0
  2443 ;;		On exit  : 0/0
  2444 ;;		Unchanged: 0/0
  2445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2446 ;;      Params:         0       0       0       0       0       0       0
  2447 ;;      Locals:         0       0       0       0       0       0       0
  2448 ;;      Temps:          0       0       0       0       0       0       0
  2449 ;;      Totals:         0       0       0       0       0       0       0
  2450 ;;Total ram usage:        0 bytes
  2451 ;; Hardware stack levels used:    1
  2452 ;; Hardware stack levels required when called:   11
  2453 ;; This function calls:
  2454 ;;		_LCDByte
  2455 ;; This function is called by:
  2456 ;;		_main
  2457 ;;		_cloro
  2458 ;;		_ph
  2459 ;;		_limpeza
  2460 ;; This function uses a reentrant model
  2461 ;;
  2462                           
  2463                           	psect	text13
  2464  0031EE                     __ptext13:
  2465                           	opt stack 0
  2466  0031EE                     _LCDGotoXY:
  2467                           	opt stack 15
  2468                           
  2469                           ;lcd.c: 257: if(x<40)
  2470                           ;stkvar	LCDGotoXY@x @ sp[(0)+-1]
  2471                           
  2472                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  2473                           ;incstack = 0
  2474  0031EE  0EFF               	movlw	-1
  2475  0031F0  CFE3 F04F          	movff	plusw1,btemp
  2476  0031F4  0E28               	movlw	40
  2477  0031F6  604F               	cpfslt	btemp,c
  2478  0031F8  D00F               	goto	l497
  2479                           
  2480                           ;lcd.c: 258: {
  2481                           ;lcd.c: 259: if(y) x|=0b01000000;
  2482                           ;stkvar	LCDGotoXY@y @ sp[(0)+-2]
  2483  0031FA  0EFE               	movlw	-2
  2484  0031FC  50E3               	movf	plusw1,w,c
  2485  0031FE  B4D8               	btfsc	status,2,c
  2486  003200  D002               	goto	l496
  2487                           
  2488                           ;stkvar	LCDGotoXY@x @ sp[(0)+-1]
  2489  003202  0EFF               	movlw	-1
  2490  003204  8CE3               	bsf	plusw1,6,c
  2491  003206                     l496:
  2492                           
  2493                           ;lcd.c: 260: x|=0b10000000;
  2494                           ;stkvar	LCDGotoXY@x @ sp[(0)+-1]
  2495  003206  0EFF               	movlw	-1
  2496  003208  8EE3               	bsf	plusw1,7,c
  2497                           
  2498                           ;lcd.c: 261: (LCDByte(x,0));
  2499  00320A  0E00               	movlw	0
  2500  00320C  6EE6               	movwf	postinc1,c
  2501                           
  2502                           ;stkvar	LCDGotoXY@x @ sp[(-1)+-1]
  2503  00320E  0EFE               	movlw	-2
  2504  003210  50E3               	movf	plusw1,w,c
  2505  003212  6EE6               	movwf	postinc1,c
  2506  003214  ECDD  F014         	call	_LCDByte	;wreg free
  2507  003218                     l497:
  2508                           
  2509                           ; _LCDGotoXY: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, arg
      +                          size = 2, vargsize = 0
  2510  003218  52E5               	movf	postdec1,f,c
  2511  00321A  52E5               	movf	postdec1,f,c
  2512  00321C  0012               	return		;funcret
  2513  00321E                     __end_of_LCDGotoXY:
  2514                           	opt stack 0
  2515                           tblptru	equ	0xFF8
  2516                           tblptrh	equ	0xFF7
  2517                           tblptrl	equ	0xFF6
  2518                           tablat	equ	0xFF5
  2519                           prodh	equ	0xFF4
  2520                           prodl	equ	0xFF3
  2521                           intcon	equ	0xFF2
  2522                           postinc0	equ	0xFEE
  2523                           wreg	equ	0xFE8
  2524                           postinc1	equ	0xFE6
  2525                           postdec1	equ	0xFE5
  2526                           plusw1	equ	0xFE3
  2527                           fsr1h	equ	0xFE2
  2528                           fsr1l	equ	0xFE1
  2529                           indf2	equ	0xFDF
  2530                           postinc2	equ	0xFDE
  2531                           postdec2	equ	0xFDD
  2532                           fsr2h	equ	0xFDA
  2533                           fsr2l	equ	0xFD9
  2534                           status	equ	0xFD8
  2535                           
  2536 ;; *************** function _LCDByte *****************
  2537 ;; Defined at:
  2538 ;;		line 48 in file "lcd.c"
  2539 ;; Parameters:    Size  Location     Type
  2540 ;;  c               1  [STACK] unsigned char 
  2541 ;;  isdata          1  [STACK] unsigned char 
  2542 ;; Auto vars:     Size  Location     Type
  2543 ;;  temp            1  [STACK] unsigned char 
  2544 ;;  ln              1  [STACK] unsigned char 
  2545 ;;  hn              1  [STACK] unsigned char 
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  1  [STACK] void 
  2548 ;; Registers used:
  2549 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+11
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2555 ;;      Params:         0       0       0       0       0       0       0
  2556 ;;      Locals:         0       0       0       0       0       0       0
  2557 ;;      Temps:          0       0       0       0       0       0       0
  2558 ;;      Totals:         0       0       0       0       0       0       0
  2559 ;;Total ram usage:        0 bytes
  2560 ;; Hardware stack levels used:    1
  2561 ;; Hardware stack levels required when called:   10
  2562 ;; This function calls:
  2563 ;;		_LCDBusyLoop
  2564 ;; This function is called by:
  2565 ;;		_LCDInit
  2566 ;;		_LCDWriteString
  2567 ;;		_LCDWriteInt
  2568 ;;		_LCDGotoXY
  2569 ;; This function uses a reentrant model
  2570 ;;
  2571                           
  2572                           	psect	text14
  2573  0029BA                     __ptext14:
  2574                           	opt stack 0
  2575  0029BA                     _LCDByte:
  2576                           	opt stack 0
  2577                           
  2578                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  2579  0029BA  52E6               	movf	postinc1,f,c
  2580  0029BC  52E6               	movf	postinc1,f,c
  2581  0029BE  52E6               	movf	postinc1,f,c
  2582                           
  2583                           ;lcd.c: 57: uint8_t hn,ln;
  2584                           ;lcd.c: 58: uint8_t temp;
  2585                           ;lcd.c: 60: hn=c>>4;
  2586                           ;stkvar	LCDByte@c @ sp[(-3)+-1]
  2587                           
  2588                           ;incstack = 0
  2589  0029C0  0EFC               	movlw	-4
  2590  0029C2  CFE3 F05A          	movff	plusw1,btemp+11
  2591  0029C6  3A5A               	swapf	btemp+11,f,c
  2592  0029C8  0E0F               	movlw	15
  2593  0029CA  165A               	andwf	btemp+11,f,c
  2594                           
  2595                           ;stkvar	LCDByte@hn @ sp[(-3)+2]
  2596  0029CC  0EFF               	movlw	-1
  2597  0029CE  C05A  FFE3         	movff	btemp+11,plusw1
  2598                           
  2599                           ;lcd.c: 61: ln=(c & 0x0F);
  2600                           ;stkvar	LCDByte@c @ sp[(-3)+-1]
  2601  0029D2  0EFC               	movlw	-4
  2602  0029D4  CFE3 F05A          	movff	plusw1,btemp+11
  2603  0029D8  0E0F               	movlw	15
  2604  0029DA  165A               	andwf	btemp+11,f,c
  2605                           
  2606                           ;stkvar	LCDByte@ln @ sp[(-3)+1]
  2607  0029DC  0EFE               	movlw	-2
  2608  0029DE  C05A  FFE3         	movff	btemp+11,plusw1
  2609                           
  2610                           ;lcd.c: 63: if(isdata==0)
  2611                           ;stkvar	LCDByte@isdata @ sp[(-3)+-2]
  2612  0029E2  0EFB               	movlw	-5
  2613  0029E4  50E3               	movf	plusw1,w,c
  2614  0029E6  A4D8               	btfss	status,2,c
  2615  0029E8  D002               	goto	l3633
  2616                           
  2617                           ;lcd.c: 64: (LATB&=(~(1<<1)));
  2618  0029EA  928A               	bcf	3978,1,c	;volatile
  2619  0029EC  D001               	goto	l3635
  2620  0029EE                     l3633:
  2621                           
  2622                           ;lcd.c: 65: else
  2623                           ;lcd.c: 66: (LATB|=(1<<1));
  2624  0029EE  828A               	bsf	3978,1,c	;volatile
  2625  0029F0                     l3635:
  2626                           
  2627                           ;lcd.c: 68: _delay((unsigned long)((0.500)*(20000000UL/4000000.0)));
  2628  0029F0  D000               	nop2		;2 cycle nop
  2629                           
  2630                           ;lcd.c: 70: (LATD|=(1<<4));
  2631  0029F2  888C               	bsf	3980,4,c	;volatile
  2632                           
  2633                           ;lcd.c: 74: temp=(LATD & 0XF0)|(hn);
  2634                           ;stkvar	LCDByte@hn @ sp[(-3)+2]
  2635  0029F4  0EFF               	movlw	-1
  2636  0029F6  CFE3 F05A          	movff	plusw1,btemp+11
  2637  0029FA  508C               	movf	3980,w,c	;volatile
  2638  0029FC  0BF0               	andlw	240
  2639  0029FE  105A               	iorwf	btemp+11,w,c
  2640  002A00  6E5A               	movwf	btemp+11,c
  2641                           
  2642                           ;stkvar	LCDByte@temp @ sp[(-3)+0]
  2643  002A02  0EFD               	movlw	-3
  2644  002A04  C05A  FFE3         	movff	btemp+11,plusw1
  2645                           
  2646                           ;lcd.c: 75: LATD=temp;
  2647                           ;stkvar	LCDByte@temp @ sp[(-3)+0]
  2648  002A08  0EFD               	movlw	-3
  2649  002A0A  CFE3 FF8C          	movff	plusw1,3980	;volatile
  2650                           
  2651                           ;lcd.c: 77: _delay((unsigned long)((1)*(20000000UL/4000000.0)));
  2652  002A0E  D000               	nop2		;2 cycle nop
  2653  002A10  D000               	nop2		;2 cycle nop
  2654  002A12  F000               	nop	
  2655                           
  2656                           ;lcd.c: 81: (LATD&=(~(1<<4)));
  2657  002A14  988C               	bcf	3980,4,c	;volatile
  2658                           
  2659                           ;lcd.c: 83: _delay((unsigned long)((1)*(20000000UL/4000000.0)));
  2660  002A16  D000               	nop2		;2 cycle nop
  2661  002A18  D000               	nop2		;2 cycle nop
  2662  002A1A  F000               	nop	
  2663                           
  2664                           ;lcd.c: 86: (LATD|=(1<<4));
  2665  002A1C  888C               	bsf	3980,4,c	;volatile
  2666                           
  2667                           ;lcd.c: 88: temp=(LATD & 0XF0)|(ln);
  2668                           ;stkvar	LCDByte@ln @ sp[(-3)+1]
  2669  002A1E  0EFE               	movlw	-2
  2670  002A20  CFE3 F05A          	movff	plusw1,btemp+11
  2671  002A24  508C               	movf	3980,w,c	;volatile
  2672  002A26  0BF0               	andlw	240
  2673  002A28  105A               	iorwf	btemp+11,w,c
  2674  002A2A  6E5A               	movwf	btemp+11,c
  2675                           
  2676                           ;stkvar	LCDByte@temp @ sp[(-3)+0]
  2677  002A2C  0EFD               	movlw	-3
  2678  002A2E  C05A  FFE3         	movff	btemp+11,plusw1
  2679                           
  2680                           ;lcd.c: 90: LATD=temp;
  2681                           ;stkvar	LCDByte@temp @ sp[(-3)+0]
  2682  002A32  0EFD               	movlw	-3
  2683  002A34  CFE3 FF8C          	movff	plusw1,3980	;volatile
  2684                           
  2685                           ;lcd.c: 92: _delay((unsigned long)((1)*(20000000UL/4000000.0)));
  2686  002A38  D000               	nop2		;2 cycle nop
  2687  002A3A  D000               	nop2		;2 cycle nop
  2688  002A3C  F000               	nop	
  2689                           
  2690                           ;lcd.c: 96: (LATD&=(~(1<<4)));
  2691  002A3E  988C               	bcf	3980,4,c	;volatile
  2692                           
  2693                           ;lcd.c: 98: _delay((unsigned long)((1)*(20000000UL/4000000.0)));
  2694  002A40  D000               	nop2		;2 cycle nop
  2695  002A42  D000               	nop2		;2 cycle nop
  2696  002A44  F000               	nop	
  2697                           
  2698                           ;lcd.c: 100: LCDBusyLoop();
  2699  002A46  EC2A  F015         	call	_LCDBusyLoop	;wreg free
  2700                           
  2701                           ; _LCDByte: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsi
      +                          ze = 2, vargsize = 0
  2702  002A4A  0EFB               	movlw	251
  2703  002A4C  26E1               	addwf	fsr1l,f,c
  2704  002A4E  0EFF               	movlw	255
  2705  002A50  22E2               	addwfc	fsr1h,f,c
  2706  002A52  0012               	return		;funcret
  2707  002A54                     __end_of_LCDByte:
  2708                           	opt stack 0
  2709                           tblptru	equ	0xFF8
  2710                           tblptrh	equ	0xFF7
  2711                           tblptrl	equ	0xFF6
  2712                           tablat	equ	0xFF5
  2713                           prodh	equ	0xFF4
  2714                           prodl	equ	0xFF3
  2715                           intcon	equ	0xFF2
  2716                           postinc0	equ	0xFEE
  2717                           wreg	equ	0xFE8
  2718                           postinc1	equ	0xFE6
  2719                           postdec1	equ	0xFE5
  2720                           plusw1	equ	0xFE3
  2721                           fsr1h	equ	0xFE2
  2722                           fsr1l	equ	0xFE1
  2723                           indf2	equ	0xFDF
  2724                           postinc2	equ	0xFDE
  2725                           postdec2	equ	0xFDD
  2726                           fsr2h	equ	0xFDA
  2727                           fsr2l	equ	0xFD9
  2728                           status	equ	0xFD8
  2729                           
  2730 ;; *************** function _LCDBusyLoop *****************
  2731 ;; Defined at:
  2732 ;;		line 103 in file "lcd.c"
  2733 ;; Parameters:    Size  Location     Type
  2734 ;;		None
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;  status          1  [STACK] unsigned char 
  2737 ;;  temp            1  [STACK] unsigned char 
  2738 ;;  busy            1  [STACK] unsigned char 
  2739 ;; Return value:  Size  Location     Type
  2740 ;;                  1  [STACK] void 
  2741 ;; Registers used:
  2742 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+11
  2743 ;; Tracked objects:
  2744 ;;		On entry : 0/1
  2745 ;;		On exit  : 0/0
  2746 ;;		Unchanged: 0/0
  2747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2748 ;;      Params:         0       0       0       0       0       0       0
  2749 ;;      Locals:         0       0       0       0       0       0       0
  2750 ;;      Temps:          0       0       0       0       0       0       0
  2751 ;;      Totals:         0       0       0       0       0       0       0
  2752 ;;Total ram usage:        0 bytes
  2753 ;; Hardware stack levels used:    1
  2754 ;; Hardware stack levels required when called:    9
  2755 ;; This function calls:
  2756 ;;		Nothing
  2757 ;; This function is called by:
  2758 ;;		_LCDByte
  2759 ;;		_LCDInit
  2760 ;; This function uses a reentrant model
  2761 ;;
  2762                           
  2763                           	psect	text15
  2764  002A54                     __ptext15:
  2765                           	opt stack 0
  2766  002A54                     _LCDBusyLoop:
  2767                           	opt stack 0
  2768                           
  2769                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  2770  002A54  52E6               	movf	postinc1,f,c
  2771  002A56  52E6               	movf	postinc1,f,c
  2772  002A58  52E6               	movf	postinc1,f,c
  2773                           
  2774                           ;lcd.c: 110: TRISD|=0x0F;
  2775                           
  2776                           ;incstack = 0
  2777  002A5A  0E0F               	movlw	15
  2778  002A5C  1295               	iorwf	3989,f,c	;volatile
  2779                           
  2780                           ;lcd.c: 113: (LATB|=(1<<2));
  2781  002A5E  848A               	bsf	3978,2,c	;volatile
  2782                           
  2783                           ;lcd.c: 114: (LATB&=(~(1<<1)));
  2784  002A60  928A               	bcf	3978,1,c	;volatile
  2785                           
  2786                           ;lcd.c: 118: _delay((unsigned long)((0.5)*(20000000UL/4000000.0)));
  2787  002A62  D000               	nop2		;2 cycle nop
  2788  002A64                     l3447:
  2789                           
  2790                           ;lcd.c: 122: {
  2791                           ;lcd.c: 124: (LATD|=(1<<4));
  2792  002A64  888C               	bsf	3980,4,c	;volatile
  2793                           
  2794                           ;lcd.c: 127: _delay((unsigned long)((0.5)*(20000000UL/4000000.0)));
  2795  002A66  D000               	nop2		;2 cycle nop
  2796                           
  2797                           ;lcd.c: 129: status=PORTD;
  2798                           ;stkvar	LCDBusyLoop@status @ sp[(-3)+0]
  2799  002A68  0EFD               	movlw	-3
  2800  002A6A  CF83 FFE3          	movff	3971,plusw1	;volatile
  2801                           
  2802                           ;lcd.c: 130: status=status<<4;
  2803                           ;stkvar	LCDBusyLoop@status @ sp[(-3)+0]
  2804  002A6E  50E1               	movf	fsr1l,w,c
  2805  002A70  0FFD               	addlw	-3
  2806  002A72  6ED9               	movwf	fsr2l,c
  2807  002A74  50E2               	movf	fsr1h,w,c
  2808  002A76  6EDA               	movwf	fsr2h,c
  2809  002A78  0EFF               	movlw	255
  2810  002A7A  22DA               	addwfc	fsr2h,f,c
  2811  002A7C  3ADF               	swapf	indf2,f,c
  2812  002A7E  0EF0               	movlw	240
  2813  002A80  16DF               	andwf	indf2,f,c
  2814                           
  2815                           ;lcd.c: 132: _delay((unsigned long)((0.5)*(20000000UL/4000000.0)));
  2816  002A82  D000               	nop2		;2 cycle nop
  2817                           
  2818                           ;lcd.c: 135: (LATD&=(~(1<<4)));
  2819  002A84  988C               	bcf	3980,4,c	;volatile
  2820                           
  2821                           ;lcd.c: 136: _delay((unsigned long)((1)*(20000000UL/4000000.0)));
  2822  002A86  D000               	nop2		;2 cycle nop
  2823  002A88  D000               	nop2		;2 cycle nop
  2824  002A8A  F000               	nop	
  2825                           
  2826                           ;lcd.c: 138: (LATD|=(1<<4));
  2827  002A8C  888C               	bsf	3980,4,c	;volatile
  2828                           
  2829                           ;lcd.c: 139: _delay((unsigned long)((0.5)*(20000000UL/4000000.0)));
  2830  002A8E  D000               	nop2		;2 cycle nop
  2831                           
  2832                           ;lcd.c: 141: temp=PORTD;
  2833                           ;stkvar	LCDBusyLoop@temp @ sp[(-3)+1]
  2834  002A90  0EFE               	movlw	-2
  2835  002A92  CF83 FFE3          	movff	3971,plusw1	;volatile
  2836                           
  2837                           ;lcd.c: 142: temp&=0x0F;
  2838                           ;stkvar	LCDBusyLoop@temp @ sp[(-3)+1]
  2839  002A96  0EFE               	movlw	-2
  2840  002A98  CFE3 F04F          	movff	plusw1,btemp
  2841  002A9C  0E0F               	movlw	15
  2842  002A9E  164F               	andwf	btemp,f,c
  2843  002AA0  0EFE               	movlw	-2
  2844  002AA2  C04F  FFE3         	movff	btemp,plusw1
  2845                           
  2846                           ;lcd.c: 144: status=status|temp;
  2847                           ;stkvar	LCDBusyLoop@temp @ sp[(-3)+1]
  2848  002AA6  0EFE               	movlw	-2
  2849  002AA8  CFE3 F05A          	movff	plusw1,btemp+11
  2850                           
  2851                           ;stkvar	LCDBusyLoop@status @ sp[(-3)+0]
  2852  002AAC  50E1               	movf	fsr1l,w,c
  2853  002AAE  0FFD               	addlw	-3
  2854  002AB0  6ED9               	movwf	fsr2l,c
  2855  002AB2  50E2               	movf	fsr1h,w,c
  2856  002AB4  6EDA               	movwf	fsr2h,c
  2857  002AB6  0EFF               	movlw	255
  2858  002AB8  22DA               	addwfc	fsr2h,f,c
  2859  002ABA  505A               	movf	btemp+11,w,c
  2860  002ABC  12DF               	iorwf	indf2,f,c
  2861                           
  2862                           ;lcd.c: 146: busy=status & 0b10000000;
  2863                           ;stkvar	LCDBusyLoop@status @ sp[(-3)+0]
  2864  002ABE  0EFD               	movlw	-3
  2865  002AC0  CFE3 F05A          	movff	plusw1,btemp+11
  2866  002AC4  0E80               	movlw	128
  2867  002AC6  165A               	andwf	btemp+11,f,c
  2868                           
  2869                           ;stkvar	LCDBusyLoop@busy @ sp[(-3)+2]
  2870  002AC8  0EFF               	movlw	-1
  2871  002ACA  C05A  FFE3         	movff	btemp+11,plusw1
  2872                           
  2873                           ;lcd.c: 148: _delay((unsigned long)((0.5)*(20000000UL/4000000.0)));
  2874  002ACE  D000               	nop2		;2 cycle nop
  2875                           
  2876                           ;lcd.c: 149: (LATD&=(~(1<<4)));
  2877  002AD0  988C               	bcf	3980,4,c	;volatile
  2878                           
  2879                           ;lcd.c: 150: _delay((unsigned long)((1)*(20000000UL/4000000.0)));
  2880  002AD2  D000               	nop2		;2 cycle nop
  2881  002AD4  D000               	nop2		;2 cycle nop
  2882  002AD6  F000               	nop	
  2883                           
  2884                           ;lcd.c: 151: }while(busy);
  2885                           ;stkvar	LCDBusyLoop@busy @ sp[(-3)+2]
  2886  002AD8  0EFF               	movlw	-1
  2887  002ADA  50E3               	movf	plusw1,w,c
  2888  002ADC  A4D8               	btfss	status,2,c
  2889  002ADE  D7C2               	goto	l3447
  2890                           
  2891                           ;lcd.c: 153: (LATB&=(~(1<<2)));
  2892  002AE0  948A               	bcf	3978,2,c	;volatile
  2893                           
  2894                           ;lcd.c: 155: TRISD&=0xF0;
  2895  002AE2  0EF0               	movlw	240
  2896  002AE4  1695               	andwf	3989,f,c	;volatile
  2897                           
  2898                           ; _LCDBusyLoop: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, a
      +                          rgsize = 0, vargsize = 0
  2899  002AE6  52E5               	movf	postdec1,f,c
  2900  002AE8  52E5               	movf	postdec1,f,c
  2901  002AEA  52E5               	movf	postdec1,f,c
  2902  002AEC  0012               	return		;funcret
  2903  002AEE                     __end_of_LCDBusyLoop:
  2904                           	opt stack 0
  2905                           tblptru	equ	0xFF8
  2906                           tblptrh	equ	0xFF7
  2907                           tblptrl	equ	0xFF6
  2908                           tablat	equ	0xFF5
  2909                           prodh	equ	0xFF4
  2910                           prodl	equ	0xFF3
  2911                           intcon	equ	0xFF2
  2912                           postinc0	equ	0xFEE
  2913                           wreg	equ	0xFE8
  2914                           postinc1	equ	0xFE6
  2915                           postdec1	equ	0xFE5
  2916                           plusw1	equ	0xFE3
  2917                           fsr1h	equ	0xFE2
  2918                           fsr1l	equ	0xFE1
  2919                           indf2	equ	0xFDF
  2920                           postinc2	equ	0xFDE
  2921                           postdec2	equ	0xFDD
  2922                           fsr2h	equ	0xFDA
  2923                           fsr2l	equ	0xFD9
  2924                           status	equ	0xFD8
  2925                           
  2926 ;; *************** function _ADCInit *****************
  2927 ;; Defined at:
  2928 ;;		line 44 in file "main.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;		None
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;		None
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  1    wreg      void 
  2935 ;; Registers used:
  2936 ;;		wreg, status,2
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2942 ;;      Params:         0       0       0       0       0       0       0
  2943 ;;      Locals:         0       0       0       0       0       0       0
  2944 ;;      Temps:          0       0       0       0       0       0       0
  2945 ;;      Totals:         0       0       0       0       0       0       0
  2946 ;;Total ram usage:        0 bytes
  2947 ;; Hardware stack levels used:    1
  2948 ;; Hardware stack levels required when called:    9
  2949 ;; This function calls:
  2950 ;;		Nothing
  2951 ;; This function is called by:
  2952 ;;		_main
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           	psect	text16
  2957  0032DC                     __ptext16:
  2958                           	opt stack 0
  2959  0032DC                     _ADCInit:
  2960                           	opt stack 21
  2961                           
  2962                           ;main.c: 45: ADCON2=0b10001010;
  2963                           
  2964                           ;incstack = 0
  2965  0032DC  0E8A               	movlw	138
  2966  0032DE  6EC0               	movwf	4032,c	;volatile
  2967  0032E0  0012               	return		;funcret
  2968  0032E2                     __end_of_ADCInit:
  2969                           	opt stack 0
  2970                           tblptru	equ	0xFF8
  2971                           tblptrh	equ	0xFF7
  2972                           tblptrl	equ	0xFF6
  2973                           tablat	equ	0xFF5
  2974                           prodh	equ	0xFF4
  2975                           prodl	equ	0xFF3
  2976                           intcon	equ	0xFF2
  2977                           postinc0	equ	0xFEE
  2978                           wreg	equ	0xFE8
  2979                           postinc1	equ	0xFE6
  2980                           postdec1	equ	0xFE5
  2981                           plusw1	equ	0xFE3
  2982                           fsr1h	equ	0xFE2
  2983                           fsr1l	equ	0xFE1
  2984                           indf2	equ	0xFDF
  2985                           postinc2	equ	0xFDE
  2986                           postdec2	equ	0xFDD
  2987                           fsr2h	equ	0xFDA
  2988                           fsr2l	equ	0xFD9
  2989                           status	equ	0xFD8
  2990                           
  2991 ;; *************** function _cloro *****************
  2992 ;; Defined at:
  2993 ;;		line 4 in file "tasks.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;		None
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;		None
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  2  119[None  ] PTR void 
  3000 ;; Registers used:
  3001 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3007 ;;      Params:         0       0       0       0       0       0       0
  3008 ;;      Locals:         0       0       0       0       0       0       0
  3009 ;;      Temps:          0       0       0       0       0       0       0
  3010 ;;      Totals:         0       0       0       0       0       0       0
  3011 ;;Total ram usage:        0 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    8
  3014 ;; This function calls:
  3015 ;;		_ADCRead
  3016 ;;		_LCDGotoXY
  3017 ;;		_LCDWriteInt
  3018 ;;		_LCDWriteString
  3019 ;;		___ftmul
  3020 ;;		___fttol
  3021 ;;		___lwtoft
  3022 ;;		_round
  3023 ;;		_sem_post
  3024 ;;		_sem_wait
  3025 ;; This function is called by:
  3026 ;;		_main
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           	psect	text17
  3031  00265A                     __ptext17:
  3032                           	opt stack 0
  3033  00265A                     _cloro:
  3034                           	opt stack 19
  3035                           
  3036                           ;tasks.c: 6: sem_wait(&s_1);
  3037                           
  3038                           ;incstack = 0
  3039                           ;tasks.c: 5: while(1) {
  3040  00265A  0EBE               	movlw	low _s_1
  3041  00265C  6EE6               	movwf	postinc1,c
  3042  00265E  0E00               	movlw	high _s_1
  3043  002660  6EE6               	movwf	postinc1,c
  3044  002662  ECC4  F015         	call	_sem_wait	;wreg free
  3045                           
  3046                           ;tasks.c: 7: val=ADCRead(0);
  3047  002666  0E00               	movlw	0
  3048  002668  6EE6               	movwf	postinc1,c
  3049  00266A  EC81  F018         	call	_ADCRead	;wreg free
  3050  00266E  C04F  F00E         	movff	btemp,_val
  3051  002672  C050  F00F         	movff	btemp+1,_val+1
  3052                           
  3053                           ;tasks.c: 9: medcloro=round(val*0.020);
  3054  002676  0ED7               	movlw	215
  3055  002678  6EE6               	movwf	postinc1,c
  3056  00267A  0EA3               	movlw	163
  3057  00267C  6EE6               	movwf	postinc1,c
  3058  00267E  0E3C               	movlw	60
  3059  002680  6EE6               	movwf	postinc1,c
  3060  002682  C00E  FFE6         	movff	_val,postinc1
  3061  002686  C00F  FFE6         	movff	_val+1,postinc1
  3062  00268A  ECDD  F018         	call	___lwtoft	;wreg free
  3063  00268E  C04F  FFE6         	movff	btemp,postinc1
  3064  002692  C050  FFE6         	movff	btemp+1,postinc1
  3065  002696  C051  FFE6         	movff	btemp+2,postinc1
  3066  00269A  EC4A  F008         	call	___ftmul	;wreg free
  3067  00269E  C04F  FFE6         	movff	btemp,postinc1
  3068  0026A2  C050  FFE6         	movff	btemp+1,postinc1
  3069  0026A6  C051  FFE6         	movff	btemp+2,postinc1
  3070  0026AA  EC5B  F016         	call	_round	;wreg free
  3071  0026AE  C04F  FFE6         	movff	btemp,postinc1
  3072  0026B2  C050  FFE6         	movff	btemp+1,postinc1
  3073  0026B6  C051  FFE6         	movff	btemp+2,postinc1
  3074  0026BA  EC44  F00A         	call	___fttol	;wreg free
  3075  0026BE  C04F  F00C         	movff	btemp,_medcloro
  3076  0026C2  C050  F00D         	movff	btemp+1,_medcloro+1
  3077                           
  3078                           ;tasks.c: 10: { LCDGotoXY(0,1); LCDWriteString("C:");};
  3079  0026C6  0E01               	movlw	1
  3080  0026C8  6EE6               	movwf	postinc1,c
  3081  0026CA  0E00               	movlw	0
  3082  0026CC  6EE6               	movwf	postinc1,c
  3083  0026CE  ECF7  F018         	call	_LCDGotoXY	;wreg free
  3084  0026D2  0E17               	movlw	low STR_2
  3085  0026D4  6EE6               	movwf	postinc1,c
  3086  0026D6  0E06               	movlw	high STR_2
  3087  0026D8  6EE6               	movwf	postinc1,c
  3088  0026DA  EC78  F017         	call	_LCDWriteString	;wreg free
  3089                           
  3090                           ;tasks.c: 11: { LCDGotoXY(2,1); LCDWriteInt(medcloro,3);};
  3091  0026DE  0E01               	movlw	1
  3092  0026E0  6EE6               	movwf	postinc1,c
  3093  0026E2  0E02               	movlw	2
  3094  0026E4  6EE6               	movwf	postinc1,c
  3095  0026E6  ECF7  F018         	call	_LCDGotoXY	;wreg free
  3096  0026EA  0E03               	movlw	3
  3097  0026EC  6EE6               	movwf	postinc1,c
  3098  0026EE  0E00               	movlw	0
  3099  0026F0  6EE6               	movwf	postinc1,c
  3100  0026F2  C00C  FFE6         	movff	_medcloro,postinc1
  3101  0026F6  C00D  FFE6         	movff	_medcloro+1,postinc1
  3102  0026FA  EC57  F009         	call	_LCDWriteInt	;wreg free
  3103                           
  3104                           ;tasks.c: 12: sem_post(&s_2);
  3105  0026FE  0EA4               	movlw	low _s_2
  3106  002700  6EE6               	movwf	postinc1,c
  3107  002702  0E00               	movlw	high _s_2
  3108  002704  6EE6               	movwf	postinc1,c
  3109  002706  ECF0  F016         	call	_sem_post	;wreg free
  3110  00270A  D7A7               	goto	_cloro
  3111  00270C                     __end_of_cloro:
  3112                           	opt stack 0
  3113                           tblptru	equ	0xFF8
  3114                           tblptrh	equ	0xFF7
  3115                           tblptrl	equ	0xFF6
  3116                           tablat	equ	0xFF5
  3117                           prodh	equ	0xFF4
  3118                           prodl	equ	0xFF3
  3119                           intcon	equ	0xFF2
  3120                           postinc0	equ	0xFEE
  3121                           wreg	equ	0xFE8
  3122                           postinc1	equ	0xFE6
  3123                           postdec1	equ	0xFE5
  3124                           plusw1	equ	0xFE3
  3125                           fsr1h	equ	0xFE2
  3126                           fsr1l	equ	0xFE1
  3127                           indf2	equ	0xFDF
  3128                           postinc2	equ	0xFDE
  3129                           postdec2	equ	0xFDD
  3130                           fsr2h	equ	0xFDA
  3131                           fsr2l	equ	0xFD9
  3132                           status	equ	0xFD8
  3133                           
  3134 ;; *************** function _sem_wait *****************
  3135 ;; Defined at:
  3136 ;;		line 9 in file "semaphore.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;  handler         2  [STACK] PTR struct sem
  3139 ;;		 -> s_2(26), s_1(26), 
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;		None
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  1  [STACK] void 
  3144 ;; Registers used:
  3145 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3151 ;;      Params:         0       0       0       0       0       0       0
  3152 ;;      Locals:         0       0       0       0       0       0       0
  3153 ;;      Temps:          0       0       0       0       0       0       0
  3154 ;;      Totals:         0       0       0       0       0       0       0
  3155 ;;Total ram usage:        0 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    7
  3158 ;; This function calls:
  3159 ;;		___wmul
  3160 ;;		_nojoDispatcher
  3161 ;;		_queue_insert
  3162 ;; This function is called by:
  3163 ;;		_cloro
  3164 ;;		_ph
  3165 ;;		_limpeza
  3166 ;; This function uses a reentrant model
  3167 ;;
  3168                           
  3169                           	psect	text18
  3170  002B88                     __ptext18:
  3171                           	opt stack 0
  3172  002B88                     _sem_wait:
  3173                           	opt stack 19
  3174                           
  3175                           ;semaphore.c: 10: INTCONbits.GIE = 0;
  3176                           
  3177                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  3178                           ;incstack = 0
  3179  002B88  9EF2               	bcf	intcon,7,c	;volatile
  3180                           
  3181                           ;semaphore.c: 12: handler->sem_value--;
  3182                           ;stkvar	sem_wait@handler @ sp[(0)+-2]
  3183  002B8A  0EFE               	movlw	-2
  3184  002B8C  CFE3 FFD9          	movff	plusw1,fsr2l
  3185  002B90  0EFF               	movlw	-1
  3186  002B92  CFE3 FFDA          	movff	plusw1,fsr2h
  3187  002B96  06DE               	decf	postinc2,f,c
  3188  002B98  0E00               	movlw	0
  3189  002B9A  5ADD               	subwfb	postdec2,f,c
  3190                           
  3191                           ;semaphore.c: 13: if(handler->sem_value < 0){
  3192                           ;stkvar	sem_wait@handler @ sp[(0)+-2]
  3193  002B9C  0EFE               	movlw	-2
  3194  002B9E  CFE3 FFD9          	movff	plusw1,fsr2l
  3195  002BA2  0EFF               	movlw	-1
  3196  002BA4  CFE3 FFDA          	movff	plusw1,fsr2h
  3197  002BA8  0E01               	movlw	1
  3198  002BAA  AEDB               	btfss	plusw2,7,c
  3199  002BAC  D035               	goto	l3875
  3200                           
  3201                           ;semaphore.c: 15: queue_insert(&handler->sem_queue, F_APTOS.task_running);
  3202  002BAE  EE23  F055         	lfsr	2,_F_APTOS+564
  3203  002BB2  CFDE FFE6          	movff	postinc2,postinc1
  3204  002BB6  CFDE FFE6          	movff	postinc2,postinc1
  3205  002BBA  CFDE FFE6          	movff	postinc2,postinc1
  3206  002BBE  CFDE FFE6          	movff	postinc2,postinc1
  3207                           
  3208                           ;stkvar	sem_wait@handler @ sp[(-4)+-2]
  3209  002BC2  0EFA               	movlw	-6
  3210  002BC4  50E3               	movf	plusw1,w,c
  3211  002BC6  0F02               	addlw	2
  3212  002BC8  6E50               	movwf	btemp+1,c
  3213  002BCA  0EFB               	movlw	-5
  3214  002BCC  CFE3 F051          	movff	plusw1,btemp+2
  3215  002BD0  0E00               	movlw	0
  3216  002BD2  2251               	addwfc	btemp+2,f,c
  3217  002BD4  C050  FFE6         	movff	btemp+1,postinc1
  3218  002BD8  C051  FFE6         	movff	btemp+2,postinc1
  3219  002BDC  ECCB  F00C         	call	_queue_insert	;wreg free
  3220                           
  3221                           ;semaphore.c: 16: F_APTOS.FILA_APTOS[F_APTOS.task_running].task_STATE = WAITING;
  3222  002BE0  0E70               	movlw	112
  3223  002BE2  6EE6               	movwf	postinc1,c
  3224  002BE4  0E00               	movlw	0
  3225  002BE6  6EE6               	movwf	postinc1,c
  3226  002BE8  EE23  F055         	lfsr	2,_F_APTOS+564
  3227  002BEC  CFDE F050          	movff	postinc2,btemp+1
  3228  002BF0  CFDD F051          	movff	postdec2,btemp+2
  3229  002BF4  C050  FFE6         	movff	btemp+1,postinc1
  3230  002BF8  C051  FFE6         	movff	btemp+2,postinc1
  3231  002BFC  EC10  F016         	call	___wmul	;wreg free
  3232  002C00  0E29               	movlw	low (_F_APTOS+8)
  3233  002C02  244F               	addwf	btemp,w,c
  3234  002C04  6ED9               	movwf	fsr2l,c
  3235  002C06  0E01               	movlw	high (_F_APTOS+8)
  3236  002C08  2050               	addwfc	btemp+1,w,c
  3237  002C0A  6EDA               	movwf	fsr2h,c
  3238  002C0C  0E02               	movlw	2
  3239  002C0E  6EDF               	movwf	indf2,c
  3240                           
  3241                           ;semaphore.c: 19: nojoDispatcher(WAITING);
  3242  002C10  0E02               	movlw	2
  3243  002C12  6EE6               	movwf	postinc1,c
  3244  002C14  EC0E  F003         	call	_nojoDispatcher	;wreg free
  3245  002C18                     l3875:
  3246                           
  3247                           ;semaphore.c: 20: }
  3248                           ;semaphore.c: 22: INTCONbits.GIE = 1;
  3249  002C18  8EF2               	bsf	intcon,7,c	;volatile
  3250                           
  3251                           ; _sem_wait: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
  3252  002C1A  52E5               	movf	postdec1,f,c
  3253  002C1C  52E5               	movf	postdec1,f,c
  3254  002C1E  0012               	return		;funcret
  3255  002C20                     __end_of_sem_wait:
  3256                           	opt stack 0
  3257                           tblptru	equ	0xFF8
  3258                           tblptrh	equ	0xFF7
  3259                           tblptrl	equ	0xFF6
  3260                           tablat	equ	0xFF5
  3261                           prodh	equ	0xFF4
  3262                           prodl	equ	0xFF3
  3263                           intcon	equ	0xFF2
  3264                           postinc0	equ	0xFEE
  3265                           wreg	equ	0xFE8
  3266                           postinc1	equ	0xFE6
  3267                           postdec1	equ	0xFE5
  3268                           plusw1	equ	0xFE3
  3269                           fsr1h	equ	0xFE2
  3270                           fsr1l	equ	0xFE1
  3271                           indf2	equ	0xFDF
  3272                           postinc2	equ	0xFDE
  3273                           postdec2	equ	0xFDD
  3274                           plusw2	equ	0xFDB
  3275                           fsr2h	equ	0xFDA
  3276                           fsr2l	equ	0xFD9
  3277                           status	equ	0xFD8
  3278                           
  3279 ;; *************** function _queue_insert *****************
  3280 ;; Defined at:
  3281 ;;		line 9 in file "queue.c"
  3282 ;; Parameters:    Size  Location     Type
  3283 ;;  queue_handle    2  [STACK] PTR struct queue
  3284 ;;		 -> s_2(26), s_1(26), 
  3285 ;;  task_pos        4  [STACK] unsigned long 
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;  pos             4  [STACK] unsigned long 
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  1  [STACK] void 
  3290 ;; Registers used:
  3291 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3297 ;;      Params:         0       0       0       0       0       0       0
  3298 ;;      Locals:         0       0       0       0       0       0       0
  3299 ;;      Temps:          0       0       0       0       0       0       0
  3300 ;;      Totals:         0       0       0       0       0       0       0
  3301 ;;Total ram usage:        0 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; Hardware stack levels required when called:    4
  3304 ;; This function calls:
  3305 ;;		Nothing
  3306 ;; This function is called by:
  3307 ;;		_sem_wait
  3308 ;; This function uses a reentrant model
  3309 ;;
  3310                           
  3311                           	psect	text19
  3312  001996                     __ptext19:
  3313                           	opt stack 0
  3314  001996                     _queue_insert:
  3315                           	opt stack 0
  3316                           
  3317                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0
  3318  001996  52E6               	movf	postinc1,f,c
  3319  001998  52E6               	movf	postinc1,f,c
  3320  00199A  52E6               	movf	postinc1,f,c
  3321  00199C  52E6               	movf	postinc1,f,c
  3322                           
  3323                           ;queue.c: 10: u_int pos = (queue_handler->queue_size + queue_handler->queue_first) % 4;
  3324                           ;stkvar	queue_insert@queue_handler @ sp[(-4)+-2]
  3325                           
  3326                           ;incstack = 0
  3327  00199E  0EFA               	movlw	-6
  3328  0019A0  CFE3 F050          	movff	plusw1,btemp+1
  3329  0019A4  0EFB               	movlw	-5
  3330  0019A6  CFE3 F051          	movff	plusw1,btemp+2
  3331  0019AA  0E14               	movlw	20
  3332  0019AC  2450               	addwf	btemp+1,w,c
  3333  0019AE  6ED9               	movwf	fsr2l,c
  3334  0019B0  0E00               	movlw	0
  3335  0019B2  2051               	addwfc	btemp+2,w,c
  3336  0019B4  6EDA               	movwf	fsr2h,c
  3337  0019B6  CFDE F057          	movff	postinc2,btemp+8
  3338  0019BA  CFDE F058          	movff	postinc2,btemp+9
  3339  0019BE  CFDE F059          	movff	postinc2,btemp+10
  3340  0019C2  CFDE F05A          	movff	postinc2,btemp+11
  3341                           
  3342                           ;stkvar	queue_insert@queue_handler @ sp[(-4)+-2]
  3343  0019C6  0EFA               	movlw	-6
  3344  0019C8  CFE3 F050          	movff	plusw1,btemp+1
  3345  0019CC  0EFB               	movlw	-5
  3346  0019CE  CFE3 F051          	movff	plusw1,btemp+2
  3347  0019D2  0E10               	movlw	16
  3348  0019D4  2450               	addwf	btemp+1,w,c
  3349  0019D6  6ED9               	movwf	fsr2l,c
  3350  0019D8  0E00               	movlw	0
  3351  0019DA  2051               	addwfc	btemp+2,w,c
  3352  0019DC  6EDA               	movwf	fsr2h,c
  3353  0019DE  CFDE F053          	movff	postinc2,btemp+4
  3354  0019E2  CFDE F054          	movff	postinc2,btemp+5
  3355  0019E6  CFDE F055          	movff	postinc2,btemp+6
  3356  0019EA  CFDE F056          	movff	postinc2,btemp+7
  3357  0019EE  5057               	movf	btemp+8,w,c
  3358  0019F0  2453               	addwf	btemp+4,w,c
  3359  0019F2  6E4F               	movwf	btemp,c
  3360  0019F4  5058               	movf	btemp+9,w,c
  3361  0019F6  2054               	addwfc	btemp+5,w,c
  3362  0019F8  6E50               	movwf	btemp+1,c
  3363  0019FA  5059               	movf	btemp+10,w,c
  3364  0019FC  2055               	addwfc	btemp+6,w,c
  3365  0019FE  6E51               	movwf	btemp+2,c
  3366  001A00  505A               	movf	btemp+11,w,c
  3367  001A02  2056               	addwfc	btemp+7,w,c
  3368  001A04  6E52               	movwf	btemp+3,c
  3369  001A06  0E03               	movlw	3
  3370  001A08  144F               	andwf	btemp,w,c
  3371  001A0A  6E57               	movwf	btemp+8,c
  3372  001A0C  0E00               	movlw	0
  3373  001A0E  1450               	andwf	btemp+1,w,c
  3374  001A10  6E58               	movwf	btemp+9,c
  3375  001A12  0E00               	movlw	0
  3376  001A14  1451               	andwf	btemp+2,w,c
  3377  001A16  6E59               	movwf	btemp+10,c
  3378  001A18  0E00               	movlw	0
  3379  001A1A  1452               	andwf	btemp+3,w,c
  3380  001A1C  6E5A               	movwf	btemp+11,c
  3381                           
  3382                           ;stkvar	queue_insert@pos @ sp[(-4)+0]
  3383  001A1E  0EFC               	movlw	-4
  3384  001A20  C057  FFE3         	movff	btemp+8,plusw1
  3385  001A24  0EFD               	movlw	-3
  3386  001A26  C058  FFE3         	movff	btemp+9,plusw1
  3387  001A2A  0EFE               	movlw	-2
  3388  001A2C  C059  FFE3         	movff	btemp+10,plusw1
  3389  001A30  0EFF               	movlw	-1
  3390  001A32  C05A  FFE3         	movff	btemp+11,plusw1
  3391                           
  3392                           ;queue.c: 11: queue_handler->TASKS[pos] = task_pos;
  3393                           ;stkvar	queue_insert@task_pos @ sp[(-4)+-6]
  3394  001A36  50E1               	movf	fsr1l,w,c
  3395  001A38  0FF6               	addlw	-10
  3396  001A3A  6ED9               	movwf	fsr2l,c
  3397  001A3C  50E2               	movf	fsr1h,w,c
  3398  001A3E  6EDA               	movwf	fsr2h,c
  3399  001A40  0EFF               	movlw	255
  3400  001A42  22DA               	addwfc	fsr2h,f,c
  3401                           
  3402                           ;stkvar	queue_insert@pos @ sp[(-4)+0]
  3403  001A44  0EFC               	movlw	-4
  3404  001A46  CFE3 F050          	movff	plusw1,btemp+1
  3405  001A4A  0EFD               	movlw	-3
  3406  001A4C  CFE3 F051          	movff	plusw1,btemp+2
  3407  001A50  90D8               	bcf	status,0,c
  3408  001A52  3650               	rlcf	btemp+1,f,c
  3409  001A54  3651               	rlcf	btemp+2,f,c
  3410  001A56  90D8               	bcf	status,0,c
  3411  001A58  3650               	rlcf	btemp+1,f,c
  3412  001A5A  3651               	rlcf	btemp+2,f,c
  3413                           
  3414                           ;stkvar	queue_insert@queue_handler @ sp[(-4)+-2]
  3415  001A5C  0EFA               	movlw	-6
  3416  001A5E  CFE3 F059          	movff	plusw1,btemp+10
  3417  001A62  0EFB               	movlw	-5
  3418  001A64  CFE3 F05A          	movff	plusw1,btemp+11
  3419  001A68  5050               	movf	btemp+1,w,c
  3420  001A6A  2459               	addwf	btemp+10,w,c
  3421  001A6C  6EE9               	movwf	fsr0l,c
  3422  001A6E  5051               	movf	btemp+2,w,c
  3423  001A70  205A               	addwfc	btemp+11,w,c
  3424  001A72  6EEA               	movwf	fsr0h,c
  3425  001A74  CFDE FFEE          	movff	postinc2,postinc0
  3426  001A78  CFDE FFEE          	movff	postinc2,postinc0
  3427  001A7C  CFDE FFEE          	movff	postinc2,postinc0
  3428  001A80  CFDE FFEE          	movff	postinc2,postinc0
  3429                           
  3430                           ;queue.c: 12: queue_handler->queue_size++;
  3431                           ;stkvar	queue_insert@queue_handler @ sp[(-4)+-2]
  3432  001A84  0EFA               	movlw	-6
  3433  001A86  CFE3 F050          	movff	plusw1,btemp+1
  3434  001A8A  0EFB               	movlw	-5
  3435  001A8C  CFE3 F051          	movff	plusw1,btemp+2
  3436  001A90  0E10               	movlw	16
  3437  001A92  2450               	addwf	btemp+1,w,c
  3438  001A94  6ED9               	movwf	fsr2l,c
  3439  001A96  0E00               	movlw	0
  3440  001A98  2051               	addwfc	btemp+2,w,c
  3441  001A9A  6EDA               	movwf	fsr2h,c
  3442  001A9C  2ADE               	incf	postinc2,f,c
  3443  001A9E  0E00               	movlw	0
  3444  001AA0  22DE               	addwfc	postinc2,f,c
  3445  001AA2  22DE               	addwfc	postinc2,f,c
  3446  001AA4  22DE               	addwfc	postinc2,f,c
  3447                           
  3448                           ; _queue_insert: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, 
      +                          argsize = 6, vargsize = 0
  3449  001AA6  0EF6               	movlw	246
  3450  001AA8  26E1               	addwf	fsr1l,f,c
  3451  001AAA  0EFF               	movlw	255
  3452  001AAC  22E2               	addwfc	fsr1h,f,c
  3453  001AAE  0012               	return		;funcret
  3454  001AB0                     __end_of_queue_insert:
  3455                           	opt stack 0
  3456                           tblptru	equ	0xFF8
  3457                           tblptrh	equ	0xFF7
  3458                           tblptrl	equ	0xFF6
  3459                           tablat	equ	0xFF5
  3460                           prodh	equ	0xFF4
  3461                           prodl	equ	0xFF3
  3462                           intcon	equ	0xFF2
  3463                           postinc0	equ	0xFEE
  3464                           fsr0h	equ	0xFEA
  3465                           fsr0l	equ	0xFE9
  3466                           wreg	equ	0xFE8
  3467                           postinc1	equ	0xFE6
  3468                           postdec1	equ	0xFE5
  3469                           plusw1	equ	0xFE3
  3470                           fsr1h	equ	0xFE2
  3471                           fsr1l	equ	0xFE1
  3472                           indf2	equ	0xFDF
  3473                           postinc2	equ	0xFDE
  3474                           postdec2	equ	0xFDD
  3475                           plusw2	equ	0xFDB
  3476                           fsr2h	equ	0xFDA
  3477                           fsr2l	equ	0xFD9
  3478                           status	equ	0xFD8
  3479                           
  3480 ;; *************** function _sem_post *****************
  3481 ;; Defined at:
  3482 ;;		line 25 in file "semaphore.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;  handler         2  [STACK] PTR struct sem
  3485 ;;		 -> s_2(26), s_1(26), 
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;		None
  3488 ;; Return value:  Size  Location     Type
  3489 ;;                  1  [STACK] void 
  3490 ;; Registers used:
  3491 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, b
      +temp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  3492 ;; Tracked objects:
  3493 ;;		On entry : 0/0
  3494 ;;		On exit  : 0/0
  3495 ;;		Unchanged: 0/0
  3496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3497 ;;      Params:         0       0       0       0       0       0       0
  3498 ;;      Locals:         0       0       0       0       0       0       0
  3499 ;;      Temps:          0       0       0       0       0       0       0
  3500 ;;      Totals:         0       0       0       0       0       0       0
  3501 ;;Total ram usage:        0 bytes
  3502 ;; Hardware stack levels used:    1
  3503 ;; Hardware stack levels required when called:    7
  3504 ;; This function calls:
  3505 ;;		___wmul
  3506 ;;		_nojoDispatcher
  3507 ;;		_queue_remove
  3508 ;; This function is called by:
  3509 ;;		_cloro
  3510 ;;		_ph
  3511 ;;		_limpeza
  3512 ;; This function uses a reentrant model
  3513 ;;
  3514                           
  3515                           	psect	text20
  3516  002DE0                     __ptext20:
  3517                           	opt stack 0
  3518  002DE0                     _sem_post:
  3519                           	opt stack 19
  3520                           
  3521                           ;semaphore.c: 26: INTCONbits.GIE = 0;
  3522                           
  3523                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  3524                           ;incstack = 0
  3525  002DE0  9EF2               	bcf	intcon,7,c	;volatile
  3526                           
  3527                           ;semaphore.c: 28: handler->sem_value++;
  3528                           ;stkvar	sem_post@handler @ sp[(0)+-2]
  3529  002DE2  0EFE               	movlw	-2
  3530  002DE4  CFE3 FFD9          	movff	plusw1,fsr2l
  3531  002DE8  0EFF               	movlw	-1
  3532  002DEA  CFE3 FFDA          	movff	plusw1,fsr2h
  3533  002DEE  2ADE               	incf	postinc2,f,c
  3534  002DF0  0E00               	movlw	0
  3535  002DF2  22DD               	addwfc	postdec2,f,c
  3536                           
  3537                           ;semaphore.c: 29: if(handler->sem_value <= 0) {
  3538                           ;stkvar	sem_post@handler @ sp[(0)+-2]
  3539  002DF4  0EFE               	movlw	-2
  3540  002DF6  CFE3 FFD9          	movff	plusw1,fsr2l
  3541  002DFA  0EFF               	movlw	-1
  3542  002DFC  CFE3 FFDA          	movff	plusw1,fsr2h
  3543  002E00  0E01               	movlw	1
  3544  002E02  BEDB               	btfsc	plusw2,7,c
  3545  002E04  D006               	goto	u307_20
  3546  002E06  0E01               	movlw	1
  3547  002E08  50DB               	movf	plusw2,w,c
  3548  002E0A  E12C               	bnz	l3887
  3549  002E0C  04DE               	decf	postinc2,w,c
  3550  002E0E  B0D8               	btfsc	status,0,c
  3551  002E10  D029               	goto	l3887
  3552  002E12                     u307_20:
  3553                           
  3554                           ;semaphore.c: 30: F_APTOS.FILA_APTOS[queue_remove(&handler->sem_queue)].task_STATE = REA
      +                          DY;
  3555  002E12  0E70               	movlw	112
  3556  002E14  6EE6               	movwf	postinc1,c
  3557  002E16  0E00               	movlw	0
  3558  002E18  6EE6               	movwf	postinc1,c
  3559                           
  3560                           ;stkvar	sem_post@handler @ sp[(-2)+-2]
  3561  002E1A  0EFC               	movlw	-4
  3562  002E1C  50E3               	movf	plusw1,w,c
  3563  002E1E  0F02               	addlw	2
  3564  002E20  6E50               	movwf	btemp+1,c
  3565  002E22  0EFD               	movlw	-3
  3566  002E24  CFE3 F051          	movff	plusw1,btemp+2
  3567  002E28  0E00               	movlw	0
  3568  002E2A  2251               	addwfc	btemp+2,f,c
  3569  002E2C  C050  FFE6         	movff	btemp+1,postinc1
  3570  002E30  C051  FFE6         	movff	btemp+2,postinc1
  3571  002E34  ECFF  F00A         	call	_queue_remove	;wreg free
  3572  002E38  C04F  F059         	movff	btemp,btemp+10
  3573  002E3C  C050  F05A         	movff	btemp+1,btemp+11
  3574  002E40  C059  FFE6         	movff	btemp+10,postinc1
  3575  002E44  C05A  FFE6         	movff	btemp+11,postinc1
  3576  002E48  EC10  F016         	call	___wmul	;wreg free
  3577  002E4C  0E29               	movlw	low (_F_APTOS+8)
  3578  002E4E  244F               	addwf	btemp,w,c
  3579  002E50  6ED9               	movwf	fsr2l,c
  3580  002E52  0E01               	movlw	high (_F_APTOS+8)
  3581  002E54  2050               	addwfc	btemp+1,w,c
  3582  002E56  6EDA               	movwf	fsr2h,c
  3583  002E58  0E00               	movlw	0
  3584  002E5A  6EDF               	movwf	indf2,c
  3585                           
  3586                           ;semaphore.c: 31: nojoDispatcher(READY);
  3587  002E5C  0E00               	movlw	0
  3588  002E5E  6EE6               	movwf	postinc1,c
  3589  002E60  EC0E  F003         	call	_nojoDispatcher	;wreg free
  3590  002E64                     l3887:
  3591                           
  3592                           ;semaphore.c: 32: }
  3593                           ;semaphore.c: 34: INTCONbits.GIE = 1;
  3594  002E64  8EF2               	bsf	intcon,7,c	;volatile
  3595                           
  3596                           ; _sem_post: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
  3597  002E66  52E5               	movf	postdec1,f,c
  3598  002E68  52E5               	movf	postdec1,f,c
  3599  002E6A  0012               	return		;funcret
  3600  002E6C                     __end_of_sem_post:
  3601                           	opt stack 0
  3602                           tblptru	equ	0xFF8
  3603                           tblptrh	equ	0xFF7
  3604                           tblptrl	equ	0xFF6
  3605                           tablat	equ	0xFF5
  3606                           prodh	equ	0xFF4
  3607                           prodl	equ	0xFF3
  3608                           intcon	equ	0xFF2
  3609                           postinc0	equ	0xFEE
  3610                           fsr0h	equ	0xFEA
  3611                           fsr0l	equ	0xFE9
  3612                           wreg	equ	0xFE8
  3613                           postinc1	equ	0xFE6
  3614                           postdec1	equ	0xFE5
  3615                           plusw1	equ	0xFE3
  3616                           fsr1h	equ	0xFE2
  3617                           fsr1l	equ	0xFE1
  3618                           indf2	equ	0xFDF
  3619                           postinc2	equ	0xFDE
  3620                           postdec2	equ	0xFDD
  3621                           plusw2	equ	0xFDB
  3622                           fsr2h	equ	0xFDA
  3623                           fsr2l	equ	0xFD9
  3624                           status	equ	0xFD8
  3625                           
  3626 ;; *************** function _queue_remove *****************
  3627 ;; Defined at:
  3628 ;;		line 16 in file "queue.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;  queue_handle    2  [STACK] PTR struct queue
  3631 ;;		 -> s_2(26), s_1(26), 
  3632 ;; Auto vars:     Size  Location     Type
  3633 ;;  value           4  [STACK] unsigned long 
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  4  [STACK] unsigned long 
  3636 ;; Registers used:
  3637 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, b
      +temp+7, btemp+8, btemp+9, btemp+10, btemp+11
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3643 ;;      Params:         0       0       0       0       0       0       0
  3644 ;;      Locals:         0       0       0       0       0       0       0
  3645 ;;      Temps:          0       0       0       0       0       0       0
  3646 ;;      Totals:         0       0       0       0       0       0       0
  3647 ;;Total ram usage:        0 bytes
  3648 ;; Hardware stack levels used:    1
  3649 ;; Hardware stack levels required when called:    4
  3650 ;; This function calls:
  3651 ;;		Nothing
  3652 ;; This function is called by:
  3653 ;;		_sem_post
  3654 ;; This function uses a reentrant model
  3655 ;;
  3656                           
  3657                           	psect	text21
  3658  0015FE                     __ptext21:
  3659                           	opt stack 0
  3660  0015FE                     _queue_remove:
  3661                           	opt stack 0
  3662                           
  3663                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  3664  0015FE  52E6               	movf	postinc1,f,c
  3665  001600  52E6               	movf	postinc1,f,c
  3666  001602  52E6               	movf	postinc1,f,c
  3667  001604  52E6               	movf	postinc1,f,c
  3668                           
  3669                           ;queue.c: 17: u_int value = queue_handler->TASKS[queue_handler->queue_first];
  3670                           ;stkvar	queue_remove@queue_handler @ sp[(-4)+-2]
  3671                           
  3672                           ;incstack = 0
  3673  001606  0EFA               	movlw	-6
  3674  001608  CFE3 F050          	movff	plusw1,btemp+1
  3675  00160C  0EFB               	movlw	-5
  3676  00160E  CFE3 F051          	movff	plusw1,btemp+2
  3677  001612  0E14               	movlw	20
  3678  001614  2450               	addwf	btemp+1,w,c
  3679  001616  6ED9               	movwf	fsr2l,c
  3680  001618  0E00               	movlw	0
  3681  00161A  2051               	addwfc	btemp+2,w,c
  3682  00161C  6EDA               	movwf	fsr2h,c
  3683  00161E  CFDE F050          	movff	postinc2,btemp+1
  3684  001622  CFDD F051          	movff	postdec2,btemp+2
  3685  001626  90D8               	bcf	status,0,c
  3686  001628  3650               	rlcf	btemp+1,f,c
  3687  00162A  3651               	rlcf	btemp+2,f,c
  3688  00162C  90D8               	bcf	status,0,c
  3689  00162E  3650               	rlcf	btemp+1,f,c
  3690  001630  3651               	rlcf	btemp+2,f,c
  3691                           
  3692                           ;stkvar	queue_remove@queue_handler @ sp[(-4)+-2]
  3693  001632  0EFA               	movlw	-6
  3694  001634  CFE3 F059          	movff	plusw1,btemp+10
  3695  001638  0EFB               	movlw	-5
  3696  00163A  CFE3 F05A          	movff	plusw1,btemp+11
  3697  00163E  5050               	movf	btemp+1,w,c
  3698  001640  2459               	addwf	btemp+10,w,c
  3699  001642  6ED9               	movwf	fsr2l,c
  3700  001644  5051               	movf	btemp+2,w,c
  3701  001646  205A               	addwfc	btemp+11,w,c
  3702  001648  6EDA               	movwf	fsr2h,c
  3703  00164A  CFDE F057          	movff	postinc2,btemp+8
  3704  00164E  CFDE F058          	movff	postinc2,btemp+9
  3705  001652  CFDE F059          	movff	postinc2,btemp+10
  3706  001656  CFDE F05A          	movff	postinc2,btemp+11
  3707                           
  3708                           ;stkvar	queue_remove@value @ sp[(-4)+0]
  3709  00165A  0EFC               	movlw	-4
  3710  00165C  C057  FFE3         	movff	btemp+8,plusw1
  3711  001660  0EFD               	movlw	-3
  3712  001662  C058  FFE3         	movff	btemp+9,plusw1
  3713  001666  0EFE               	movlw	-2
  3714  001668  C059  FFE3         	movff	btemp+10,plusw1
  3715  00166C  0EFF               	movlw	-1
  3716  00166E  C05A  FFE3         	movff	btemp+11,plusw1
  3717                           
  3718                           ;queue.c: 19: queue_handler->queue_first = (queue_handler->queue_first + 1) % 4;
  3719                           ;stkvar	queue_remove@queue_handler @ sp[(-4)+-2]
  3720  001672  0EFA               	movlw	-6
  3721  001674  CFE3 F050          	movff	plusw1,btemp+1
  3722  001678  0EFB               	movlw	-5
  3723  00167A  CFE3 F051          	movff	plusw1,btemp+2
  3724  00167E  0E14               	movlw	20
  3725  001680  2450               	addwf	btemp+1,w,c
  3726  001682  6ED9               	movwf	fsr2l,c
  3727  001684  0E00               	movlw	0
  3728  001686  2051               	addwfc	btemp+2,w,c
  3729  001688  6EDA               	movwf	fsr2h,c
  3730  00168A  CFDE F057          	movff	postinc2,btemp+8
  3731  00168E  CFDE F058          	movff	postinc2,btemp+9
  3732  001692  CFDE F059          	movff	postinc2,btemp+10
  3733  001696  CFDE F05A          	movff	postinc2,btemp+11
  3734  00169A  0E01               	movlw	1
  3735  00169C  2457               	addwf	btemp+8,w,c
  3736  00169E  6E53               	movwf	btemp+4,c
  3737  0016A0  0E00               	movlw	0
  3738  0016A2  2058               	addwfc	btemp+9,w,c
  3739  0016A4  6E54               	movwf	btemp+5,c
  3740  0016A6  0E00               	movlw	0
  3741  0016A8  2059               	addwfc	btemp+10,w,c
  3742  0016AA  6E55               	movwf	btemp+6,c
  3743  0016AC  0E00               	movlw	0
  3744  0016AE  205A               	addwfc	btemp+11,w,c
  3745  0016B0  6E56               	movwf	btemp+7,c
  3746  0016B2  0E03               	movlw	3
  3747  0016B4  1453               	andwf	btemp+4,w,c
  3748  0016B6  6E57               	movwf	btemp+8,c
  3749  0016B8  0E00               	movlw	0
  3750  0016BA  1454               	andwf	btemp+5,w,c
  3751  0016BC  6E58               	movwf	btemp+9,c
  3752  0016BE  0E00               	movlw	0
  3753  0016C0  1455               	andwf	btemp+6,w,c
  3754  0016C2  6E59               	movwf	btemp+10,c
  3755  0016C4  0E00               	movlw	0
  3756  0016C6  1456               	andwf	btemp+7,w,c
  3757  0016C8  6E5A               	movwf	btemp+11,c
  3758                           
  3759                           ;stkvar	queue_remove@queue_handler @ sp[(-4)+-2]
  3760  0016CA  0EFA               	movlw	-6
  3761  0016CC  CFE3 F050          	movff	plusw1,btemp+1
  3762  0016D0  0EFB               	movlw	-5
  3763  0016D2  CFE3 F051          	movff	plusw1,btemp+2
  3764  0016D6  0E14               	movlw	20
  3765  0016D8  2450               	addwf	btemp+1,w,c
  3766  0016DA  6ED9               	movwf	fsr2l,c
  3767  0016DC  0E00               	movlw	0
  3768  0016DE  2051               	addwfc	btemp+2,w,c
  3769  0016E0  6EDA               	movwf	fsr2h,c
  3770  0016E2  C057  FFDE         	movff	btemp+8,postinc2
  3771  0016E6  C058  FFDE         	movff	btemp+9,postinc2
  3772  0016EA  C059  FFDE         	movff	btemp+10,postinc2
  3773  0016EE  C05A  FFDE         	movff	btemp+11,postinc2
  3774                           
  3775                           ;queue.c: 20: queue_handler->queue_size--;
  3776                           ;stkvar	queue_remove@queue_handler @ sp[(-4)+-2]
  3777  0016F2  0EFA               	movlw	-6
  3778  0016F4  CFE3 F050          	movff	plusw1,btemp+1
  3779  0016F8  0EFB               	movlw	-5
  3780  0016FA  CFE3 F051          	movff	plusw1,btemp+2
  3781  0016FE  0E10               	movlw	16
  3782  001700  2450               	addwf	btemp+1,w,c
  3783  001702  6ED9               	movwf	fsr2l,c
  3784  001704  0E00               	movlw	0
  3785  001706  2051               	addwfc	btemp+2,w,c
  3786  001708  6EDA               	movwf	fsr2h,c
  3787  00170A  06DE               	decf	postinc2,f,c
  3788  00170C  0E00               	movlw	0
  3789  00170E  5ADE               	subwfb	postinc2,f,c
  3790  001710  5ADE               	subwfb	postinc2,f,c
  3791  001712  5ADE               	subwfb	postinc2,f,c
  3792                           
  3793                           ;queue.c: 22: return value;
  3794                           ;stkvar	queue_remove@value @ sp[(-4)+0]
  3795  001714  0EFC               	movlw	-4
  3796  001716  CFE3 F04F          	movff	plusw1,btemp
  3797  00171A  0EFD               	movlw	-3
  3798  00171C  CFE3 F050          	movff	plusw1,btemp+1
  3799  001720  0EFE               	movlw	-2
  3800  001722  CFE3 F051          	movff	plusw1,btemp+2
  3801  001726  0EFF               	movlw	-1
  3802  001728  CFE3 F052          	movff	plusw1,btemp+3
  3803                           
  3804                           ; _queue_remove: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, 
      +                          argsize = 2, vargsize = 0
  3805  00172C  0EFA               	movlw	250
  3806  00172E  26E1               	addwf	fsr1l,f,c
  3807  001730  0EFF               	movlw	255
  3808  001732  22E2               	addwfc	fsr1h,f,c
  3809  001734  0012               	return		;funcret
  3810  001736                     __end_of_queue_remove:
  3811                           	opt stack 0
  3812                           tblptru	equ	0xFF8
  3813                           tblptrh	equ	0xFF7
  3814                           tblptrl	equ	0xFF6
  3815                           tablat	equ	0xFF5
  3816                           prodh	equ	0xFF4
  3817                           prodl	equ	0xFF3
  3818                           intcon	equ	0xFF2
  3819                           postinc0	equ	0xFEE
  3820                           fsr0h	equ	0xFEA
  3821                           fsr0l	equ	0xFE9
  3822                           wreg	equ	0xFE8
  3823                           postinc1	equ	0xFE6
  3824                           postdec1	equ	0xFE5
  3825                           plusw1	equ	0xFE3
  3826                           fsr1h	equ	0xFE2
  3827                           fsr1l	equ	0xFE1
  3828                           indf2	equ	0xFDF
  3829                           postinc2	equ	0xFDE
  3830                           postdec2	equ	0xFDD
  3831                           plusw2	equ	0xFDB
  3832                           fsr2h	equ	0xFDA
  3833                           fsr2l	equ	0xFD9
  3834                           status	equ	0xFD8
  3835                           
  3836 ;; *************** function _nojoDispatcher *****************
  3837 ;; Defined at:
  3838 ;;		line 38 in file "kernel.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;  state           1  [STACK] enum E3135
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;  task_pos        4  [STACK] unsigned long 
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1  [STACK] void 
  3845 ;; Registers used:
  3846 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+8, btemp+9, btemp+10, 
      +btemp+11, prodl, prodh
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3852 ;;      Params:         0       0       0       0       0       0       0
  3853 ;;      Locals:         0       0       0       0       0       0       0
  3854 ;;      Temps:          0       0       0       0       0       0       0
  3855 ;;      Totals:         0       0       0       0       0       0       0
  3856 ;;Total ram usage:        0 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    6
  3859 ;; This function calls:
  3860 ;;		_RR_scheduler
  3861 ;;		___wmul
  3862 ;; This function is called by:
  3863 ;;		_nojoDelay
  3864 ;;		_pipe_read
  3865 ;;		_pipe_write
  3866 ;;		_sem_wait
  3867 ;;		_sem_post
  3868 ;;		_timer_ISR
  3869 ;;		_nojoYield
  3870 ;; This function uses a reentrant model
  3871 ;;
  3872                           
  3873                           	psect	text22
  3874  00061C                     __ptext22:
  3875                           	opt stack 0
  3876  00061C                     _nojoDispatcher:
  3877                           	opt stack 0
  3878                           
  3879                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  3880  00061C  52E6               	movf	postinc1,f,c
  3881  00061E  52E6               	movf	postinc1,f,c
  3882  000620  52E6               	movf	postinc1,f,c
  3883  000622  52E6               	movf	postinc1,f,c
  3884                           
  3885                           ;kernel.c: 40: INTCONbits.GIE = 0;
  3886                           
  3887                           ;incstack = 0
  3888  000624  9EF2               	bcf	intcon,7,c	;volatile
  3889                           
  3890                           ;kernel.c: 41: POS_READY_QUEUE task_pos;
  3891                           ;kernel.c: 44: do{ asm("MOVWF _tWORK"); asm("MOVFF BSR, _tBSR"); asm("MOVFF STATUS, _tST
      +                          ATUS"); F_APTOS.FILA_APTOS[F_APTOS.task_running].task_CTX.ctx_WORK = tWORK; F_APTOS.FILA
      +                          _APTOS[F_APTOS.task_running].task_CTX.ctx_BSR = tBSR; F_APTOS.FILA_APTOS[F_APTOS.task_ru
      +                          n
  3892  000626  6F12               	movwf	_tWORK,b	;# 
  3893  000628  CFE0 F011          	movff	bsr,_tBSR	;# 
  3894  00062C  CFD8 F010          	movff	status,_tSTATUS	;# 
  3895  000630  0E70               	movlw	112
  3896  000632  6EE6               	movwf	postinc1,c
  3897  000634  0E00               	movlw	0
  3898  000636  6EE6               	movwf	postinc1,c
  3899  000638  EE23  F055         	lfsr	2,_F_APTOS+564
  3900  00063C  CFDE F050          	movff	postinc2,btemp+1
  3901  000640  CFDD F051          	movff	postdec2,btemp+2
  3902  000644  C050  FFE6         	movff	btemp+1,postinc1
  3903  000648  C051  FFE6         	movff	btemp+2,postinc1
  3904  00064C  EC10  F016         	call	___wmul	;wreg free
  3905  000650  0E2C               	movlw	low (_F_APTOS+11)
  3906  000652  244F               	addwf	btemp,w,c
  3907  000654  6ED9               	movwf	fsr2l,c
  3908  000656  0E01               	movlw	high (_F_APTOS+11)
  3909  000658  2050               	addwfc	btemp+1,w,c
  3910  00065A  6EDA               	movwf	fsr2h,c
  3911  00065C  C012  FFDF         	movff	_tWORK,indf2
  3912  000660  0E70               	movlw	112
  3913  000662  6EE6               	movwf	postinc1,c
  3914  000664  0E00               	movlw	0
  3915  000666  6EE6               	movwf	postinc1,c
  3916  000668  EE23  F055         	lfsr	2,_F_APTOS+564
  3917  00066C  CFDE F050          	movff	postinc2,btemp+1
  3918  000670  CFDD F051          	movff	postdec2,btemp+2
  3919  000674  C050  FFE6         	movff	btemp+1,postinc1
  3920  000678  C051  FFE6         	movff	btemp+2,postinc1
  3921  00067C  EC10  F016         	call	___wmul	;wreg free
  3922  000680  0E2D               	movlw	low (_F_APTOS+12)
  3923  000682  244F               	addwf	btemp,w,c
  3924  000684  6ED9               	movwf	fsr2l,c
  3925  000686  0E01               	movlw	high (_F_APTOS+12)
  3926  000688  2050               	addwfc	btemp+1,w,c
  3927  00068A  6EDA               	movwf	fsr2h,c
  3928  00068C  C011  FFDF         	movff	_tBSR,indf2
  3929  000690  0E70               	movlw	112
  3930  000692  6EE6               	movwf	postinc1,c
  3931  000694  0E00               	movlw	0
  3932  000696  6EE6               	movwf	postinc1,c
  3933  000698  EE23  F055         	lfsr	2,_F_APTOS+564
  3934  00069C  CFDE F050          	movff	postinc2,btemp+1
  3935  0006A0  CFDD F051          	movff	postdec2,btemp+2
  3936  0006A4  C050  FFE6         	movff	btemp+1,postinc1
  3937  0006A8  C051  FFE6         	movff	btemp+2,postinc1
  3938  0006AC  EC10  F016         	call	___wmul	;wreg free
  3939  0006B0  0E2E               	movlw	low (_F_APTOS+13)
  3940  0006B2  244F               	addwf	btemp,w,c
  3941  0006B4  6ED9               	movwf	fsr2l,c
  3942  0006B6  0E01               	movlw	high (_F_APTOS+13)
  3943  0006B8  2050               	addwfc	btemp+1,w,c
  3944  0006BA  6EDA               	movwf	fsr2h,c
  3945  0006BC  C010  FFDF         	movff	_tSTATUS,indf2
  3946  0006C0  D0CC               	goto	l3693
  3947  0006C2                     l3689:
  3948  0006C2  0E70               	movlw	112
  3949  0006C4  6EE6               	movwf	postinc1,c
  3950  0006C6  0E00               	movlw	0
  3951  0006C8  6EE6               	movwf	postinc1,c
  3952  0006CA  EE23  F055         	lfsr	2,_F_APTOS+564
  3953  0006CE  CFDE F050          	movff	postinc2,btemp+1
  3954  0006D2  CFDD F051          	movff	postdec2,btemp+2
  3955  0006D6  C050  FFE6         	movff	btemp+1,postinc1
  3956  0006DA  C051  FFE6         	movff	btemp+2,postinc1
  3957  0006DE  EC10  F016         	call	___wmul	;wreg free
  3958  0006E2  EE23  F055         	lfsr	2,_F_APTOS+564
  3959  0006E6  CFDE F059          	movff	postinc2,btemp+10
  3960  0006EA  CFDD F05A          	movff	postdec2,btemp+11
  3961  0006EE  0E70               	movlw	112
  3962  0006F0  0259               	mulwf	btemp+10,c
  3963  0006F2  CFF3 F057          	movff	prodl,btemp+8
  3964  0006F6  CFF4 F058          	movff	prodh,btemp+9
  3965  0006FA  025A               	mulwf	btemp+11,c
  3966  0006FC  50F3               	movf	prodl,w,c
  3967  0006FE  2658               	addwf	btemp+9,f,c
  3968  000700  0E90               	movlw	low (_F_APTOS+111)
  3969  000702  2457               	addwf	btemp+8,w,c
  3970  000704  6ED9               	movwf	fsr2l,c
  3971  000706  0E01               	movlw	high (_F_APTOS+111)
  3972  000708  2058               	addwfc	btemp+9,w,c
  3973  00070A  6EDA               	movwf	fsr2h,c
  3974  00070C  50DF               	movf	indf2,w,c
  3975  00070E  0D03               	mullw	3
  3976  000710  0E21               	movlw	low _F_APTOS
  3977  000712  6E59               	movwf	btemp+10,c
  3978  000714  0E01               	movlw	high _F_APTOS
  3979  000716  6E5A               	movwf	btemp+11,c
  3980  000718  0E14               	movlw	20
  3981  00071A  2659               	addwf	btemp+10,f,c
  3982  00071C  0E00               	movlw	0
  3983  00071E  225A               	addwfc	btemp+11,f,c
  3984  000720  50F3               	movf	prodl,w,c
  3985  000722  2659               	addwf	btemp+10,f,c
  3986  000724  50F4               	movf	prodh,w,c
  3987  000726  225A               	addwfc	btemp+11,f,c
  3988  000728  504F               	movf	btemp,w,c
  3989  00072A  2459               	addwf	btemp+10,w,c
  3990  00072C  6ED9               	movwf	fsr2l,c
  3991  00072E  5050               	movf	btemp+1,w,c
  3992  000730  205A               	addwfc	btemp+11,w,c
  3993  000732  6EDA               	movwf	fsr2h,c
  3994  000734  50DF               	movf	223,w,c
  3995  000736  18FF               	xorwf	tosu,w,c	;volatile
  3996  000738  0BE0               	andlw	-32
  3997  00073A  18FF               	xorwf	tosu,w,c	;volatile
  3998  00073C  6EDF               	movwf	223,c
  3999  00073E  0E70               	movlw	112
  4000  000740  6EE6               	movwf	postinc1,c
  4001  000742  0E00               	movlw	0
  4002  000744  6EE6               	movwf	postinc1,c
  4003  000746  EE23  F055         	lfsr	2,_F_APTOS+564
  4004  00074A  CFDE F050          	movff	postinc2,btemp+1
  4005  00074E  CFDD F051          	movff	postdec2,btemp+2
  4006  000752  C050  FFE6         	movff	btemp+1,postinc1
  4007  000756  C051  FFE6         	movff	btemp+2,postinc1
  4008  00075A  EC10  F016         	call	___wmul	;wreg free
  4009  00075E  EE23  F055         	lfsr	2,_F_APTOS+564
  4010  000762  CFDE F059          	movff	postinc2,btemp+10
  4011  000766  CFDD F05A          	movff	postdec2,btemp+11
  4012  00076A  0E70               	movlw	112
  4013  00076C  0259               	mulwf	btemp+10,c
  4014  00076E  CFF3 F057          	movff	prodl,btemp+8
  4015  000772  CFF4 F058          	movff	prodh,btemp+9
  4016  000776  025A               	mulwf	btemp+11,c
  4017  000778  50F3               	movf	prodl,w,c
  4018  00077A  2658               	addwf	btemp+9,f,c
  4019  00077C  0E90               	movlw	low (_F_APTOS+111)
  4020  00077E  2457               	addwf	btemp+8,w,c
  4021  000780  6ED9               	movwf	fsr2l,c
  4022  000782  0E01               	movlw	high (_F_APTOS+111)
  4023  000784  2058               	addwfc	btemp+9,w,c
  4024  000786  6EDA               	movwf	fsr2h,c
  4025  000788  50DF               	movf	indf2,w,c
  4026  00078A  0D03               	mullw	3
  4027  00078C  0E21               	movlw	low _F_APTOS
  4028  00078E  6E59               	movwf	btemp+10,c
  4029  000790  0E01               	movlw	high _F_APTOS
  4030  000792  6E5A               	movwf	btemp+11,c
  4031  000794  0E12               	movlw	18
  4032  000796  2659               	addwf	btemp+10,f,c
  4033  000798  0E00               	movlw	0
  4034  00079A  225A               	addwfc	btemp+11,f,c
  4035  00079C  50F3               	movf	prodl,w,c
  4036  00079E  2659               	addwf	btemp+10,f,c
  4037  0007A0  50F4               	movf	prodh,w,c
  4038  0007A2  225A               	addwfc	btemp+11,f,c
  4039  0007A4  504F               	movf	btemp,w,c
  4040  0007A6  2459               	addwf	btemp+10,w,c
  4041  0007A8  6ED9               	movwf	fsr2l,c
  4042  0007AA  5050               	movf	btemp+1,w,c
  4043  0007AC  205A               	addwfc	btemp+11,w,c
  4044  0007AE  6EDA               	movwf	fsr2h,c
  4045  0007B0  CFFD FFDF          	movff	tosl,indf2	;volatile
  4046  0007B4  0E70               	movlw	112
  4047  0007B6  6EE6               	movwf	postinc1,c
  4048  0007B8  0E00               	movlw	0
  4049  0007BA  6EE6               	movwf	postinc1,c
  4050  0007BC  EE23  F055         	lfsr	2,_F_APTOS+564
  4051  0007C0  CFDE F050          	movff	postinc2,btemp+1
  4052  0007C4  CFDD F051          	movff	postdec2,btemp+2
  4053  0007C8  C050  FFE6         	movff	btemp+1,postinc1
  4054  0007CC  C051  FFE6         	movff	btemp+2,postinc1
  4055  0007D0  EC10  F016         	call	___wmul	;wreg free
  4056  0007D4  EE23  F055         	lfsr	2,_F_APTOS+564
  4057  0007D8  CFDE F059          	movff	postinc2,btemp+10
  4058  0007DC  CFDD F05A          	movff	postdec2,btemp+11
  4059  0007E0  0E70               	movlw	112
  4060  0007E2  0259               	mulwf	btemp+10,c
  4061  0007E4  CFF3 F057          	movff	prodl,btemp+8
  4062  0007E8  CFF4 F058          	movff	prodh,btemp+9
  4063  0007EC  025A               	mulwf	btemp+11,c
  4064  0007EE  50F3               	movf	prodl,w,c
  4065  0007F0  2658               	addwf	btemp+9,f,c
  4066  0007F2  0E90               	movlw	low (_F_APTOS+111)
  4067  0007F4  2457               	addwf	btemp+8,w,c
  4068  0007F6  6ED9               	movwf	fsr2l,c
  4069  0007F8  0E01               	movlw	high (_F_APTOS+111)
  4070  0007FA  2058               	addwfc	btemp+9,w,c
  4071  0007FC  6EDA               	movwf	fsr2h,c
  4072  0007FE  50DF               	movf	indf2,w,c
  4073  000800  0D03               	mullw	3
  4074  000802  0E21               	movlw	low _F_APTOS
  4075  000804  6E59               	movwf	btemp+10,c
  4076  000806  0E01               	movlw	high _F_APTOS
  4077  000808  6E5A               	movwf	btemp+11,c
  4078  00080A  0E13               	movlw	19
  4079  00080C  2659               	addwf	btemp+10,f,c
  4080  00080E  0E00               	movlw	0
  4081  000810  225A               	addwfc	btemp+11,f,c
  4082  000812  50F3               	movf	prodl,w,c
  4083  000814  2659               	addwf	btemp+10,f,c
  4084  000816  50F4               	movf	prodh,w,c
  4085  000818  225A               	addwfc	btemp+11,f,c
  4086  00081A  504F               	movf	btemp,w,c
  4087  00081C  2459               	addwf	btemp+10,w,c
  4088  00081E  6ED9               	movwf	fsr2l,c
  4089  000820  5050               	movf	btemp+1,w,c
  4090  000822  205A               	addwfc	btemp+11,w,c
  4091  000824  6EDA               	movwf	fsr2h,c
  4092  000826  CFFE FFDF          	movff	tosh,indf2	;volatile
  4093  00082A  0E70               	movlw	112
  4094  00082C  6EE6               	movwf	postinc1,c
  4095  00082E  0E00               	movlw	0
  4096  000830  6EE6               	movwf	postinc1,c
  4097  000832  EE23  F055         	lfsr	2,_F_APTOS+564
  4098  000836  CFDE F050          	movff	postinc2,btemp+1
  4099  00083A  CFDD F051          	movff	postdec2,btemp+2
  4100  00083E  C050  FFE6         	movff	btemp+1,postinc1
  4101  000842  C051  FFE6         	movff	btemp+2,postinc1
  4102  000846  EC10  F016         	call	___wmul	;wreg free
  4103  00084A  0E90               	movlw	low (_F_APTOS+111)
  4104  00084C  244F               	addwf	btemp,w,c
  4105  00084E  6ED9               	movwf	fsr2l,c
  4106  000850  0E01               	movlw	high (_F_APTOS+111)
  4107  000852  2050               	addwfc	btemp+1,w,c
  4108  000854  6EDA               	movwf	fsr2h,c
  4109  000856  2ADF               	incf	indf2,f,c
  4110  000858  0006               	pop		;# 
  4111  00085A                     l3693:
  4112  00085A  50FC               	movf	stkptr,w,c	;volatile
  4113  00085C  A4D8               	btfss	status,2,c
  4114  00085E  D731               	goto	l3689
  4115                           
  4116                           ;kernel.c: 46: F_APTOS.FILA_APTOS[F_APTOS.task_running].task_STATE = state;
  4117                           ;stkvar	nojoDispatcher@state @ sp[(-4)+-1]
  4118  000860  0E70               	movlw	112
  4119  000862  6EE6               	movwf	postinc1,c
  4120  000864  0E00               	movlw	0
  4121  000866  6EE6               	movwf	postinc1,c
  4122  000868  EE23  F055         	lfsr	2,_F_APTOS+564
  4123  00086C  CFDE F050          	movff	postinc2,btemp+1
  4124  000870  CFDD F051          	movff	postdec2,btemp+2
  4125  000874  C050  FFE6         	movff	btemp+1,postinc1
  4126  000878  C051  FFE6         	movff	btemp+2,postinc1
  4127  00087C  EC10  F016         	call	___wmul	;wreg free
  4128  000880  0E29               	movlw	low (_F_APTOS+8)
  4129  000882  244F               	addwf	btemp,w,c
  4130  000884  6ED9               	movwf	fsr2l,c
  4131  000886  0E01               	movlw	high (_F_APTOS+8)
  4132  000888  2050               	addwfc	btemp+1,w,c
  4133  00088A  6EDA               	movwf	fsr2h,c
  4134  00088C  0EFB               	movlw	-5
  4135  00088E  CFE3 FFDF          	movff	plusw1,indf2
  4136                           
  4137                           ;kernel.c: 50: task_pos = RR_scheduler();
  4138  000892  EC0B  F011         	call	_RR_scheduler	;wreg free
  4139                           
  4140                           ;stkvar	nojoDispatcher@task_pos @ sp[(-4)+0]
  4141  000896  0EFC               	movlw	-4
  4142  000898  C04F  FFE3         	movff	btemp,plusw1
  4143  00089C  0EFD               	movlw	-3
  4144  00089E  C050  FFE3         	movff	btemp+1,plusw1
  4145  0008A2  0EFE               	movlw	-2
  4146  0008A4  C051  FFE3         	movff	btemp+2,plusw1
  4147  0008A8  0EFF               	movlw	-1
  4148  0008AA  C052  FFE3         	movff	btemp+3,plusw1
  4149                           
  4150                           ;kernel.c: 56: F_APTOS.task_running = task_pos;
  4151                           ;stkvar	nojoDispatcher@task_pos @ sp[(-4)+0]
  4152  0008AE  50E1               	movf	fsr1l,w,c
  4153  0008B0  0FFC               	addlw	-4
  4154  0008B2  6ED9               	movwf	fsr2l,c
  4155  0008B4  50E2               	movf	fsr1h,w,c
  4156  0008B6  6EDA               	movwf	fsr2h,c
  4157  0008B8  0EFF               	movlw	255
  4158  0008BA  22DA               	addwfc	fsr2h,f,c
  4159  0008BC  CFDE F355          	movff	postinc2,_F_APTOS+564
  4160  0008C0  CFDE F356          	movff	postinc2,_F_APTOS+565
  4161  0008C4  CFDE F357          	movff	postinc2,_F_APTOS+566
  4162  0008C8  CFDD F358          	movff	postdec2,_F_APTOS+567
  4163                           
  4164                           ;kernel.c: 57: F_APTOS.FILA_APTOS[task_pos].task_STATE = RUNNING;
  4165  0008CC  0E70               	movlw	112
  4166  0008CE  6EE6               	movwf	postinc1,c
  4167  0008D0  0E00               	movlw	0
  4168  0008D2  6EE6               	movwf	postinc1,c
  4169                           
  4170                           ;stkvar	nojoDispatcher@task_pos @ sp[(-6)+0]
  4171  0008D4  0EFA               	movlw	-6
  4172  0008D6  CFE3 FFE6          	movff	plusw1,postinc1
  4173  0008DA  CFE3 FFE6          	movff	plusw1,postinc1
  4174  0008DE  EC10  F016         	call	___wmul	;wreg free
  4175  0008E2  0E29               	movlw	low (_F_APTOS+8)
  4176  0008E4  244F               	addwf	btemp,w,c
  4177  0008E6  6ED9               	movwf	fsr2l,c
  4178  0008E8  0E01               	movlw	high (_F_APTOS+8)
  4179  0008EA  2050               	addwfc	btemp+1,w,c
  4180  0008EC  6EDA               	movwf	fsr2h,c
  4181  0008EE  0E01               	movlw	1
  4182  0008F0  6EDF               	movwf	indf2,c
  4183  0008F2  6AFC               	clrf	stkptr,c	;volatile
  4184  0008F4  0E70               	movlw	112
  4185  0008F6  6EE6               	movwf	postinc1,c
  4186  0008F8  0E00               	movlw	0
  4187  0008FA  6EE6               	movwf	postinc1,c
  4188  0008FC  EE23  F055         	lfsr	2,_F_APTOS+564
  4189  000900  CFDE F050          	movff	postinc2,btemp+1
  4190  000904  CFDD F051          	movff	postdec2,btemp+2
  4191  000908  C050  FFE6         	movff	btemp+1,postinc1
  4192  00090C  C051  FFE6         	movff	btemp+2,postinc1
  4193  000910  EC10  F016         	call	___wmul	;wreg free
  4194  000914  0E2C               	movlw	low (_F_APTOS+11)
  4195  000916  244F               	addwf	btemp,w,c
  4196  000918  6ED9               	movwf	fsr2l,c
  4197  00091A  0E01               	movlw	high (_F_APTOS+11)
  4198  00091C  2050               	addwfc	btemp+1,w,c
  4199  00091E  6EDA               	movwf	fsr2h,c
  4200  000920  50DF               	movf	indf2,w,c
  4201  000922  6E12               	movwf	_tWORK,c
  4202  000924  0E70               	movlw	112
  4203  000926  6EE6               	movwf	postinc1,c
  4204  000928  0E00               	movlw	0
  4205  00092A  6EE6               	movwf	postinc1,c
  4206  00092C  EE23  F055         	lfsr	2,_F_APTOS+564
  4207  000930  CFDE F050          	movff	postinc2,btemp+1
  4208  000934  CFDD F051          	movff	postdec2,btemp+2
  4209  000938  C050  FFE6         	movff	btemp+1,postinc1
  4210  00093C  C051  FFE6         	movff	btemp+2,postinc1
  4211  000940  EC10  F016         	call	___wmul	;wreg free
  4212  000944  0E2D               	movlw	low (_F_APTOS+12)
  4213  000946  244F               	addwf	btemp,w,c
  4214  000948  6ED9               	movwf	fsr2l,c
  4215  00094A  0E01               	movlw	high (_F_APTOS+12)
  4216  00094C  2050               	addwfc	btemp+1,w,c
  4217  00094E  6EDA               	movwf	fsr2h,c
  4218  000950  50DF               	movf	indf2,w,c
  4219  000952  6E11               	movwf	_tBSR,c
  4220  000954  0E70               	movlw	112
  4221  000956  6EE6               	movwf	postinc1,c
  4222  000958  0E00               	movlw	0
  4223  00095A  6EE6               	movwf	postinc1,c
  4224  00095C  EE23  F055         	lfsr	2,_F_APTOS+564
  4225  000960  CFDE F050          	movff	postinc2,btemp+1
  4226  000964  CFDD F051          	movff	postdec2,btemp+2
  4227  000968  C050  FFE6         	movff	btemp+1,postinc1
  4228  00096C  C051  FFE6         	movff	btemp+2,postinc1
  4229  000970  EC10  F016         	call	___wmul	;wreg free
  4230  000974  0E2E               	movlw	low (_F_APTOS+13)
  4231  000976  244F               	addwf	btemp,w,c
  4232  000978  6ED9               	movwf	fsr2l,c
  4233  00097A  0E01               	movlw	high (_F_APTOS+13)
  4234  00097C  2050               	addwfc	btemp+1,w,c
  4235  00097E  6EDA               	movwf	fsr2h,c
  4236  000980  50DF               	movf	indf2,w,c
  4237  000982  6E10               	movwf	_tSTATUS,c
  4238  000984  D0CA               	goto	l3719
  4239  000986                     l80:
  4240  000986  0005               	push		;# 
  4241  000988  0E70               	movlw	112
  4242  00098A  6EE6               	movwf	postinc1,c
  4243  00098C  0E00               	movlw	0
  4244  00098E  6EE6               	movwf	postinc1,c
  4245  000990  EE23  F055         	lfsr	2,_F_APTOS+564
  4246  000994  CFDE F050          	movff	postinc2,btemp+1
  4247  000998  CFDD F051          	movff	postdec2,btemp+2
  4248  00099C  C050  FFE6         	movff	btemp+1,postinc1
  4249  0009A0  C051  FFE6         	movff	btemp+2,postinc1
  4250  0009A4  EC10  F016         	call	___wmul	;wreg free
  4251  0009A8  0E90               	movlw	low (_F_APTOS+111)
  4252  0009AA  244F               	addwf	btemp,w,c
  4253  0009AC  6ED9               	movwf	fsr2l,c
  4254  0009AE  0E01               	movlw	high (_F_APTOS+111)
  4255  0009B0  2050               	addwfc	btemp+1,w,c
  4256  0009B2  6EDA               	movwf	fsr2h,c
  4257  0009B4  06DF               	decf	indf2,f,c
  4258  0009B6  0E70               	movlw	112
  4259  0009B8  6EE6               	movwf	postinc1,c
  4260  0009BA  0E00               	movlw	0
  4261  0009BC  6EE6               	movwf	postinc1,c
  4262  0009BE  EE23  F055         	lfsr	2,_F_APTOS+564
  4263  0009C2  CFDE F050          	movff	postinc2,btemp+1
  4264  0009C6  CFDD F051          	movff	postdec2,btemp+2
  4265  0009CA  C050  FFE6         	movff	btemp+1,postinc1
  4266  0009CE  C051  FFE6         	movff	btemp+2,postinc1
  4267  0009D2  EC10  F016         	call	___wmul	;wreg free
  4268  0009D6  EE23  F055         	lfsr	2,_F_APTOS+564
  4269  0009DA  CFDE F059          	movff	postinc2,btemp+10
  4270  0009DE  CFDD F05A          	movff	postdec2,btemp+11
  4271  0009E2  0E70               	movlw	112
  4272  0009E4  0259               	mulwf	btemp+10,c
  4273  0009E6  CFF3 F057          	movff	prodl,btemp+8
  4274  0009EA  CFF4 F058          	movff	prodh,btemp+9
  4275  0009EE  025A               	mulwf	btemp+11,c
  4276  0009F0  50F3               	movf	prodl,w,c
  4277  0009F2  2658               	addwf	btemp+9,f,c
  4278  0009F4  0E90               	movlw	low (_F_APTOS+111)
  4279  0009F6  2457               	addwf	btemp+8,w,c
  4280  0009F8  6ED9               	movwf	fsr2l,c
  4281  0009FA  0E01               	movlw	high (_F_APTOS+111)
  4282  0009FC  2058               	addwfc	btemp+9,w,c
  4283  0009FE  6EDA               	movwf	fsr2h,c
  4284  000A00  50DF               	movf	indf2,w,c
  4285  000A02  0D03               	mullw	3
  4286  000A04  0E21               	movlw	low _F_APTOS
  4287  000A06  6E59               	movwf	btemp+10,c
  4288  000A08  0E01               	movlw	high _F_APTOS
  4289  000A0A  6E5A               	movwf	btemp+11,c
  4290  000A0C  0E14               	movlw	20
  4291  000A0E  2659               	addwf	btemp+10,f,c
  4292  000A10  0E00               	movlw	0
  4293  000A12  225A               	addwfc	btemp+11,f,c
  4294  000A14  50F3               	movf	prodl,w,c
  4295  000A16  2659               	addwf	btemp+10,f,c
  4296  000A18  50F4               	movf	prodh,w,c
  4297  000A1A  225A               	addwfc	btemp+11,f,c
  4298  000A1C  504F               	movf	btemp,w,c
  4299  000A1E  2459               	addwf	btemp+10,w,c
  4300  000A20  6ED9               	movwf	fsr2l,c
  4301  000A22  5050               	movf	btemp+1,w,c
  4302  000A24  205A               	addwfc	btemp+11,w,c
  4303  000A26  6EDA               	movwf	fsr2h,c
  4304  000A28  50DF               	movf	223,w,c
  4305  000A2A  0B1F               	andlw	31
  4306  000A2C  6EFF               	movwf	tosu,c	;volatile
  4307  000A2E  0E70               	movlw	112
  4308  000A30  6EE6               	movwf	postinc1,c
  4309  000A32  0E00               	movlw	0
  4310  000A34  6EE6               	movwf	postinc1,c
  4311  000A36  EE23  F055         	lfsr	2,_F_APTOS+564
  4312  000A3A  CFDE F050          	movff	postinc2,btemp+1
  4313  000A3E  CFDD F051          	movff	postdec2,btemp+2
  4314  000A42  C050  FFE6         	movff	btemp+1,postinc1
  4315  000A46  C051  FFE6         	movff	btemp+2,postinc1
  4316  000A4A  EC10  F016         	call	___wmul	;wreg free
  4317  000A4E  EE23  F055         	lfsr	2,_F_APTOS+564
  4318  000A52  CFDE F059          	movff	postinc2,btemp+10
  4319  000A56  CFDD F05A          	movff	postdec2,btemp+11
  4320  000A5A  0E70               	movlw	112
  4321  000A5C  0259               	mulwf	btemp+10,c
  4322  000A5E  CFF3 F057          	movff	prodl,btemp+8
  4323  000A62  CFF4 F058          	movff	prodh,btemp+9
  4324  000A66  025A               	mulwf	btemp+11,c
  4325  000A68  50F3               	movf	prodl,w,c
  4326  000A6A  2658               	addwf	btemp+9,f,c
  4327  000A6C  0E90               	movlw	low (_F_APTOS+111)
  4328  000A6E  2457               	addwf	btemp+8,w,c
  4329  000A70  6ED9               	movwf	fsr2l,c
  4330  000A72  0E01               	movlw	high (_F_APTOS+111)
  4331  000A74  2058               	addwfc	btemp+9,w,c
  4332  000A76  6EDA               	movwf	fsr2h,c
  4333  000A78  50DF               	movf	indf2,w,c
  4334  000A7A  0D03               	mullw	3
  4335  000A7C  0E21               	movlw	low _F_APTOS
  4336  000A7E  6E59               	movwf	btemp+10,c
  4337  000A80  0E01               	movlw	high _F_APTOS
  4338  000A82  6E5A               	movwf	btemp+11,c
  4339  000A84  0E13               	movlw	19
  4340  000A86  2659               	addwf	btemp+10,f,c
  4341  000A88  0E00               	movlw	0
  4342  000A8A  225A               	addwfc	btemp+11,f,c
  4343  000A8C  50F3               	movf	prodl,w,c
  4344  000A8E  2659               	addwf	btemp+10,f,c
  4345  000A90  50F4               	movf	prodh,w,c
  4346  000A92  225A               	addwfc	btemp+11,f,c
  4347  000A94  504F               	movf	btemp,w,c
  4348  000A96  2459               	addwf	btemp+10,w,c
  4349  000A98  6ED9               	movwf	fsr2l,c
  4350  000A9A  5050               	movf	btemp+1,w,c
  4351  000A9C  205A               	addwfc	btemp+11,w,c
  4352  000A9E  6EDA               	movwf	fsr2h,c
  4353  000AA0  50DF               	movf	indf2,w,c
  4354  000AA2  6EFE               	movwf	tosh,c	;volatile
  4355  000AA4  0E70               	movlw	112
  4356  000AA6  6EE6               	movwf	postinc1,c
  4357  000AA8  0E00               	movlw	0
  4358  000AAA  6EE6               	movwf	postinc1,c
  4359  000AAC  EE23  F055         	lfsr	2,_F_APTOS+564
  4360  000AB0  CFDE F050          	movff	postinc2,btemp+1
  4361  000AB4  CFDD F051          	movff	postdec2,btemp+2
  4362  000AB8  C050  FFE6         	movff	btemp+1,postinc1
  4363  000ABC  C051  FFE6         	movff	btemp+2,postinc1
  4364  000AC0  EC10  F016         	call	___wmul	;wreg free
  4365  000AC4  EE23  F055         	lfsr	2,_F_APTOS+564
  4366  000AC8  CFDE F059          	movff	postinc2,btemp+10
  4367  000ACC  CFDD F05A          	movff	postdec2,btemp+11
  4368  000AD0  0E70               	movlw	112
  4369  000AD2  0259               	mulwf	btemp+10,c
  4370  000AD4  CFF3 F057          	movff	prodl,btemp+8
  4371  000AD8  CFF4 F058          	movff	prodh,btemp+9
  4372  000ADC  025A               	mulwf	btemp+11,c
  4373  000ADE  50F3               	movf	prodl,w,c
  4374  000AE0  2658               	addwf	btemp+9,f,c
  4375  000AE2  0E90               	movlw	low (_F_APTOS+111)
  4376  000AE4  2457               	addwf	btemp+8,w,c
  4377  000AE6  6ED9               	movwf	fsr2l,c
  4378  000AE8  0E01               	movlw	high (_F_APTOS+111)
  4379  000AEA  2058               	addwfc	btemp+9,w,c
  4380  000AEC  6EDA               	movwf	fsr2h,c
  4381  000AEE  50DF               	movf	indf2,w,c
  4382  000AF0  0D03               	mullw	3
  4383  000AF2  0E21               	movlw	low _F_APTOS
  4384  000AF4  6E59               	movwf	btemp+10,c
  4385  000AF6  0E01               	movlw	high _F_APTOS
  4386  000AF8  6E5A               	movwf	btemp+11,c
  4387  000AFA  0E12               	movlw	18
  4388  000AFC  2659               	addwf	btemp+10,f,c
  4389  000AFE  0E00               	movlw	0
  4390  000B00  225A               	addwfc	btemp+11,f,c
  4391  000B02  50F3               	movf	prodl,w,c
  4392  000B04  2659               	addwf	btemp+10,f,c
  4393  000B06  50F4               	movf	prodh,w,c
  4394  000B08  225A               	addwfc	btemp+11,f,c
  4395  000B0A  504F               	movf	btemp,w,c
  4396  000B0C  2459               	addwf	btemp+10,w,c
  4397  000B0E  6ED9               	movwf	fsr2l,c
  4398  000B10  5050               	movf	btemp+1,w,c
  4399  000B12  205A               	addwfc	btemp+11,w,c
  4400  000B14  6EDA               	movwf	fsr2h,c
  4401  000B16  50DF               	movf	indf2,w,c
  4402  000B18  6EFD               	movwf	tosl,c	;volatile
  4403  000B1A                     l3719:
  4404  000B1A  0E70               	movlw	112
  4405  000B1C  6EE6               	movwf	postinc1,c
  4406  000B1E  0E00               	movlw	0
  4407  000B20  6EE6               	movwf	postinc1,c
  4408  000B22  EE23  F055         	lfsr	2,_F_APTOS+564
  4409  000B26  CFDE F050          	movff	postinc2,btemp+1
  4410  000B2A  CFDD F051          	movff	postdec2,btemp+2
  4411  000B2E  C050  FFE6         	movff	btemp+1,postinc1
  4412  000B32  C051  FFE6         	movff	btemp+2,postinc1
  4413  000B36  EC10  F016         	call	___wmul	;wreg free
  4414  000B3A  0E90               	movlw	low (_F_APTOS+111)
  4415  000B3C  244F               	addwf	btemp,w,c
  4416  000B3E  6ED9               	movwf	fsr2l,c
  4417  000B40  0E01               	movlw	high (_F_APTOS+111)
  4418  000B42  2050               	addwfc	btemp+1,w,c
  4419  000B44  6EDA               	movwf	fsr2h,c
  4420  000B46  50DF               	movf	indf2,w,c
  4421  000B48  A4D8               	btfss	status,2,c
  4422  000B4A  D71D               	goto	l80
  4423  000B4C  C011  FFE0         	movff	_tBSR,bsr	;# 
  4424  000B50  C010  FFD8         	movff	_tSTATUS,status	;# 
  4425  000B54  5312               	movf	_tWORK,f,b	;# 
  4426                           
  4427                           ;kernel.c: 60: INTCONbits.GIE = 1;
  4428  000B56  8EF2               	bsf	intcon,7,c	;volatile
  4429                           
  4430                           ; _nojoDispatcher: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1
      +                          , argsize = 1, vargsize = 0
  4431  000B58  0EFB               	movlw	251
  4432  000B5A  26E1               	addwf	fsr1l,f,c
  4433  000B5C  0EFF               	movlw	255
  4434  000B5E  22E2               	addwfc	fsr1h,f,c
  4435  000B60  0012               	return		;funcret
  4436  000B62                     __end_of_nojoDispatcher:
  4437                           	opt stack 0
  4438                           tosu	equ	0xFFF
  4439                           tosh	equ	0xFFE
  4440                           tosl	equ	0xFFD
  4441                           stkptr	equ	0xFFC
  4442                           tblptru	equ	0xFF8
  4443                           tblptrh	equ	0xFF7
  4444                           tblptrl	equ	0xFF6
  4445                           tablat	equ	0xFF5
  4446                           prodh	equ	0xFF4
  4447                           prodl	equ	0xFF3
  4448                           intcon	equ	0xFF2
  4449                           postinc0	equ	0xFEE
  4450                           fsr0h	equ	0xFEA
  4451                           fsr0l	equ	0xFE9
  4452                           wreg	equ	0xFE8
  4453                           postinc1	equ	0xFE6
  4454                           postdec1	equ	0xFE5
  4455                           plusw1	equ	0xFE3
  4456                           fsr1h	equ	0xFE2
  4457                           fsr1l	equ	0xFE1
  4458                           bsr	equ	0xFE0
  4459                           indf2	equ	0xFDF
  4460                           postinc2	equ	0xFDE
  4461                           postdec2	equ	0xFDD
  4462                           plusw2	equ	0xFDB
  4463                           fsr2h	equ	0xFDA
  4464                           fsr2l	equ	0xFD9
  4465                           status	equ	0xFD8
  4466                           
  4467 ;; *************** function _RR_scheduler *****************
  4468 ;; Defined at:
  4469 ;;		line 18 in file "scheduler.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;		None
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;  pos_next_tas    4  [STACK] unsigned long 
  4474 ;;  i               4  [STACK] unsigned long 
  4475 ;;  installed       4  [STACK] unsigned long 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  4  [STACK] unsigned long 
  4478 ;; Registers used:
  4479 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+8, btemp+9, btemp+10, 
      +btemp+11, prodl, prodh
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4485 ;;      Params:         0       0       0       0       0       0       0
  4486 ;;      Locals:         0       0       0       0       0       0       0
  4487 ;;      Temps:          0       0       0       0       0       0       0
  4488 ;;      Totals:         0       0       0       0       0       0       0
  4489 ;;Total ram usage:        0 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; Hardware stack levels required when called:    5
  4492 ;; This function calls:
  4493 ;;		___llmod
  4494 ;;		___wmul
  4495 ;; This function is called by:
  4496 ;;		_nojoDispatcher
  4497 ;; This function uses a reentrant model
  4498 ;;
  4499                           
  4500                           	psect	text23
  4501  002216                     __ptext23:
  4502                           	opt stack 0
  4503  002216                     _RR_scheduler:
  4504                           	opt stack 0
  4505                           
  4506                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0
  4507  002216  0E0C               	movlw	12
  4508  002218  26E1               	addwf	fsr1l,f,c
  4509  00221A  0E00               	movlw	0
  4510  00221C  22E2               	addwfc	fsr1h,f,c
  4511                           
  4512                           ;scheduler.c: 20: u_int i = F_APTOS.task_running, pos_next_task = 0, installed = F_APTOS
      +                          .tasks_installed;
  4513                           
  4514                           ;incstack = 0
  4515  00221E  C355  F057         	movff	_F_APTOS+564,btemp+8
  4516  002222  C356  F058         	movff	_F_APTOS+565,btemp+9
  4517  002226  C357  F059         	movff	_F_APTOS+566,btemp+10
  4518  00222A  C358  F05A         	movff	_F_APTOS+567,btemp+11
  4519                           
  4520                           ;stkvar	RR_scheduler@i @ sp[(-12)+4]
  4521  00222E  0EF8               	movlw	-8
  4522  002230  C057  FFE3         	movff	btemp+8,plusw1
  4523  002234  0EF9               	movlw	-7
  4524  002236  C058  FFE3         	movff	btemp+9,plusw1
  4525  00223A  0EFA               	movlw	-6
  4526  00223C  C059  FFE3         	movff	btemp+10,plusw1
  4527  002240  0EFB               	movlw	-5
  4528  002242  C05A  FFE3         	movff	btemp+11,plusw1
  4529  002246  C351  F057         	movff	_F_APTOS+560,btemp+8
  4530  00224A  C352  F058         	movff	_F_APTOS+561,btemp+9
  4531  00224E  C353  F059         	movff	_F_APTOS+562,btemp+10
  4532  002252  C354  F05A         	movff	_F_APTOS+563,btemp+11
  4533                           
  4534                           ;stkvar	RR_scheduler@installed @ sp[(-12)+8]
  4535  002256  0EFC               	movlw	-4
  4536  002258  C057  FFE3         	movff	btemp+8,plusw1
  4537  00225C  0EFD               	movlw	-3
  4538  00225E  C058  FFE3         	movff	btemp+9,plusw1
  4539  002262  0EFE               	movlw	-2
  4540  002264  C059  FFE3         	movff	btemp+10,plusw1
  4541  002268  0EFF               	movlw	-1
  4542  00226A  C05A  FFE3         	movff	btemp+11,plusw1
  4543  00226E                     l3557:
  4544                           
  4545                           ;scheduler.c: 23: i++;
  4546                           ;stkvar	RR_scheduler@i @ sp[(-12)+4]
  4547  00226E  50E1               	movf	fsr1l,w,c
  4548  002270  0FF8               	addlw	-8
  4549  002272  6ED9               	movwf	fsr2l,c
  4550  002274  50E2               	movf	fsr1h,w,c
  4551  002276  6EDA               	movwf	fsr2h,c
  4552  002278  0EFF               	movlw	255
  4553  00227A  22DA               	addwfc	fsr2h,f,c
  4554  00227C  2ADE               	incf	postinc2,f,c
  4555  00227E  0E00               	movlw	0
  4556  002280  22DE               	addwfc	postinc2,f,c
  4557  002282  22DE               	addwfc	postinc2,f,c
  4558  002284  22DE               	addwfc	postinc2,f,c
  4559                           
  4560                           ;scheduler.c: 24: pos_next_task = i % (installed);
  4561                           ;stkvar	RR_scheduler@installed @ sp[(-12)+8]
  4562  002286  0EFC               	movlw	-4
  4563  002288  CFE3 FFE6          	movff	plusw1,postinc1
  4564  00228C  CFE3 FFE6          	movff	plusw1,postinc1
  4565  002290  CFE3 FFE6          	movff	plusw1,postinc1
  4566  002294  CFE3 FFE6          	movff	plusw1,postinc1
  4567                           
  4568                           ;stkvar	RR_scheduler@i @ sp[(-16)+4]
  4569  002298  0EF4               	movlw	-12
  4570  00229A  CFE3 FFE6          	movff	plusw1,postinc1
  4571  00229E  CFE3 FFE6          	movff	plusw1,postinc1
  4572  0022A2  CFE3 FFE6          	movff	plusw1,postinc1
  4573  0022A6  CFE3 FFE6          	movff	plusw1,postinc1
  4574  0022AA  EC05  F012         	call	___llmod	;wreg free
  4575                           
  4576                           ;stkvar	RR_scheduler@pos_next_task @ sp[(-12)+0]
  4577  0022AE  0EF4               	movlw	-12
  4578  0022B0  C04F  FFE3         	movff	btemp,plusw1
  4579  0022B4  0EF5               	movlw	-11
  4580  0022B6  C050  FFE3         	movff	btemp+1,plusw1
  4581  0022BA  0EF6               	movlw	-10
  4582  0022BC  C051  FFE3         	movff	btemp+2,plusw1
  4583  0022C0  0EF7               	movlw	-9
  4584  0022C2  C052  FFE3         	movff	btemp+3,plusw1
  4585                           
  4586                           ;scheduler.c: 25: }while (F_APTOS.FILA_APTOS[pos_next_task].task_STATE != READY);
  4587  0022C6  0E70               	movlw	112
  4588  0022C8  6EE6               	movwf	postinc1,c
  4589  0022CA  0E00               	movlw	0
  4590  0022CC  6EE6               	movwf	postinc1,c
  4591                           
  4592                           ;stkvar	RR_scheduler@pos_next_task @ sp[(-14)+0]
  4593  0022CE  0EF2               	movlw	-14
  4594  0022D0  CFE3 FFE6          	movff	plusw1,postinc1
  4595  0022D4  CFE3 FFE6          	movff	plusw1,postinc1
  4596  0022D8  EC10  F016         	call	___wmul	;wreg free
  4597  0022DC  0E29               	movlw	low (_F_APTOS+8)
  4598  0022DE  244F               	addwf	btemp,w,c
  4599  0022E0  6ED9               	movwf	fsr2l,c
  4600  0022E2  0E01               	movlw	high (_F_APTOS+8)
  4601  0022E4  2050               	addwfc	btemp+1,w,c
  4602  0022E6  6EDA               	movwf	fsr2h,c
  4603  0022E8  50DF               	movf	indf2,w,c
  4604  0022EA  A4D8               	btfss	status,2,c
  4605  0022EC  D7C0               	goto	l3557
  4606                           
  4607                           ;scheduler.c: 27: return pos_next_task;
  4608                           ;stkvar	RR_scheduler@pos_next_task @ sp[(-12)+0]
  4609  0022EE  0EF4               	movlw	-12
  4610  0022F0  CFE3 F04F          	movff	plusw1,btemp
  4611  0022F4  0EF5               	movlw	-11
  4612  0022F6  CFE3 F050          	movff	plusw1,btemp+1
  4613  0022FA  0EF6               	movlw	-10
  4614  0022FC  CFE3 F051          	movff	plusw1,btemp+2
  4615  002300  0EF7               	movlw	-9
  4616  002302  CFE3 F052          	movff	plusw1,btemp+3
  4617                           
  4618                           ; _RR_scheduler: autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0,
      +                           argsize = 0, vargsize = 0
  4619  002306  0EF4               	movlw	244
  4620  002308  26E1               	addwf	fsr1l,f,c
  4621  00230A  0EFF               	movlw	255
  4622  00230C  22E2               	addwfc	fsr1h,f,c
  4623  00230E  0012               	return		;funcret
  4624  002310                     __end_of_RR_scheduler:
  4625                           	opt stack 0
  4626                           tosu	equ	0xFFF
  4627                           tosh	equ	0xFFE
  4628                           tosl	equ	0xFFD
  4629                           stkptr	equ	0xFFC
  4630                           tblptru	equ	0xFF8
  4631                           tblptrh	equ	0xFF7
  4632                           tblptrl	equ	0xFF6
  4633                           tablat	equ	0xFF5
  4634                           prodh	equ	0xFF4
  4635                           prodl	equ	0xFF3
  4636                           intcon	equ	0xFF2
  4637                           postinc0	equ	0xFEE
  4638                           fsr0h	equ	0xFEA
  4639                           fsr0l	equ	0xFE9
  4640                           wreg	equ	0xFE8
  4641                           postinc1	equ	0xFE6
  4642                           postdec1	equ	0xFE5
  4643                           plusw1	equ	0xFE3
  4644                           fsr1h	equ	0xFE2
  4645                           fsr1l	equ	0xFE1
  4646                           bsr	equ	0xFE0
  4647                           indf2	equ	0xFDF
  4648                           postinc2	equ	0xFDE
  4649                           postdec2	equ	0xFDD
  4650                           plusw2	equ	0xFDB
  4651                           fsr2h	equ	0xFDA
  4652                           fsr2l	equ	0xFD9
  4653                           status	equ	0xFD8
  4654                           
  4655 ;; *************** function ___llmod *****************
  4656 ;; Defined at:
  4657 ;;		line 8 in file "/Applications/microchip/xc8/v1.44/sources/common/llmod.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;  dividend        4  [STACK] unsigned long 
  4660 ;;  divisor         4  [STACK] unsigned long 
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;  counter         1  [STACK] unsigned char 
  4663 ;; Return value:  Size  Location     Type
  4664 ;;                  4  [STACK] unsigned long 
  4665 ;; Registers used:
  4666 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3
  4667 ;; Tracked objects:
  4668 ;;		On entry : 0/0
  4669 ;;		On exit  : 0/0
  4670 ;;		Unchanged: 0/0
  4671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4672 ;;      Params:         0       0       0       0       0       0       0
  4673 ;;      Locals:         0       0       0       0       0       0       0
  4674 ;;      Temps:          0       0       0       0       0       0       0
  4675 ;;      Totals:         0       0       0       0       0       0       0
  4676 ;;Total ram usage:        0 bytes
  4677 ;; Hardware stack levels used:    1
  4678 ;; Hardware stack levels required when called:    4
  4679 ;; This function calls:
  4680 ;;		Nothing
  4681 ;; This function is called by:
  4682 ;;		_pipe_read
  4683 ;;		_pipe_write
  4684 ;;		_RR_scheduler
  4685 ;; This function uses a reentrant model
  4686 ;;
  4687                           
  4688                           	psect	text24
  4689  00240A                     __ptext24:
  4690                           	opt stack 0
  4691  00240A                     ___llmod:
  4692                           	opt stack 0
  4693                           
  4694                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8, argsize = 8 var
      +                          gsize = 0, retsize = 0
  4695  00240A  52E6               	movf	postinc1,f,c
  4696                           
  4697                           ;stkvar	___llmod@divisor @ sp[(-1)+-8]
  4698                           
  4699                           ;incstack = 0
  4700  00240C  0EF7               	movlw	-9
  4701  00240E  50E3               	movf	plusw1,w,c
  4702  002410  E10A               	bnz	u273_20
  4703  002412  0EF8               	movlw	-8
  4704  002414  50E3               	movf	plusw1,w,c
  4705  002416  E107               	bnz	u273_20
  4706  002418  0EF9               	movlw	-7
  4707  00241A  50E3               	movf	plusw1,w,c
  4708  00241C  E104               	bnz	u273_20
  4709  00241E  0EFA               	movlw	-6
  4710  002420  50E3               	movf	plusw1,w,c
  4711  002422  B4D8               	btfsc	status,2,c
  4712  002424  D04C               	goto	u276_20
  4713  002426                     u273_20:
  4714                           
  4715                           ;stkvar	___llmod@counter @ sp[(-1)+0]
  4716  002426  0EFF               	movlw	-1
  4717  002428  6AE3               	clrf	plusw1,c
  4718  00242A  D00A               	goto	L1
  4719  00242C                     l3499:
  4720                           
  4721                           ;stkvar	___llmod@divisor @ sp[(-1)+-8]
  4722  00242C  90D8               	bcf	status,0,c
  4723  00242E  0EF7               	movlw	-9
  4724  002430  36E3               	rlcf	plusw1,f,c
  4725  002432  0EF8               	movlw	-8
  4726  002434  36E3               	rlcf	plusw1,f,c
  4727  002436  0EF9               	movlw	-7
  4728  002438  36E3               	rlcf	plusw1,f,c
  4729  00243A  0EFA               	movlw	-6
  4730  00243C  36E3               	rlcf	plusw1,f,c
  4731                           
  4732                           ;stkvar	___llmod@counter @ sp[(-1)+0]
  4733  00243E  0EFF               	movlw	-1
  4734  002440                     L1:
  4735  002440  2AE3               	incf	plusw1,f,c
  4736                           
  4737                           ;stkvar	___llmod@divisor @ sp[(-1)+-8]
  4738  002442  0EFA               	movlw	-6
  4739  002444  AEE3               	btfss	plusw1,7,c
  4740  002446  D7F2               	goto	l3499
  4741  002448                     u274_20:
  4742                           
  4743                           ;stkvar	___llmod@divisor @ sp[(-1)+-8]
  4744                           ;stkvar	___llmod@dividend @ sp[(-1)+-4]
  4745  002448  50E1               	movf	fsr1l,w,c
  4746  00244A  0FFB               	addlw	-5
  4747  00244C  6ED9               	movwf	fsr2l,c
  4748  00244E  50E2               	movf	fsr1h,w,c
  4749  002450  6EDA               	movwf	fsr2h,c
  4750  002452  0EFF               	movlw	255
  4751  002454  22DA               	addwfc	fsr2h,f,c
  4752  002456  0EF7               	movlw	-9
  4753  002458  50E3               	movf	plusw1,w,c
  4754  00245A  5CDE               	subwf	postinc2,w,c
  4755  00245C  0EF8               	movlw	-8
  4756  00245E  50E3               	movf	plusw1,w,c
  4757  002460  58DE               	subwfb	postinc2,w,c
  4758  002462  0EF9               	movlw	-7
  4759  002464  50E3               	movf	plusw1,w,c
  4760  002466  58DE               	subwfb	postinc2,w,c
  4761  002468  0EFA               	movlw	-6
  4762  00246A  50E3               	movf	plusw1,w,c
  4763  00246C  58DE               	subwfb	postinc2,w,c
  4764  00246E  A0D8               	btfss	status,0,c
  4765  002470  D013               	goto	l3507
  4766                           
  4767                           ;stkvar	___llmod@divisor @ sp[(-1)+-8]
  4768                           ;stkvar	___llmod@dividend @ sp[(-1)+-4]
  4769  002472  50E1               	movf	fsr1l,w,c
  4770  002474  0FFB               	addlw	-5
  4771  002476  6ED9               	movwf	fsr2l,c
  4772  002478  50E2               	movf	fsr1h,w,c
  4773  00247A  6EDA               	movwf	fsr2h,c
  4774  00247C  0EFF               	movlw	255
  4775  00247E  22DA               	addwfc	fsr2h,f,c
  4776  002480  0EF7               	movlw	-9
  4777  002482  50E3               	movf	plusw1,w,c
  4778  002484  5EDE               	subwf	postinc2,f,c
  4779  002486  0EF8               	movlw	-8
  4780  002488  50E3               	movf	plusw1,w,c
  4781  00248A  5ADE               	subwfb	postinc2,f,c
  4782  00248C  0EF9               	movlw	-7
  4783  00248E  50E3               	movf	plusw1,w,c
  4784  002490  5ADE               	subwfb	postinc2,f,c
  4785  002492  0EFA               	movlw	-6
  4786  002494  50E3               	movf	plusw1,w,c
  4787  002496  5ADE               	subwfb	postinc2,f,c
  4788  002498                     l3507:
  4789                           
  4790                           ;stkvar	___llmod@divisor @ sp[(-1)+-8]
  4791  002498  90D8               	bcf	status,0,c
  4792  00249A  0EFA               	movlw	-6
  4793  00249C  32E3               	rrcf	plusw1,f,c
  4794  00249E  0EF9               	movlw	-7
  4795  0024A0  32E3               	rrcf	plusw1,f,c
  4796  0024A2  0EF8               	movlw	-8
  4797  0024A4  32E3               	rrcf	plusw1,f,c
  4798  0024A6  0EF7               	movlw	-9
  4799  0024A8  32E3               	rrcf	plusw1,f,c
  4800                           
  4801                           ;stkvar	___llmod@counter @ sp[(-1)+0]
  4802  0024AA  0EFF               	movlw	-1
  4803  0024AC  50E3               	movf	plusw1,w,c
  4804  0024AE  6E4F               	movwf	btemp,c
  4805  0024B0  0E01               	movlw	1
  4806  0024B2  5E4F               	subwf	btemp,f,c
  4807  0024B4  0EFF               	movlw	-1
  4808  0024B6  C04F  FFE3         	movff	btemp,plusw1
  4809  0024BA  A4D8               	btfss	status,2,c
  4810  0024BC  D7C5               	goto	u274_20
  4811  0024BE                     u276_20:
  4812                           
  4813                           ;stkvar	___llmod@dividend @ sp[(-1)+-4]
  4814  0024BE  0EFB               	movlw	-5
  4815  0024C0  CFE3 F04F          	movff	plusw1,btemp
  4816  0024C4  0EFC               	movlw	-4
  4817  0024C6  CFE3 F050          	movff	plusw1,btemp+1
  4818  0024CA  0EFD               	movlw	-3
  4819  0024CC  CFE3 F051          	movff	plusw1,btemp+2
  4820  0024D0  0EFE               	movlw	-2
  4821  0024D2  CFE3 F052          	movff	plusw1,btemp+3
  4822                           
  4823                           ; ___llmod: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8, argsi
      +                          ze = 8, vargsize = 0
  4824  0024D6  0EF7               	movlw	247
  4825  0024D8  26E1               	addwf	fsr1l,f,c
  4826  0024DA  0EFF               	movlw	255
  4827  0024DC  22E2               	addwfc	fsr1h,f,c
  4828  0024DE  0012               	return		;funcret
  4829  0024E0                     __end_of___llmod:
  4830                           	opt stack 0
  4831                           tosu	equ	0xFFF
  4832                           tosh	equ	0xFFE
  4833                           tosl	equ	0xFFD
  4834                           stkptr	equ	0xFFC
  4835                           tblptru	equ	0xFF8
  4836                           tblptrh	equ	0xFF7
  4837                           tblptrl	equ	0xFF6
  4838                           tablat	equ	0xFF5
  4839                           prodh	equ	0xFF4
  4840                           prodl	equ	0xFF3
  4841                           intcon	equ	0xFF2
  4842                           postinc0	equ	0xFEE
  4843                           fsr0h	equ	0xFEA
  4844                           fsr0l	equ	0xFE9
  4845                           wreg	equ	0xFE8
  4846                           postinc1	equ	0xFE6
  4847                           postdec1	equ	0xFE5
  4848                           plusw1	equ	0xFE3
  4849                           fsr1h	equ	0xFE2
  4850                           fsr1l	equ	0xFE1
  4851                           bsr	equ	0xFE0
  4852                           indf2	equ	0xFDF
  4853                           postinc2	equ	0xFDE
  4854                           postdec2	equ	0xFDD
  4855                           plusw2	equ	0xFDB
  4856                           fsr2h	equ	0xFDA
  4857                           fsr2l	equ	0xFD9
  4858                           status	equ	0xFD8
  4859                           
  4860 ;; *************** function _round *****************
  4861 ;; Defined at:
  4862 ;;		line 6 in file "/Applications/microchip/xc8/v1.44/sources/common/round.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;  x               3  [STACK] unsigned long 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  f               3  [STACK] unsigned long 
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  3  [STACK] unsigned long 
  4869 ;; Registers used:
  4870 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4876 ;;      Params:         0       0       0       0       0       0       0
  4877 ;;      Locals:         0       0       0       0       0       0       0
  4878 ;;      Temps:          0       0       0       0       0       0       0
  4879 ;;      Totals:         0       0       0       0       0       0       0
  4880 ;;Total ram usage:        0 bytes
  4881 ;; Hardware stack levels used:    1
  4882 ;; Hardware stack levels required when called:    7
  4883 ;; This function calls:
  4884 ;;		___ftadd
  4885 ;;		___ftsub
  4886 ;;		_trunc
  4887 ;; This function is called by:
  4888 ;;		_cloro
  4889 ;;		_ph
  4890 ;; This function uses a reentrant model
  4891 ;;
  4892                           
  4893                           	psect	text25
  4894  002CB6                     __ptext25:
  4895                           	opt stack 0
  4896  002CB6                     _round:
  4897                           	opt stack 0
  4898                           
  4899                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
  4900  002CB6  52E6               	movf	postinc1,f,c
  4901  002CB8  52E6               	movf	postinc1,f,c
  4902  002CBA  52E6               	movf	postinc1,f,c
  4903                           
  4904                           ;stkvar	round@x @ sp[(-3)+-3]
  4905                           
  4906                           ;incstack = 0
  4907  002CBC  0EFA               	movlw	-6
  4908  002CBE  CFE3 FFE6          	movff	plusw1,postinc1
  4909  002CC2  CFE3 FFE6          	movff	plusw1,postinc1
  4910  002CC6  CFE3 FFE6          	movff	plusw1,postinc1
  4911  002CCA  EC86  F013         	call	_trunc	;wreg free
  4912  002CCE  C04F  FFE6         	movff	btemp,postinc1
  4913  002CD2  C050  FFE6         	movff	btemp+1,postinc1
  4914  002CD6  C051  FFE6         	movff	btemp+2,postinc1
  4915                           
  4916                           ;stkvar	round@x @ sp[(-6)+-3]
  4917  002CDA  0EF7               	movlw	-9
  4918  002CDC  CFE3 FFE6          	movff	plusw1,postinc1
  4919  002CE0  CFE3 FFE6          	movff	plusw1,postinc1
  4920  002CE4  CFE3 FFE6          	movff	plusw1,postinc1
  4921  002CE8  EC60  F018         	call	___ftsub	;wreg free
  4922                           
  4923                           ;stkvar	round@f @ sp[(-3)+0]
  4924  002CEC  0EFD               	movlw	-3
  4925  002CEE  C04F  FFE3         	movff	btemp,plusw1
  4926  002CF2  0EFE               	movlw	-2
  4927  002CF4  C050  FFE3         	movff	btemp+1,plusw1
  4928  002CF8  0EFF               	movlw	-1
  4929  002CFA  C051  FFE3         	movff	btemp+2,plusw1
  4930                           
  4931                           ;stkvar	round@f @ sp[(-3)+0]
  4932  002CFE  0EFD               	movlw	-3
  4933  002D00  CFE3 FFE6          	movff	plusw1,postinc1
  4934  002D04  CFE3 FFE6          	movff	plusw1,postinc1
  4935  002D08  CFE3 FFE6          	movff	plusw1,postinc1
  4936                           
  4937                           ;stkvar	round@x @ sp[(-6)+-3]
  4938  002D0C  0EF7               	movlw	-9
  4939  002D0E  CFE3 FFE6          	movff	plusw1,postinc1
  4940  002D12  CFE3 FFE6          	movff	plusw1,postinc1
  4941  002D16  CFE3 FFE6          	movff	plusw1,postinc1
  4942  002D1A  ECB1  F005         	call	___ftadd	;wreg free
  4943                           
  4944                           ;stkvar	round@x @ sp[(-3)+-3]
  4945  002D1E  0EFA               	movlw	-6
  4946  002D20  C04F  FFE3         	movff	btemp,plusw1
  4947  002D24  0EFB               	movlw	-5
  4948  002D26  C050  FFE3         	movff	btemp+1,plusw1
  4949  002D2A  0EFC               	movlw	-4
  4950  002D2C  C051  FFE3         	movff	btemp+2,plusw1
  4951                           
  4952                           ;stkvar	round@x @ sp[(-3)+-3]
  4953  002D30  0EFA               	movlw	-6
  4954  002D32  CFE3 FFE6          	movff	plusw1,postinc1
  4955  002D36  CFE3 FFE6          	movff	plusw1,postinc1
  4956  002D3A  CFE3 FFE6          	movff	plusw1,postinc1
  4957  002D3E  EC86  F013         	call	_trunc	;wreg free
  4958                           
  4959                           ; _round: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize
      +                           = 3, vargsize = 0
  4960  002D42  0EFA               	movlw	250
  4961  002D44  26E1               	addwf	fsr1l,f,c
  4962  002D46  0EFF               	movlw	255
  4963  002D48  22E2               	addwfc	fsr1h,f,c
  4964  002D4A  0012               	return		;funcret
  4965  002D4C                     __end_of_round:
  4966                           	opt stack 0
  4967                           tosu	equ	0xFFF
  4968                           tosh	equ	0xFFE
  4969                           tosl	equ	0xFFD
  4970                           stkptr	equ	0xFFC
  4971                           tblptru	equ	0xFF8
  4972                           tblptrh	equ	0xFF7
  4973                           tblptrl	equ	0xFF6
  4974                           tablat	equ	0xFF5
  4975                           prodh	equ	0xFF4
  4976                           prodl	equ	0xFF3
  4977                           intcon	equ	0xFF2
  4978                           postinc0	equ	0xFEE
  4979                           fsr0h	equ	0xFEA
  4980                           fsr0l	equ	0xFE9
  4981                           wreg	equ	0xFE8
  4982                           postinc1	equ	0xFE6
  4983                           postdec1	equ	0xFE5
  4984                           plusw1	equ	0xFE3
  4985                           fsr1h	equ	0xFE2
  4986                           fsr1l	equ	0xFE1
  4987                           bsr	equ	0xFE0
  4988                           indf2	equ	0xFDF
  4989                           postinc2	equ	0xFDE
  4990                           postdec2	equ	0xFDD
  4991                           plusw2	equ	0xFDB
  4992                           fsr2h	equ	0xFDA
  4993                           fsr2l	equ	0xFD9
  4994                           status	equ	0xFD8
  4995                           
  4996 ;; *************** function _trunc *****************
  4997 ;; Defined at:
  4998 ;;		line 13 in file "/Applications/microchip/xc8/v1.44/sources/common/trunc.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;  x               3  [STACK] unsigned long 
  5001 ;; Auto vars:     Size  Location     Type
  5002 ;;  i               3  [STACK] unsigned long 
  5003 ;;  expon           2  [STACK] int 
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  3  [STACK] int 
  5006 ;; Registers used:
  5007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5013 ;;      Params:         0       0       0       0       0       0       0
  5014 ;;      Locals:         0       0       0       0       0       0       0
  5015 ;;      Temps:          0       0       0       0       0       0       0
  5016 ;;      Totals:         0       0       0       0       0       0       0
  5017 ;;Total ram usage:        0 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    6
  5020 ;; This function calls:
  5021 ;;		___altoft
  5022 ;;		___fttol
  5023 ;;		_frexp
  5024 ;; This function is called by:
  5025 ;;		_round
  5026 ;; This function uses a reentrant model
  5027 ;;
  5028                           
  5029                           	psect	text26
  5030  00270C                     __ptext26:
  5031                           	opt stack 0
  5032  00270C                     _trunc:
  5033                           	opt stack 0
  5034                           
  5035                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
  5036  00270C  0E05               	movlw	5
  5037  00270E  26E1               	addwf	fsr1l,f,c
  5038  002710  0E00               	movlw	0
  5039  002712  22E2               	addwfc	fsr1h,f,c
  5040                           
  5041                           ;stkvar	trunc@expon @ sp[(-5)+3]
  5042                           
  5043                           ;incstack = 0
  5044  002714  0EFE               	movlw	254
  5045  002716  24E1               	addwf	fsr1l,w,c
  5046  002718  6EE6               	movwf	postinc1,c
  5047  00271A  0EFF               	movlw	255
  5048  00271C  20E2               	addwfc	fsr1h,w,c
  5049  00271E  6EE6               	movwf	postinc1,c
  5050                           
  5051                           ;stkvar	trunc@x @ sp[(-7)+-3]
  5052  002720  0EF6               	movlw	-10
  5053  002722  CFE3 FFE6          	movff	plusw1,postinc1
  5054  002726  CFE3 FFE6          	movff	plusw1,postinc1
  5055  00272A  CFE3 FFE6          	movff	plusw1,postinc1
  5056  00272E  EC70  F012         	call	_frexp	;wreg free
  5057                           
  5058                           ;stkvar	trunc@expon @ sp[(-5)+3]
  5059  002732  0EFF               	movlw	-1
  5060  002734  AEE3               	btfss	plusw1,7,c
  5061  002736  D007               	goto	l2863
  5062  002738  0E00               	movlw	0
  5063  00273A  6E4F               	movwf	btemp,c
  5064  00273C  0E00               	movlw	0
  5065  00273E  6E50               	movwf	btemp+1,c
  5066  002740  0E00               	movlw	0
  5067  002742  6E51               	movwf	btemp+2,c
  5068  002744  D037               	goto	l1053
  5069  002746                     l2863:
  5070                           
  5071                           ;stkvar	trunc@expon @ sp[(-5)+3]
  5072  002746  0EFF               	movlw	-1
  5073  002748  50E3               	movf	plusw1,w,c
  5074  00274A  E107               	bnz	u220_20
  5075  00274C  0EFE               	movlw	-2
  5076  00274E  CFE3 F04F          	movff	plusw1,btemp
  5077  002752  0E15               	movlw	21
  5078  002754  5E4F               	subwf	btemp,f,c
  5079  002756  A0D8               	btfss	status,0,c
  5080  002758  D008               	goto	l2869
  5081  00275A                     u220_20:
  5082                           
  5083                           ;stkvar	trunc@x @ sp[(-5)+-3]
  5084  00275A  0EF8               	movlw	-8
  5085  00275C  CFE3 F04F          	movff	plusw1,btemp
  5086  002760  0EF9               	movlw	-7
  5087  002762  CFE3 F050          	movff	plusw1,btemp+1
  5088  002766  0EFA               	movlw	-6
  5089  002768  D023               	goto	L2
  5090  00276A                     l2869:
  5091                           
  5092                           ;stkvar	trunc@x @ sp[(-5)+-3]
  5093  00276A  0EF8               	movlw	-8
  5094  00276C  CFE3 FFE6          	movff	plusw1,postinc1
  5095  002770  CFE3 FFE6          	movff	plusw1,postinc1
  5096  002774  CFE3 FFE6          	movff	plusw1,postinc1
  5097  002778  EC44  F00A         	call	___fttol	;wreg free
  5098  00277C  C04F  FFE6         	movff	btemp,postinc1
  5099  002780  C050  FFE6         	movff	btemp+1,postinc1
  5100  002784  C051  FFE6         	movff	btemp+2,postinc1
  5101  002788  C052  FFE6         	movff	btemp+3,postinc1
  5102  00278C  EC77  F015         	call	___altoft	;wreg free
  5103                           
  5104                           ;stkvar	trunc@i @ sp[(-5)+0]
  5105  002790  0EFB               	movlw	-5
  5106  002792  C04F  FFE3         	movff	btemp,plusw1
  5107  002796  0EFC               	movlw	-4
  5108  002798  C050  FFE3         	movff	btemp+1,plusw1
  5109  00279C  0EFD               	movlw	-3
  5110  00279E  C051  FFE3         	movff	btemp+2,plusw1
  5111                           
  5112                           ;stkvar	trunc@i @ sp[(-5)+0]
  5113  0027A2  0EFB               	movlw	-5
  5114  0027A4  CFE3 F04F          	movff	plusw1,btemp
  5115  0027A8  0EFC               	movlw	-4
  5116  0027AA  CFE3 F050          	movff	plusw1,btemp+1
  5117  0027AE  0EFD               	movlw	-3
  5118  0027B0                     L2:
  5119  0027B0  CFE3 F051          	movff	plusw1,btemp+2
  5120  0027B4                     l1053:
  5121                           
  5122                           ; _trunc: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize
      +                           = 3, vargsize = 0
  5123  0027B4  0EF8               	movlw	248
  5124  0027B6  26E1               	addwf	fsr1l,f,c
  5125  0027B8  0EFF               	movlw	255
  5126  0027BA  22E2               	addwfc	fsr1h,f,c
  5127  0027BC  0012               	return		;funcret
  5128  0027BE                     __end_of_trunc:
  5129                           	opt stack 0
  5130                           tosu	equ	0xFFF
  5131                           tosh	equ	0xFFE
  5132                           tosl	equ	0xFFD
  5133                           stkptr	equ	0xFFC
  5134                           tblptru	equ	0xFF8
  5135                           tblptrh	equ	0xFF7
  5136                           tblptrl	equ	0xFF6
  5137                           tablat	equ	0xFF5
  5138                           prodh	equ	0xFF4
  5139                           prodl	equ	0xFF3
  5140                           intcon	equ	0xFF2
  5141                           postinc0	equ	0xFEE
  5142                           fsr0h	equ	0xFEA
  5143                           fsr0l	equ	0xFE9
  5144                           wreg	equ	0xFE8
  5145                           postinc1	equ	0xFE6
  5146                           postdec1	equ	0xFE5
  5147                           plusw1	equ	0xFE3
  5148                           fsr1h	equ	0xFE2
  5149                           fsr1l	equ	0xFE1
  5150                           bsr	equ	0xFE0
  5151                           indf2	equ	0xFDF
  5152                           postinc2	equ	0xFDE
  5153                           postdec2	equ	0xFDD
  5154                           plusw2	equ	0xFDB
  5155                           fsr2h	equ	0xFDA
  5156                           fsr2l	equ	0xFD9
  5157                           status	equ	0xFD8
  5158                           
  5159 ;; *************** function _frexp *****************
  5160 ;; Defined at:
  5161 ;;		line 254 in file "/Applications/microchip/xc8/v1.44/sources/common/frexp.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;  value           3  [STACK] int 
  5164 ;;  eptr            2  [STACK] PTR int 
  5165 ;;		 -> trunc@expon(2), 
  5166 ;; Auto vars:     Size  Location     Type
  5167 ;;		None
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  3  [STACK] PTR int 
  5170 ;; Registers used:
  5171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+11
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5177 ;;      Params:         0       0       0       0       0       0       0
  5178 ;;      Locals:         0       0       0       0       0       0       0
  5179 ;;      Temps:          0       0       0       0       0       0       0
  5180 ;;      Totals:         0       0       0       0       0       0       0
  5181 ;;Total ram usage:        0 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; Hardware stack levels required when called:    4
  5184 ;; This function calls:
  5185 ;;		Nothing
  5186 ;; This function is called by:
  5187 ;;		_trunc
  5188 ;; This function uses a reentrant model
  5189 ;;
  5190                           
  5191                           	psect	text27
  5192  0024E0                     __ptext27:
  5193                           	opt stack 0
  5194  0024E0                     _frexp:
  5195                           	opt stack 20
  5196                           
  5197                           ;stkvar	frexp@value @ sp[(0)+-3]
  5198                           
  5199                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, argsize = 5 var
      +                          gsize = 0, retsize = 0
  5200                           ;incstack = 0
  5201  0024E0  0EFD               	movlw	-3
  5202  0024E2  50E3               	movf	plusw1,w,c
  5203  0024E4  E112               	bnz	l2591
  5204  0024E6  0EFE               	movlw	-2
  5205  0024E8  50E3               	movf	plusw1,w,c
  5206  0024EA  E10F               	bnz	l2591
  5207  0024EC  0EFF               	movlw	-1
  5208  0024EE  50E3               	movf	plusw1,w,c
  5209  0024F0  A4D8               	btfss	status,2,c
  5210  0024F2  D00B               	goto	l2591
  5211                           
  5212                           ;stkvar	frexp@eptr @ sp[(0)+-5]
  5213  0024F4  0EFB               	movlw	-5
  5214  0024F6  CFE3 FFD9          	movff	plusw1,fsr2l
  5215  0024FA  0EFC               	movlw	-4
  5216  0024FC  CFE3 FFDA          	movff	plusw1,fsr2h
  5217  002500  0E00               	movlw	0
  5218  002502  6EDE               	movwf	postinc2,c
  5219  002504  0E00               	movlw	0
  5220  002506  6EDD               	movwf	postdec2,c
  5221  002508  D047               	goto	l1079
  5222  00250A                     l2591:
  5223                           
  5224                           ;stkvar	frexp@value @ sp[(0)+-3]
  5225  00250A  0EFF               	movlw	255
  5226  00250C  24E1               	addwf	fsr1l,w,c
  5227  00250E  6ED9               	movwf	fsr2l,c
  5228  002510  0EFF               	movlw	255
  5229  002512  20E2               	addwfc	fsr1h,w,c
  5230  002514  6EDA               	movwf	fsr2h,c
  5231  002516  50DF               	movf	223,w,c
  5232  002518  0B7F               	andlw	127
  5233  00251A  6E5A               	movwf	btemp+11,c
  5234  00251C  90D8               	bcf	status,0,c
  5235  00251E  345A               	rlcf	btemp+11,w,c
  5236  002520  6E50               	movwf	btemp+1,c
  5237  002522  6A51               	clrf	btemp+2,c
  5238  002524  3651               	rlcf	btemp+2,f,c
  5239                           
  5240                           ;stkvar	frexp@eptr @ sp[(0)+-5]
  5241  002526  0EFB               	movlw	-5
  5242  002528  CFE3 FFD9          	movff	plusw1,fsr2l
  5243  00252C  0EFC               	movlw	-4
  5244  00252E  CFE3 FFDA          	movff	plusw1,fsr2h
  5245  002532  C050  FFDE         	movff	btemp+1,postinc2
  5246  002536  C051  FFDD         	movff	btemp+2,postdec2
  5247                           
  5248                           ;stkvar	frexp@eptr @ sp[(0)+-5]
  5249  00253A  0EFB               	movlw	-5
  5250  00253C  CFE3 FFD9          	movff	plusw1,fsr2l
  5251  002540  0EFC               	movlw	-4
  5252  002542  CFE3 FFDA          	movff	plusw1,fsr2h
  5253                           
  5254                           ;stkvar	frexp@value @ sp[(0)+-3]
  5255  002546  0EFE               	movlw	254
  5256  002548  24E1               	addwf	fsr1l,w,c
  5257  00254A  6EE9               	movwf	fsr0l,c
  5258  00254C  0EFF               	movlw	255
  5259  00254E  20E2               	addwfc	fsr1h,w,c
  5260  002550  6EEA               	movwf	fsr0h,c
  5261  002552  AEEF               	btfss	indf0,7,c
  5262  002554  D002               	goto	u187_20
  5263  002556  0E01               	movlw	1
  5264  002558  D001               	goto	u187_26
  5265  00255A                     u187_20:
  5266  00255A  0E00               	movlw	0
  5267  00255C                     u187_26:
  5268  00255C  12DE               	iorwf	postinc2,f,c
  5269  00255E  0E00               	movlw	0
  5270  002560  12DD               	iorwf	postdec2,f,c
  5271                           
  5272                           ;stkvar	frexp@eptr @ sp[(0)+-5]
  5273  002562  0EFB               	movlw	-5
  5274  002564  CFE3 FFD9          	movff	plusw1,fsr2l
  5275  002568  0EFC               	movlw	-4
  5276  00256A  CFE3 FFDA          	movff	plusw1,fsr2h
  5277  00256E  0E82               	movlw	130
  5278  002570  26DE               	addwf	postinc2,f,c
  5279  002572  0EFF               	movlw	255
  5280  002574  22DD               	addwfc	postdec2,f,c
  5281                           
  5282                           ;stkvar	frexp@value @ sp[(0)+-3]
  5283  002576  0EFF               	movlw	255
  5284  002578  24E1               	addwf	fsr1l,w,c
  5285  00257A  6ED9               	movwf	fsr2l,c
  5286  00257C  0EFF               	movlw	255
  5287  00257E  20E2               	addwfc	fsr1h,w,c
  5288  002580  6EDA               	movwf	fsr2h,c
  5289  002582  50DF               	movf	223,w,c
  5290  002584  0B80               	andlw	-128
  5291  002586  093F               	iorlw	63
  5292  002588  6EDF               	movwf	223,c
  5293                           
  5294                           ;stkvar	frexp@value @ sp[(0)+-3]
  5295  00258A  0EFE               	movlw	254
  5296  00258C  24E1               	addwf	fsr1l,w,c
  5297  00258E  6ED9               	movwf	fsr2l,c
  5298  002590  0EFF               	movlw	255
  5299  002592  20E2               	addwfc	fsr1h,w,c
  5300  002594  6EDA               	movwf	fsr2h,c
  5301  002596  9EDF               	bcf	indf2,7,c
  5302  002598                     l1079:
  5303                           
  5304                           ; _frexp: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, argsize
      +                           = 5, vargsize = 0
  5305  002598  0EFB               	movlw	251
  5306  00259A  26E1               	addwf	fsr1l,f,c
  5307  00259C  0EFF               	movlw	255
  5308  00259E  22E2               	addwfc	fsr1h,f,c
  5309  0025A0  0012               	return		;funcret
  5310  0025A2                     __end_of_frexp:
  5311                           	opt stack 0
  5312                           tosu	equ	0xFFF
  5313                           tosh	equ	0xFFE
  5314                           tosl	equ	0xFFD
  5315                           stkptr	equ	0xFFC
  5316                           tblptru	equ	0xFF8
  5317                           tblptrh	equ	0xFF7
  5318                           tblptrl	equ	0xFF6
  5319                           tablat	equ	0xFF5
  5320                           prodh	equ	0xFF4
  5321                           prodl	equ	0xFF3
  5322                           intcon	equ	0xFF2
  5323                           indf0	equ	0xFEF
  5324                           postinc0	equ	0xFEE
  5325                           fsr0h	equ	0xFEA
  5326                           fsr0l	equ	0xFE9
  5327                           wreg	equ	0xFE8
  5328                           postinc1	equ	0xFE6
  5329                           postdec1	equ	0xFE5
  5330                           plusw1	equ	0xFE3
  5331                           fsr1h	equ	0xFE2
  5332                           fsr1l	equ	0xFE1
  5333                           bsr	equ	0xFE0
  5334                           indf2	equ	0xFDF
  5335                           postinc2	equ	0xFDE
  5336                           postdec2	equ	0xFDD
  5337                           plusw2	equ	0xFDB
  5338                           fsr2h	equ	0xFDA
  5339                           fsr2l	equ	0xFD9
  5340                           status	equ	0xFD8
  5341                           
  5342 ;; *************** function ___fttol *****************
  5343 ;; Defined at:
  5344 ;;		line 44 in file "/Applications/microchip/xc8/v1.44/sources/common/fttol.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;  f1              3  [STACK] float 
  5347 ;; Auto vars:     Size  Location     Type
  5348 ;;  lval            4  [STACK] unsigned long 
  5349 ;;  exp1            1  [STACK] unsigned char 
  5350 ;;  sign1           1  [STACK] unsigned char 
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  4  [STACK] long 
  5353 ;; Registers used:
  5354 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+
      +8, btemp+9, btemp+10, btemp+11
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5360 ;;      Params:         0       0       0       0       0       0       0
  5361 ;;      Locals:         0       0       0       0       0       0       0
  5362 ;;      Temps:          0       0       0       0       0       0       0
  5363 ;;      Totals:         0       0       0       0       0       0       0
  5364 ;;Total ram usage:        0 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; Hardware stack levels required when called:    4
  5367 ;; This function calls:
  5368 ;;		Nothing
  5369 ;; This function is called by:
  5370 ;;		_cloro
  5371 ;;		_ph
  5372 ;;		_trunc
  5373 ;; This function uses a reentrant model
  5374 ;;
  5375                           
  5376                           	psect	text28
  5377  001488                     __ptext28:
  5378                           	opt stack 0
  5379  001488                     ___fttol:
  5380                           	opt stack 0
  5381                           
  5382                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
  5383  001488  0E06               	movlw	6
  5384  00148A  26E1               	addwf	fsr1l,f,c
  5385  00148C  0E00               	movlw	0
  5386  00148E  22E2               	addwfc	fsr1h,f,c
  5387                           
  5388                           ;incstack = 0
  5389  001490  0E0F               	movlw	15
  5390  001492  6E5A               	movwf	btemp+11,c
  5391                           
  5392                           ;stkvar	___fttol@f1 @ sp[(-6)+-3]
  5393  001494  0EF7               	movlw	-9
  5394  001496  CFE3 F055          	movff	plusw1,btemp+6
  5395  00149A  0EF8               	movlw	-8
  5396  00149C  CFE3 F056          	movff	plusw1,btemp+7
  5397  0014A0  0EF9               	movlw	-7
  5398  0014A2  CFE3 F057          	movff	plusw1,btemp+8
  5399  0014A6  285A               	incf	btemp+11,w,c
  5400  0014A8  6E4F               	movwf	btemp,c
  5401  0014AA  D004               	goto	u172_20
  5402  0014AC                     u172_25:
  5403  0014AC  90D8               	bcf	status,0,c
  5404  0014AE  3257               	rrcf	btemp+8,f,c
  5405  0014B0  3256               	rrcf	btemp+7,f,c
  5406  0014B2  3255               	rrcf	btemp+6,f,c
  5407  0014B4                     u172_20:
  5408  0014B4  2E4F               	decfsz	btemp,f,c
  5409  0014B6  D7FA               	goto	u172_25
  5410  0014B8  5055               	movf	btemp+6,w,c
  5411  0014BA  6E5A               	movwf	btemp+11,c
  5412                           
  5413                           ;stkvar	___fttol@exp1 @ sp[(-6)+4]
  5414  0014BC  0EFE               	movlw	-2
  5415  0014BE  C05A  FFE3         	movff	btemp+11,plusw1
  5416  0014C2  0EFE               	movlw	-2
  5417  0014C4  50E3               	movf	plusw1,w,c
  5418  0014C6  A4D8               	btfss	status,2,c
  5419  0014C8  D006               	goto	l2527
  5420  0014CA                     u173_20:
  5421  0014CA  0E00               	movlw	0
  5422  0014CC  6E4F               	movwf	btemp,c
  5423  0014CE  6A50               	clrf	btemp+1,c
  5424  0014D0  6A51               	clrf	btemp+2,c
  5425  0014D2  6A52               	clrf	btemp+3,c
  5426  0014D4  D08F               	goto	l813
  5427  0014D6                     l2527:
  5428  0014D6  0E17               	movlw	23
  5429  0014D8  6E5A               	movwf	btemp+11,c
  5430                           
  5431                           ;stkvar	___fttol@f1 @ sp[(-6)+-3]
  5432  0014DA  0EF7               	movlw	-9
  5433  0014DC  CFE3 F055          	movff	plusw1,btemp+6
  5434  0014E0  0EF8               	movlw	-8
  5435  0014E2  CFE3 F056          	movff	plusw1,btemp+7
  5436  0014E6  0EF9               	movlw	-7
  5437  0014E8  CFE3 F057          	movff	plusw1,btemp+8
  5438  0014EC  285A               	incf	btemp+11,w,c
  5439  0014EE  6E4F               	movwf	btemp,c
  5440  0014F0  D004               	goto	u174_20
  5441  0014F2                     u174_25:
  5442  0014F2  90D8               	bcf	status,0,c
  5443  0014F4  3257               	rrcf	btemp+8,f,c
  5444  0014F6  3256               	rrcf	btemp+7,f,c
  5445  0014F8  3255               	rrcf	btemp+6,f,c
  5446  0014FA                     u174_20:
  5447  0014FA  2E4F               	decfsz	btemp,f,c
  5448  0014FC  D7FA               	goto	u174_25
  5449  0014FE  5055               	movf	btemp+6,w,c
  5450  001500  6E5A               	movwf	btemp+11,c
  5451                           
  5452                           ;stkvar	___fttol@sign1 @ sp[(-6)+5]
  5453  001502  0EFF               	movlw	-1
  5454  001504  C05A  FFE3         	movff	btemp+11,plusw1
  5455                           
  5456                           ;stkvar	___fttol@f1 @ sp[(-6)+-3]
  5457  001508  0EF8               	movlw	-8
  5458  00150A  8EE3               	bsf	plusw1,7,c
  5459                           
  5460                           ;stkvar	___fttol@f1 @ sp[(-6)+-3]
  5461  00150C  0EF9               	movlw	-7
  5462  00150E  6AE3               	clrf	plusw1,c
  5463                           
  5464                           ;stkvar	___fttol@f1 @ sp[(-6)+-3]
  5465  001510  0EF7               	movlw	-9
  5466  001512  CFE3 F058          	movff	plusw1,btemp+9
  5467  001516  0EF8               	movlw	-8
  5468  001518  CFE3 F059          	movff	plusw1,btemp+10
  5469  00151C  0EF9               	movlw	-7
  5470  00151E  CFE3 F05A          	movff	plusw1,btemp+11
  5471  001522  5058               	movf	btemp+9,w,c
  5472  001524  6E53               	movwf	btemp+4,c
  5473  001526  5059               	movf	btemp+10,w,c
  5474  001528  6E54               	movwf	btemp+5,c
  5475  00152A  505A               	movf	btemp+11,w,c
  5476  00152C  6E55               	movwf	btemp+6,c
  5477  00152E  6A56               	clrf	btemp+7,c
  5478                           
  5479                           ;stkvar	___fttol@lval @ sp[(-6)+0]
  5480  001530  0EFA               	movlw	-6
  5481  001532  C053  FFE3         	movff	btemp+4,plusw1
  5482  001536  0EFB               	movlw	-5
  5483  001538  C054  FFE3         	movff	btemp+5,plusw1
  5484  00153C  0EFC               	movlw	-4
  5485  00153E  C055  FFE3         	movff	btemp+6,plusw1
  5486  001542  0EFD               	movlw	-3
  5487  001544  C056  FFE3         	movff	btemp+7,plusw1
  5488                           
  5489                           ;stkvar	___fttol@exp1 @ sp[(-6)+4]
  5490  001548  0EFE               	movlw	-2
  5491  00154A  CFE3 F04F          	movff	plusw1,btemp
  5492  00154E  0E8E               	movlw	142
  5493  001550  5E4F               	subwf	btemp,f,c
  5494  001552  0EFE               	movlw	-2
  5495  001554  C04F  FFE3         	movff	btemp,plusw1
  5496                           
  5497                           ;stkvar	___fttol@exp1 @ sp[(-6)+4]
  5498  001558  0EFE               	movlw	-2
  5499  00155A  AEE3               	btfss	plusw1,7,c
  5500  00155C  D014               	goto	l2547
  5501                           
  5502                           ;stkvar	___fttol@exp1 @ sp[(-6)+4]
  5503  00155E  0EFE               	movlw	-2
  5504  001560  50E3               	movf	plusw1,w,c
  5505  001562  0A80               	xorlw	128
  5506  001564  0F8F               	addlw	143
  5507  001566  A0D8               	btfss	status,0,c
  5508  001568  D7B0               	goto	u173_20
  5509  00156A                     l2545:
  5510                           
  5511                           ;stkvar	___fttol@lval @ sp[(-6)+0]
  5512  00156A  90D8               	bcf	status,0,c
  5513  00156C  0EFD               	movlw	-3
  5514  00156E  32E3               	rrcf	plusw1,f,c
  5515  001570  0EFC               	movlw	-4
  5516  001572  32E3               	rrcf	plusw1,f,c
  5517  001574  0EFB               	movlw	-5
  5518  001576  32E3               	rrcf	plusw1,f,c
  5519  001578  0EFA               	movlw	-6
  5520  00157A  32E3               	rrcf	plusw1,f,c
  5521                           
  5522                           ;stkvar	___fttol@exp1 @ sp[(-6)+4]
  5523  00157C  0EFE               	movlw	-2
  5524  00157E  2AE3               	incf	plusw1,f,c
  5525  001580  B4D8               	btfsc	status,2,c
  5526  001582  D017               	goto	u179_20
  5527  001584  D7F2               	goto	l2545
  5528  001586                     l2547:
  5529                           
  5530                           ;stkvar	___fttol@exp1 @ sp[(-6)+4]
  5531  001586  0EFE               	movlw	-2
  5532  001588  CFE3 F04F          	movff	plusw1,btemp
  5533  00158C  0E17               	movlw	23
  5534  00158E  644F               	cpfsgt	btemp,c
  5535  001590  D00C               	goto	l2555
  5536  001592  D79B               	goto	u173_20
  5537  001594                     l2553:
  5538                           
  5539                           ;stkvar	___fttol@lval @ sp[(-6)+0]
  5540  001594  90D8               	bcf	status,0,c
  5541  001596  0EFA               	movlw	-6
  5542  001598  36E3               	rlcf	plusw1,f,c
  5543  00159A  0EFB               	movlw	-5
  5544  00159C  36E3               	rlcf	plusw1,f,c
  5545  00159E  0EFC               	movlw	-4
  5546  0015A0  36E3               	rlcf	plusw1,f,c
  5547  0015A2  0EFD               	movlw	-3
  5548  0015A4  36E3               	rlcf	plusw1,f,c
  5549                           
  5550                           ;stkvar	___fttol@exp1 @ sp[(-6)+4]
  5551  0015A6  0EFE               	movlw	-2
  5552  0015A8  06E3               	decf	plusw1,f,c
  5553  0015AA                     l2555:
  5554                           
  5555                           ;stkvar	___fttol@exp1 @ sp[(-6)+4]
  5556  0015AA  0EFE               	movlw	-2
  5557  0015AC  50E3               	movf	plusw1,w,c
  5558  0015AE  A4D8               	btfss	status,2,c
  5559  0015B0  D7F1               	goto	l2553
  5560  0015B2                     u179_20:
  5561                           
  5562                           ;stkvar	___fttol@sign1 @ sp[(-6)+5]
  5563  0015B2  0EFF               	movlw	-1
  5564  0015B4  50E3               	movf	plusw1,w,c
  5565  0015B6  B4D8               	btfsc	status,2,c
  5566  0015B8  D011               	goto	u181_20
  5567                           
  5568                           ;stkvar	___fttol@lval @ sp[(-6)+0]
  5569                           ;stkvar	___fttol@lval @ sp[(-6)+0]
  5570  0015BA  0EFA               	movlw	-6
  5571  0015BC  6CE3               	negf	plusw1,c
  5572  0015BE  0EFB               	movlw	-5
  5573  0015C0  1EE3               	comf	plusw1,f,c
  5574  0015C2  0EFC               	movlw	-4
  5575  0015C4  1EE3               	comf	plusw1,f,c
  5576  0015C6  0EFD               	movlw	-3
  5577  0015C8  1EE3               	comf	plusw1,f,c
  5578  0015CA  E308               	bnc	u181_20
  5579  0015CC  0EFB               	movlw	-5
  5580  0015CE  2AE3               	incf	plusw1,f,c
  5581  0015D0  E305               	bnc	u181_20
  5582  0015D2  0EFC               	movlw	-4
  5583  0015D4  2AE3               	incf	plusw1,f,c
  5584  0015D6  E302               	bnc	u181_20
  5585  0015D8  0EFD               	movlw	-3
  5586  0015DA  2AE3               	incf	plusw1,f,c
  5587  0015DC                     u181_20:
  5588                           
  5589                           ;stkvar	___fttol@lval @ sp[(-6)+0]
  5590  0015DC  0EFA               	movlw	-6
  5591  0015DE  CFE3 F04F          	movff	plusw1,btemp
  5592  0015E2  0EFB               	movlw	-5
  5593  0015E4  CFE3 F050          	movff	plusw1,btemp+1
  5594  0015E8  0EFC               	movlw	-4
  5595  0015EA  CFE3 F051          	movff	plusw1,btemp+2
  5596  0015EE  0EFD               	movlw	-3
  5597  0015F0  CFE3 F052          	movff	plusw1,btemp+3
  5598  0015F4                     l813:
  5599                           
  5600                           ; ___fttol: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsi
      +                          ze = 3, vargsize = 0
  5601  0015F4  0EF7               	movlw	247
  5602  0015F6  26E1               	addwf	fsr1l,f,c
  5603  0015F8  0EFF               	movlw	255
  5604  0015FA  22E2               	addwfc	fsr1h,f,c
  5605  0015FC  0012               	return		;funcret
  5606  0015FE                     __end_of___fttol:
  5607                           	opt stack 0
  5608                           tosu	equ	0xFFF
  5609                           tosh	equ	0xFFE
  5610                           tosl	equ	0xFFD
  5611                           stkptr	equ	0xFFC
  5612                           tblptru	equ	0xFF8
  5613                           tblptrh	equ	0xFF7
  5614                           tblptrl	equ	0xFF6
  5615                           tablat	equ	0xFF5
  5616                           prodh	equ	0xFF4
  5617                           prodl	equ	0xFF3
  5618                           intcon	equ	0xFF2
  5619                           indf0	equ	0xFEF
  5620                           postinc0	equ	0xFEE
  5621                           fsr0h	equ	0xFEA
  5622                           fsr0l	equ	0xFE9
  5623                           wreg	equ	0xFE8
  5624                           postinc1	equ	0xFE6
  5625                           postdec1	equ	0xFE5
  5626                           plusw1	equ	0xFE3
  5627                           fsr1h	equ	0xFE2
  5628                           fsr1l	equ	0xFE1
  5629                           bsr	equ	0xFE0
  5630                           indf2	equ	0xFDF
  5631                           postinc2	equ	0xFDE
  5632                           postdec2	equ	0xFDD
  5633                           plusw2	equ	0xFDB
  5634                           fsr2h	equ	0xFDA
  5635                           fsr2l	equ	0xFD9
  5636                           status	equ	0xFD8
  5637                           
  5638 ;; *************** function ___altoft *****************
  5639 ;; Defined at:
  5640 ;;		line 42 in file "/Applications/microchip/xc8/v1.44/sources/common/altoft.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;  c               4  [STACK] long 
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;  sign            1  [STACK] unsigned char 
  5645 ;;  exp             1  [STACK] unsigned char 
  5646 ;; Return value:  Size  Location     Type
  5647 ;;                  3  [STACK] float 
  5648 ;; Registers used:
  5649 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11
  5650 ;; Tracked objects:
  5651 ;;		On entry : 0/0
  5652 ;;		On exit  : 0/0
  5653 ;;		Unchanged: 0/0
  5654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5655 ;;      Params:         0       0       0       0       0       0       0
  5656 ;;      Locals:         0       0       0       0       0       0       0
  5657 ;;      Temps:          0       0       0       0       0       0       0
  5658 ;;      Totals:         0       0       0       0       0       0       0
  5659 ;;Total ram usage:        0 bytes
  5660 ;; Hardware stack levels used:    1
  5661 ;; Hardware stack levels required when called:    5
  5662 ;; This function calls:
  5663 ;;		___ftpack
  5664 ;; This function is called by:
  5665 ;;		_trunc
  5666 ;; This function uses a reentrant model
  5667 ;;
  5668                           
  5669                           	psect	text29
  5670  002AEE                     __ptext29:
  5671                           	opt stack 0
  5672  002AEE                     ___altoft:
  5673                           	opt stack 0
  5674                           
  5675                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  5676  002AEE  52E6               	movf	postinc1,f,c
  5677  002AF0  52E6               	movf	postinc1,f,c
  5678                           
  5679                           ;stkvar	___altoft@sign @ sp[(-2)+0]
  5680                           
  5681                           ;incstack = 0
  5682  002AF2  0EFE               	movlw	-2
  5683  002AF4  6AE3               	clrf	plusw1,c
  5684  002AF6  0E8E               	movlw	142
  5685  002AF8  6E5A               	movwf	btemp+11,c
  5686                           
  5687                           ;stkvar	___altoft@exp @ sp[(-2)+1]
  5688  002AFA  0EFF               	movlw	-1
  5689  002AFC  C05A  FFE3         	movff	btemp+11,plusw1
  5690                           
  5691                           ;stkvar	___altoft@c @ sp[(-2)+-4]
  5692  002B00  0EFD               	movlw	-3
  5693  002B02  AEE3               	btfss	plusw1,7,c
  5694  002B04  D01F               	goto	l2431
  5695                           
  5696                           ;stkvar	___altoft@c @ sp[(-2)+-4]
  5697                           ;stkvar	___altoft@c @ sp[(-2)+-4]
  5698  002B06  0EFA               	movlw	-6
  5699  002B08  6CE3               	negf	plusw1,c
  5700  002B0A  0EFB               	movlw	-5
  5701  002B0C  1EE3               	comf	plusw1,f,c
  5702  002B0E  0EFC               	movlw	-4
  5703  002B10  1EE3               	comf	plusw1,f,c
  5704  002B12  0EFD               	movlw	-3
  5705  002B14  1EE3               	comf	plusw1,f,c
  5706  002B16  E308               	bnc	u149_20
  5707  002B18  0EFB               	movlw	-5
  5708  002B1A  2AE3               	incf	plusw1,f,c
  5709  002B1C  E305               	bnc	u149_20
  5710  002B1E  0EFC               	movlw	-4
  5711  002B20  2AE3               	incf	plusw1,f,c
  5712  002B22  E302               	bnc	u149_20
  5713  002B24  0EFD               	movlw	-3
  5714  002B26  2AE3               	incf	plusw1,f,c
  5715  002B28                     u149_20:
  5716                           
  5717                           ;stkvar	___altoft@sign @ sp[(-2)+0]
  5718  002B28  0EFE               	movlw	-2
  5719  002B2A  6AE3               	clrf	plusw1,c
  5720  002B2C  D00A               	goto	L3
  5721  002B2E                     l2429:
  5722                           
  5723                           ;stkvar	___altoft@c @ sp[(-2)+-4]
  5724  002B2E  90D8               	bcf	status,0,c
  5725  002B30  0EFD               	movlw	-3
  5726  002B32  32E3               	rrcf	plusw1,f,c
  5727  002B34  0EFC               	movlw	-4
  5728  002B36  32E3               	rrcf	plusw1,f,c
  5729  002B38  0EFB               	movlw	-5
  5730  002B3A  32E3               	rrcf	plusw1,f,c
  5731  002B3C  0EFA               	movlw	-6
  5732  002B3E  32E3               	rrcf	plusw1,f,c
  5733                           
  5734                           ;stkvar	___altoft@exp @ sp[(-2)+1]
  5735  002B40  0EFF               	movlw	-1
  5736  002B42                     L3:
  5737  002B42  2AE3               	incf	plusw1,f,c
  5738  002B44                     l2431:
  5739                           
  5740                           ;stkvar	___altoft@c @ sp[(-2)+-4]
  5741  002B44  50E1               	movf	fsr1l,w,c
  5742  002B46  0FFA               	addlw	-6
  5743  002B48  6ED9               	movwf	fsr2l,c
  5744  002B4A  50E2               	movf	fsr1h,w,c
  5745  002B4C  6EDA               	movwf	fsr2h,c
  5746  002B4E  0EFF               	movlw	255
  5747  002B50  22DA               	addwfc	fsr2h,f,c
  5748  002B52  52DE               	movf	postinc2,f,c
  5749  002B54  52DE               	movf	postinc2,f,c
  5750  002B56  52DE               	movf	postinc2,f,c
  5751  002B58  0EFF               	movlw	255
  5752  002B5A  14DD               	andwf	postdec2,w,c
  5753  002B5C  A4D8               	btfss	status,2,c
  5754  002B5E  D7E7               	goto	l2429
  5755                           
  5756                           ;stkvar	___altoft@sign @ sp[(-2)+0]
  5757  002B60  0EFE               	movlw	-2
  5758  002B62  50E3               	movf	plusw1,w,c
  5759  002B64  6EE6               	movwf	postinc1,c
  5760                           
  5761                           ;stkvar	___altoft@exp @ sp[(-3)+1]
  5762  002B66  0EFE               	movlw	-2
  5763  002B68  50E3               	movf	plusw1,w,c
  5764  002B6A  6EE6               	movwf	postinc1,c
  5765                           
  5766                           ;stkvar	___altoft@c @ sp[(-4)+-4]
  5767  002B6C  0EF8               	movlw	-8
  5768  002B6E  CFE3 FFE6          	movff	plusw1,postinc1
  5769  002B72  CFE3 FFE6          	movff	plusw1,postinc1
  5770  002B76  CFE3 FFE6          	movff	plusw1,postinc1
  5771  002B7A  EC72  F00E         	call	___ftpack	;wreg free
  5772                           
  5773                           ; ___altoft: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, args
      +                          ize = 4, vargsize = 0
  5774  002B7E  0EFA               	movlw	250
  5775  002B80  26E1               	addwf	fsr1l,f,c
  5776  002B82  0EFF               	movlw	255
  5777  002B84  22E2               	addwfc	fsr1h,f,c
  5778  002B86  0012               	return		;funcret
  5779  002B88                     __end_of___altoft:
  5780                           	opt stack 0
  5781                           tosu	equ	0xFFF
  5782                           tosh	equ	0xFFE
  5783                           tosl	equ	0xFFD
  5784                           stkptr	equ	0xFFC
  5785                           tblptru	equ	0xFF8
  5786                           tblptrh	equ	0xFF7
  5787                           tblptrl	equ	0xFF6
  5788                           tablat	equ	0xFF5
  5789                           prodh	equ	0xFF4
  5790                           prodl	equ	0xFF3
  5791                           intcon	equ	0xFF2
  5792                           indf0	equ	0xFEF
  5793                           postinc0	equ	0xFEE
  5794                           fsr0h	equ	0xFEA
  5795                           fsr0l	equ	0xFE9
  5796                           wreg	equ	0xFE8
  5797                           postinc1	equ	0xFE6
  5798                           postdec1	equ	0xFE5
  5799                           plusw1	equ	0xFE3
  5800                           fsr1h	equ	0xFE2
  5801                           fsr1l	equ	0xFE1
  5802                           bsr	equ	0xFE0
  5803                           indf2	equ	0xFDF
  5804                           postinc2	equ	0xFDE
  5805                           postdec2	equ	0xFDD
  5806                           plusw2	equ	0xFDB
  5807                           fsr2h	equ	0xFDA
  5808                           fsr2l	equ	0xFD9
  5809                           status	equ	0xFD8
  5810                           
  5811 ;; *************** function ___ftsub *****************
  5812 ;; Defined at:
  5813 ;;		line 20 in file "/Applications/microchip/xc8/v1.44/sources/common/ftsub.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  f1              3  [STACK] float 
  5816 ;;  f2              3  [STACK] float 
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;		None
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  3  [STACK] float 
  5821 ;; Registers used:
  5822 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+6, btemp+7, btemp+8, btemp+9, b
      +temp+10, btemp+11
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5828 ;;      Params:         0       0       0       0       0       0       0
  5829 ;;      Locals:         0       0       0       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0
  5831 ;;      Totals:         0       0       0       0       0       0       0
  5832 ;;Total ram usage:        0 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    6
  5835 ;; This function calls:
  5836 ;;		___ftadd
  5837 ;; This function is called by:
  5838 ;;		_round
  5839 ;; This function uses a reentrant model
  5840 ;;
  5841                           
  5842                           	psect	text30
  5843  0030C0                     __ptext30:
  5844                           	opt stack 0
  5845  0030C0                     ___ftsub:
  5846                           	opt stack 19
  5847                           
  5848                           ;stkvar	___ftsub@f2 @ sp[(0)+-6]
  5849                           
  5850                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0
  5851                           ;incstack = 0
  5852  0030C0  0EFA               	movlw	-6
  5853  0030C2  50E3               	movf	plusw1,w,c
  5854  0030C4  E107               	bnz	u204_20
  5855  0030C6  0EFB               	movlw	-5
  5856  0030C8  50E3               	movf	plusw1,w,c
  5857  0030CA  E104               	bnz	u204_20
  5858  0030CC  0EFC               	movlw	-4
  5859  0030CE  50E3               	movf	plusw1,w,c
  5860  0030D0  B4D8               	btfsc	status,2,c
  5861  0030D2  D002               	goto	l2767
  5862  0030D4                     u204_20:
  5863                           
  5864                           ;stkvar	___ftsub@f2 @ sp[(0)+-6]
  5865  0030D4  0EFC               	movlw	-4
  5866  0030D6  7EE3               	btg	plusw1,7,c
  5867  0030D8                     l2767:
  5868                           
  5869                           ;stkvar	___ftsub@f2 @ sp[(0)+-6]
  5870  0030D8  0EFA               	movlw	-6
  5871  0030DA  CFE3 FFE6          	movff	plusw1,postinc1
  5872  0030DE  CFE3 FFE6          	movff	plusw1,postinc1
  5873  0030E2  CFE3 FFE6          	movff	plusw1,postinc1
  5874                           
  5875                           ;stkvar	___ftsub@f1 @ sp[(-3)+-3]
  5876  0030E6  0EFA               	movlw	-6
  5877  0030E8  CFE3 FFE6          	movff	plusw1,postinc1
  5878  0030EC  CFE3 FFE6          	movff	plusw1,postinc1
  5879  0030F0  CFE3 FFE6          	movff	plusw1,postinc1
  5880  0030F4  ECB1  F005         	call	___ftadd	;wreg free
  5881                           
  5882                           ; ___ftsub: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsi
      +                          ze = 6, vargsize = 0
  5883  0030F8  0EFA               	movlw	250
  5884  0030FA  26E1               	addwf	fsr1l,f,c
  5885  0030FC  0EFF               	movlw	255
  5886  0030FE  22E2               	addwfc	fsr1h,f,c
  5887  003100  0012               	return		;funcret
  5888  003102                     __end_of___ftsub:
  5889                           	opt stack 0
  5890                           tosu	equ	0xFFF
  5891                           tosh	equ	0xFFE
  5892                           tosl	equ	0xFFD
  5893                           stkptr	equ	0xFFC
  5894                           tblptru	equ	0xFF8
  5895                           tblptrh	equ	0xFF7
  5896                           tblptrl	equ	0xFF6
  5897                           tablat	equ	0xFF5
  5898                           prodh	equ	0xFF4
  5899                           prodl	equ	0xFF3
  5900                           intcon	equ	0xFF2
  5901                           indf0	equ	0xFEF
  5902                           postinc0	equ	0xFEE
  5903                           fsr0h	equ	0xFEA
  5904                           fsr0l	equ	0xFE9
  5905                           wreg	equ	0xFE8
  5906                           postinc1	equ	0xFE6
  5907                           postdec1	equ	0xFE5
  5908                           plusw1	equ	0xFE3
  5909                           fsr1h	equ	0xFE2
  5910                           fsr1l	equ	0xFE1
  5911                           bsr	equ	0xFE0
  5912                           indf2	equ	0xFDF
  5913                           postinc2	equ	0xFDE
  5914                           postdec2	equ	0xFDD
  5915                           plusw2	equ	0xFDB
  5916                           fsr2h	equ	0xFDA
  5917                           fsr2l	equ	0xFD9
  5918                           status	equ	0xFD8
  5919                           
  5920 ;; *************** function ___ftadd *****************
  5921 ;; Defined at:
  5922 ;;		line 86 in file "/Applications/microchip/xc8/v1.44/sources/common/ftadd.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;  f1              3  [STACK] float 
  5925 ;;  f2              3  [STACK] float 
  5926 ;; Auto vars:     Size  Location     Type
  5927 ;;  exp1            1  [STACK] unsigned char 
  5928 ;;  exp2            1  [STACK] unsigned char 
  5929 ;;  sign            1  [STACK] unsigned char 
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  3  [STACK] float 
  5932 ;; Registers used:
  5933 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+6, btemp+7, btemp+8, btemp+9, b
      +temp+10, btemp+11
  5934 ;; Tracked objects:
  5935 ;;		On entry : 0/0
  5936 ;;		On exit  : 0/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5939 ;;      Params:         0       0       0       0       0       0       0
  5940 ;;      Locals:         0       0       0       0       0       0       0
  5941 ;;      Temps:          0       0       0       0       0       0       0
  5942 ;;      Totals:         0       0       0       0       0       0       0
  5943 ;;Total ram usage:        0 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; Hardware stack levels required when called:    5
  5946 ;; This function calls:
  5947 ;;		___ftpack
  5948 ;; This function is called by:
  5949 ;;		___ftsub
  5950 ;;		_round
  5951 ;; This function uses a reentrant model
  5952 ;;
  5953                           
  5954                           	psect	text31
  5955  000B62                     __ptext31:
  5956                           	opt stack 0
  5957  000B62                     ___ftadd:
  5958                           	opt stack 0
  5959                           
  5960                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0
  5961  000B62  52E6               	movf	postinc1,f,c
  5962  000B64  52E6               	movf	postinc1,f,c
  5963  000B66  52E6               	movf	postinc1,f,c
  5964                           
  5965                           ;incstack = 0
  5966  000B68  0E0F               	movlw	15
  5967  000B6A  6E5A               	movwf	btemp+11,c
  5968                           
  5969                           ;stkvar	___ftadd@f1 @ sp[(-3)+-3]
  5970  000B6C  0EFA               	movlw	-6
  5971  000B6E  CFE3 F055          	movff	plusw1,btemp+6
  5972  000B72  0EFB               	movlw	-5
  5973  000B74  CFE3 F056          	movff	plusw1,btemp+7
  5974  000B78  0EFC               	movlw	-4
  5975  000B7A  CFE3 F057          	movff	plusw1,btemp+8
  5976  000B7E  285A               	incf	btemp+11,w,c
  5977  000B80  6E4F               	movwf	btemp,c
  5978  000B82  D004               	goto	u151_20
  5979  000B84                     u151_25:
  5980  000B84  90D8               	bcf	status,0,c
  5981  000B86  3257               	rrcf	btemp+8,f,c
  5982  000B88  3256               	rrcf	btemp+7,f,c
  5983  000B8A  3255               	rrcf	btemp+6,f,c
  5984  000B8C                     u151_20:
  5985  000B8C  2E4F               	decfsz	btemp,f,c
  5986  000B8E  D7FA               	goto	u151_25
  5987  000B90  5055               	movf	btemp+6,w,c
  5988  000B92  6E5A               	movwf	btemp+11,c
  5989                           
  5990                           ;stkvar	___ftadd@exp1 @ sp[(-3)+0]
  5991  000B94  0EFD               	movlw	-3
  5992  000B96  C05A  FFE3         	movff	btemp+11,plusw1
  5993  000B9A  0E0F               	movlw	15
  5994  000B9C  6E5A               	movwf	btemp+11,c
  5995                           
  5996                           ;stkvar	___ftadd@f2 @ sp[(-3)+-6]
  5997  000B9E  0EF7               	movlw	-9
  5998  000BA0  CFE3 F055          	movff	plusw1,btemp+6
  5999  000BA4  0EF8               	movlw	-8
  6000  000BA6  CFE3 F056          	movff	plusw1,btemp+7
  6001  000BAA  0EF9               	movlw	-7
  6002  000BAC  CFE3 F057          	movff	plusw1,btemp+8
  6003  000BB0  285A               	incf	btemp+11,w,c
  6004  000BB2  6E4F               	movwf	btemp,c
  6005  000BB4  D004               	goto	u152_20
  6006  000BB6                     u152_25:
  6007  000BB6  90D8               	bcf	status,0,c
  6008  000BB8  3257               	rrcf	btemp+8,f,c
  6009  000BBA  3256               	rrcf	btemp+7,f,c
  6010  000BBC  3255               	rrcf	btemp+6,f,c
  6011  000BBE                     u152_20:
  6012  000BBE  2E4F               	decfsz	btemp,f,c
  6013  000BC0  D7FA               	goto	u152_25
  6014  000BC2  5055               	movf	btemp+6,w,c
  6015  000BC4  6E5A               	movwf	btemp+11,c
  6016                           
  6017                           ;stkvar	___ftadd@exp2 @ sp[(-3)+1]
  6018  000BC6  0EFE               	movlw	-2
  6019  000BC8  C05A  FFE3         	movff	btemp+11,plusw1
  6020                           
  6021                           ;stkvar	___ftadd@exp1 @ sp[(-3)+0]
  6022  000BCC  0EFD               	movlw	-3
  6023  000BCE  50E3               	movf	plusw1,w,c
  6024  000BD0  B4D8               	btfsc	status,2,c
  6025  000BD2  D018               	goto	u155_20
  6026                           
  6027                           ;stkvar	___ftadd@exp2 @ sp[(-3)+1]
  6028                           ;stkvar	___ftadd@exp1 @ sp[(-3)+0]
  6029  000BD4  50E1               	movf	fsr1l,w,c
  6030  000BD6  0FFD               	addlw	-3
  6031  000BD8  6ED9               	movwf	fsr2l,c
  6032  000BDA  50E2               	movf	fsr1h,w,c
  6033  000BDC  6EDA               	movwf	fsr2h,c
  6034  000BDE  0EFF               	movlw	255
  6035  000BE0  22DA               	addwfc	fsr2h,f,c
  6036  000BE2  0EFE               	movlw	-2
  6037  000BE4  50E3               	movf	plusw1,w,c
  6038  000BE6  5CDE               	subwf	postinc2,w,c
  6039  000BE8  B0D8               	btfsc	status,0,c
  6040  000BEA  D014               	goto	l2449
  6041                           
  6042                           ;stkvar	___ftadd@exp1 @ sp[(-3)+0]
  6043  000BEC  0EFD               	movlw	-3
  6044  000BEE  CFE3 F05A          	movff	plusw1,btemp+11
  6045                           
  6046                           ;stkvar	___ftadd@exp2 @ sp[(-3)+1]
  6047  000BF2  0EFE               	movlw	-2
  6048  000BF4  CFE3 F059          	movff	plusw1,btemp+10
  6049  000BF8  505A               	movf	btemp+11,w,c
  6050  000BFA  5C59               	subwf	btemp+10,w,c
  6051  000BFC  6E5A               	movwf	btemp+11,c
  6052  000BFE  0E18               	movlw	24
  6053  000C00  645A               	cpfsgt	btemp+11,c
  6054  000C02  D008               	goto	l2449
  6055  000C04                     u155_20:
  6056                           
  6057                           ;stkvar	___ftadd@f2 @ sp[(-3)+-6]
  6058  000C04  0EF7               	movlw	-9
  6059  000C06  CFE3 F04F          	movff	plusw1,btemp
  6060  000C0A  0EF8               	movlw	-8
  6061  000C0C  CFE3 F050          	movff	plusw1,btemp+1
  6062  000C10  0EF9               	movlw	-7
  6063  000C12  D023               	goto	L4
  6064  000C14                     l2449:
  6065                           
  6066                           ;stkvar	___ftadd@exp2 @ sp[(-3)+1]
  6067  000C14  0EFE               	movlw	-2
  6068  000C16  50E3               	movf	plusw1,w,c
  6069  000C18  B4D8               	btfsc	status,2,c
  6070  000C1A  D018               	goto	u158_20
  6071                           
  6072                           ;stkvar	___ftadd@exp1 @ sp[(-3)+0]
  6073                           ;stkvar	___ftadd@exp2 @ sp[(-3)+1]
  6074  000C1C  50E1               	movf	fsr1l,w,c
  6075  000C1E  0FFE               	addlw	-2
  6076  000C20  6ED9               	movwf	fsr2l,c
  6077  000C22  50E2               	movf	fsr1h,w,c
  6078  000C24  6EDA               	movwf	fsr2h,c
  6079  000C26  0EFF               	movlw	255
  6080  000C28  22DA               	addwfc	fsr2h,f,c
  6081  000C2A  0EFD               	movlw	-3
  6082  000C2C  50E3               	movf	plusw1,w,c
  6083  000C2E  5CDE               	subwf	postinc2,w,c
  6084  000C30  B0D8               	btfsc	status,0,c
  6085  000C32  D016               	goto	l2459
  6086                           
  6087                           ;stkvar	___ftadd@exp2 @ sp[(-3)+1]
  6088  000C34  0EFE               	movlw	-2
  6089  000C36  CFE3 F05A          	movff	plusw1,btemp+11
  6090                           
  6091                           ;stkvar	___ftadd@exp1 @ sp[(-3)+0]
  6092  000C3A  0EFD               	movlw	-3
  6093  000C3C  CFE3 F059          	movff	plusw1,btemp+10
  6094  000C40  505A               	movf	btemp+11,w,c
  6095  000C42  5C59               	subwf	btemp+10,w,c
  6096  000C44  6E5A               	movwf	btemp+11,c
  6097  000C46  0E18               	movlw	24
  6098  000C48  645A               	cpfsgt	btemp+11,c
  6099  000C4A  D00A               	goto	l2459
  6100  000C4C                     u158_20:
  6101                           
  6102                           ;stkvar	___ftadd@f1 @ sp[(-3)+-3]
  6103  000C4C  0EFA               	movlw	-6
  6104  000C4E  CFE3 F04F          	movff	plusw1,btemp
  6105  000C52  0EFB               	movlw	-5
  6106  000C54  CFE3 F050          	movff	plusw1,btemp+1
  6107  000C58  0EFC               	movlw	-4
  6108  000C5A                     L4:
  6109  000C5A  CFE3 F051          	movff	plusw1,btemp+2
  6110  000C5E  D102               	goto	l746
  6111  000C60                     l2459:
  6112                           
  6113                           ;stkvar	___ftadd@sign @ sp[(-3)+2]
  6114  000C60  0EFF               	movlw	-1
  6115  000C62  6AE3               	clrf	plusw1,c
  6116  000C64  82E3               	bsf	plusw1,1,c
  6117  000C66  84E3               	bsf	plusw1,2,c	;indir
  6118                           
  6119                           ;stkvar	___ftadd@f1 @ sp[(-3)+-3]
  6120  000C68  0EFC               	movlw	-4
  6121  000C6A  AEE3               	btfss	plusw1,7,c
  6122  000C6C  D002               	goto	l750
  6123                           
  6124                           ;stkvar	___ftadd@sign @ sp[(-3)+2]
  6125  000C6E  0EFF               	movlw	-1
  6126  000C70  8EE3               	bsf	plusw1,7,c
  6127  000C72                     l750:
  6128                           
  6129                           ;stkvar	___ftadd@f2 @ sp[(-3)+-6]
  6130  000C72  0EF9               	movlw	-7
  6131  000C74  AEE3               	btfss	plusw1,7,c
  6132  000C76  D002               	goto	l751
  6133                           
  6134                           ;stkvar	___ftadd@sign @ sp[(-3)+2]
  6135  000C78  0EFF               	movlw	-1
  6136  000C7A  8CE3               	bsf	plusw1,6,c
  6137  000C7C                     l751:
  6138                           
  6139                           ;stkvar	___ftadd@f1 @ sp[(-3)+-3]
  6140  000C7C  0EFB               	movlw	-5
  6141  000C7E  8EE3               	bsf	plusw1,7,c
  6142                           
  6143                           ;stkvar	___ftadd@f1 @ sp[(-3)+-3]
  6144  000C80  0EFC               	movlw	-4
  6145  000C82  6AE3               	clrf	plusw1,c
  6146                           
  6147                           ;stkvar	___ftadd@f2 @ sp[(-3)+-6]
  6148  000C84  0EF8               	movlw	-8
  6149  000C86  8EE3               	bsf	plusw1,7,c
  6150                           
  6151                           ;stkvar	___ftadd@f2 @ sp[(-3)+-6]
  6152  000C88  0EF9               	movlw	-7
  6153  000C8A  6AE3               	clrf	plusw1,c
  6154                           
  6155                           ;stkvar	___ftadd@exp2 @ sp[(-3)+1]
  6156                           ;stkvar	___ftadd@exp1 @ sp[(-3)+0]
  6157  000C8C  50E1               	movf	fsr1l,w,c
  6158  000C8E  0FFD               	addlw	-3
  6159  000C90  6ED9               	movwf	fsr2l,c
  6160  000C92  50E2               	movf	fsr1h,w,c
  6161  000C94  6EDA               	movwf	fsr2h,c
  6162  000C96  0EFF               	movlw	255
  6163  000C98  22DA               	addwfc	fsr2h,f,c
  6164  000C9A  0EFE               	movlw	-2
  6165  000C9C  50E3               	movf	plusw1,w,c
  6166  000C9E  5CDE               	subwf	postinc2,w,c
  6167  000CA0  B0D8               	btfsc	status,0,c
  6168  000CA2  D035               	goto	l2481
  6169  000CA4                     u161_20:
  6170                           
  6171                           ;stkvar	___ftadd@f2 @ sp[(-3)+-6]
  6172  000CA4  90D8               	bcf	status,0,c
  6173  000CA6  0EF7               	movlw	-9
  6174  000CA8  36E3               	rlcf	plusw1,f,c
  6175  000CAA  0EF8               	movlw	-8
  6176  000CAC  36E3               	rlcf	plusw1,f,c
  6177  000CAE  0EF9               	movlw	-7
  6178  000CB0  36E3               	rlcf	plusw1,f,c
  6179                           
  6180                           ;stkvar	___ftadd@exp2 @ sp[(-3)+1]
  6181  000CB2  0EFE               	movlw	-2
  6182  000CB4  06E3               	decf	plusw1,f,c
  6183                           
  6184                           ;stkvar	___ftadd@exp1 @ sp[(-3)+0]
  6185                           ;stkvar	___ftadd@exp2 @ sp[(-3)+1]
  6186  000CB6  50E1               	movf	fsr1l,w,c
  6187  000CB8  0FFE               	addlw	-2
  6188  000CBA  6ED9               	movwf	fsr2l,c
  6189  000CBC  50E2               	movf	fsr1h,w,c
  6190  000CBE  6EDA               	movwf	fsr2h,c
  6191  000CC0  0EFF               	movlw	255
  6192  000CC2  22DA               	addwfc	fsr2h,f,c
  6193  000CC4  0EFD               	movlw	-3
  6194  000CC6  50E3               	movf	plusw1,w,c
  6195  000CC8  18DE               	xorwf	postinc2,w,c
  6196  000CCA  B4D8               	btfsc	status,2,c
  6197  000CCC  D013               	goto	l2479
  6198                           
  6199                           ;stkvar	___ftadd@sign @ sp[(-3)+2]
  6200  000CCE  0EFF               	movlw	-1
  6201  000CD0  06E3               	decf	plusw1,f,c
  6202  000CD2  0EFF               	movlw	-1
  6203  000CD4  CFE3 F05A          	movff	plusw1,btemp+11
  6204  000CD8  0E07               	movlw	7
  6205  000CDA  165A               	andwf	btemp+11,f,c
  6206  000CDC  B4D8               	btfsc	status,2,c
  6207  000CDE  D00A               	goto	l2479
  6208  000CE0  D7E1               	goto	u161_20
  6209  000CE2                     l2477:
  6210                           
  6211                           ;stkvar	___ftadd@f1 @ sp[(-3)+-3]
  6212  000CE2  90D8               	bcf	status,0,c
  6213  000CE4  0EFC               	movlw	-4
  6214  000CE6  32E3               	rrcf	plusw1,f,c
  6215  000CE8  0EFB               	movlw	-5
  6216  000CEA  32E3               	rrcf	plusw1,f,c
  6217  000CEC  0EFA               	movlw	-6
  6218  000CEE  32E3               	rrcf	plusw1,f,c
  6219                           
  6220                           ;stkvar	___ftadd@exp1 @ sp[(-3)+0]
  6221  000CF0  0EFD               	movlw	-3
  6222  000CF2  2AE3               	incf	plusw1,f,c
  6223  000CF4                     l2479:
  6224                           
  6225                           ;stkvar	___ftadd@exp2 @ sp[(-3)+1]
  6226                           ;stkvar	___ftadd@exp1 @ sp[(-3)+0]
  6227  000CF4  50E1               	movf	fsr1l,w,c
  6228  000CF6  0FFD               	addlw	-3
  6229  000CF8  6ED9               	movwf	fsr2l,c
  6230  000CFA  50E2               	movf	fsr1h,w,c
  6231  000CFC  6EDA               	movwf	fsr2h,c
  6232  000CFE  0EFF               	movlw	255
  6233  000D00  22DA               	addwfc	fsr2h,f,c
  6234  000D02  0EFE               	movlw	-2
  6235  000D04  50E3               	movf	plusw1,w,c
  6236  000D06  18DE               	xorwf	postinc2,w,c
  6237  000D08  B4D8               	btfsc	status,2,c
  6238  000D0A  D041               	goto	u168_20
  6239  000D0C  D7EA               	goto	l2477
  6240  000D0E                     l2481:
  6241                           
  6242                           ;stkvar	___ftadd@exp1 @ sp[(-3)+0]
  6243                           ;stkvar	___ftadd@exp2 @ sp[(-3)+1]
  6244  000D0E  50E1               	movf	fsr1l,w,c
  6245  000D10  0FFE               	addlw	-2
  6246  000D12  6ED9               	movwf	fsr2l,c
  6247  000D14  50E2               	movf	fsr1h,w,c
  6248  000D16  6EDA               	movwf	fsr2h,c
  6249  000D18  0EFF               	movlw	255
  6250  000D1A  22DA               	addwfc	fsr2h,f,c
  6251  000D1C  0EFD               	movlw	-3
  6252  000D1E  50E3               	movf	plusw1,w,c
  6253  000D20  5CDE               	subwf	postinc2,w,c
  6254  000D22  B0D8               	btfsc	status,0,c
  6255  000D24  D034               	goto	u168_20
  6256  000D26                     u165_20:
  6257                           
  6258                           ;stkvar	___ftadd@f1 @ sp[(-3)+-3]
  6259  000D26  90D8               	bcf	status,0,c
  6260  000D28  0EFA               	movlw	-6
  6261  000D2A  36E3               	rlcf	plusw1,f,c
  6262  000D2C  0EFB               	movlw	-5
  6263  000D2E  36E3               	rlcf	plusw1,f,c
  6264  000D30  0EFC               	movlw	-4
  6265  000D32  36E3               	rlcf	plusw1,f,c
  6266                           
  6267                           ;stkvar	___ftadd@exp1 @ sp[(-3)+0]
  6268  000D34  0EFD               	movlw	-3
  6269  000D36  06E3               	decf	plusw1,f,c
  6270                           
  6271                           ;stkvar	___ftadd@exp1 @ sp[(-3)+0]
  6272                           ;stkvar	___ftadd@exp2 @ sp[(-3)+1]
  6273  000D38  50E1               	movf	fsr1l,w,c
  6274  000D3A  0FFE               	addlw	-2
  6275  000D3C  6ED9               	movwf	fsr2l,c
  6276  000D3E  50E2               	movf	fsr1h,w,c
  6277  000D40  6EDA               	movwf	fsr2h,c
  6278  000D42  0EFF               	movlw	255
  6279  000D44  22DA               	addwfc	fsr2h,f,c
  6280  000D46  0EFD               	movlw	-3
  6281  000D48  50E3               	movf	plusw1,w,c
  6282  000D4A  18DE               	xorwf	postinc2,w,c
  6283  000D4C  B4D8               	btfsc	status,2,c
  6284  000D4E  D013               	goto	l2491
  6285                           
  6286                           ;stkvar	___ftadd@sign @ sp[(-3)+2]
  6287  000D50  0EFF               	movlw	-1
  6288  000D52  06E3               	decf	plusw1,f,c
  6289  000D54  0EFF               	movlw	-1
  6290  000D56  CFE3 F05A          	movff	plusw1,btemp+11
  6291  000D5A  0E07               	movlw	7
  6292  000D5C  165A               	andwf	btemp+11,f,c
  6293  000D5E  B4D8               	btfsc	status,2,c
  6294  000D60  D00A               	goto	l2491
  6295  000D62  D7E1               	goto	u165_20
  6296  000D64                     l2489:
  6297                           
  6298                           ;stkvar	___ftadd@f2 @ sp[(-3)+-6]
  6299  000D64  90D8               	bcf	status,0,c
  6300  000D66  0EF9               	movlw	-7
  6301  000D68  32E3               	rrcf	plusw1,f,c
  6302  000D6A  0EF8               	movlw	-8
  6303  000D6C  32E3               	rrcf	plusw1,f,c
  6304  000D6E  0EF7               	movlw	-9
  6305  000D70  32E3               	rrcf	plusw1,f,c
  6306                           
  6307                           ;stkvar	___ftadd@exp2 @ sp[(-3)+1]
  6308  000D72  0EFE               	movlw	-2
  6309  000D74  2AE3               	incf	plusw1,f,c
  6310  000D76                     l2491:
  6311                           
  6312                           ;stkvar	___ftadd@exp2 @ sp[(-3)+1]
  6313                           ;stkvar	___ftadd@exp1 @ sp[(-3)+0]
  6314  000D76  50E1               	movf	fsr1l,w,c
  6315  000D78  0FFD               	addlw	-3
  6316  000D7A  6ED9               	movwf	fsr2l,c
  6317  000D7C  50E2               	movf	fsr1h,w,c
  6318  000D7E  6EDA               	movwf	fsr2h,c
  6319  000D80  0EFF               	movlw	255
  6320  000D82  22DA               	addwfc	fsr2h,f,c
  6321  000D84  0EFE               	movlw	-2
  6322  000D86  50E3               	movf	plusw1,w,c
  6323  000D88  18DE               	xorwf	postinc2,w,c
  6324  000D8A  A4D8               	btfss	status,2,c
  6325  000D8C  D7EB               	goto	l2489
  6326  000D8E                     u168_20:
  6327                           
  6328                           ;stkvar	___ftadd@sign @ sp[(-3)+2]
  6329  000D8E  0EFF               	movlw	-1
  6330  000D90  AEE3               	btfss	plusw1,7,c
  6331  000D92  D011               	goto	l2499
  6332                           
  6333                           ;stkvar	___ftadd@f1 @ sp[(-3)+-3]
  6334  000D94  0EFA               	movlw	-6
  6335  000D96  1EE3               	comf	plusw1,f,c
  6336  000D98  0EFB               	movlw	-5
  6337  000D9A  1EE3               	comf	plusw1,f,c
  6338  000D9C  0EFC               	movlw	-4
  6339  000D9E  1EE3               	comf	plusw1,f,c
  6340                           
  6341                           ;stkvar	___ftadd@f1 @ sp[(-3)+-3]
  6342  000DA0  50E1               	movf	fsr1l,w,c
  6343  000DA2  0FFA               	addlw	-6
  6344  000DA4  6ED9               	movwf	fsr2l,c
  6345  000DA6  50E2               	movf	fsr1h,w,c
  6346  000DA8  6EDA               	movwf	fsr2h,c
  6347  000DAA  0EFF               	movlw	255
  6348  000DAC  22DA               	addwfc	fsr2h,f,c
  6349  000DAE  2ADE               	incf	postinc2,f,c
  6350  000DB0  0E00               	movlw	0
  6351  000DB2  22DE               	addwfc	postinc2,f,c
  6352  000DB4  22DE               	addwfc	postinc2,f,c
  6353  000DB6                     l2499:
  6354                           
  6355                           ;stkvar	___ftadd@sign @ sp[(-3)+2]
  6356  000DB6  0EFF               	movlw	-1
  6357  000DB8  ACE3               	btfss	plusw1,6,c
  6358  000DBA  D011               	goto	l2505
  6359                           
  6360                           ;stkvar	___ftadd@f2 @ sp[(-3)+-6]
  6361  000DBC  0EF7               	movlw	-9
  6362  000DBE  1EE3               	comf	plusw1,f,c
  6363  000DC0  0EF8               	movlw	-8
  6364  000DC2  1EE3               	comf	plusw1,f,c
  6365  000DC4  0EF9               	movlw	-7
  6366  000DC6  1EE3               	comf	plusw1,f,c
  6367                           
  6368                           ;stkvar	___ftadd@f2 @ sp[(-3)+-6]
  6369  000DC8  50E1               	movf	fsr1l,w,c
  6370  000DCA  0FF7               	addlw	-9
  6371  000DCC  6ED9               	movwf	fsr2l,c
  6372  000DCE  50E2               	movf	fsr1h,w,c
  6373  000DD0  6EDA               	movwf	fsr2h,c
  6374  000DD2  0EFF               	movlw	255
  6375  000DD4  22DA               	addwfc	fsr2h,f,c
  6376  000DD6  2ADE               	incf	postinc2,f,c
  6377  000DD8  0E00               	movlw	0
  6378  000DDA  22DE               	addwfc	postinc2,f,c
  6379  000DDC  22DE               	addwfc	postinc2,f,c
  6380  000DDE                     l2505:
  6381                           
  6382                           ;stkvar	___ftadd@sign @ sp[(-3)+2]
  6383  000DDE  0EFF               	movlw	-1
  6384  000DE0  6AE3               	clrf	plusw1,c
  6385                           
  6386                           ;stkvar	___ftadd@f1 @ sp[(-3)+-3]
  6387                           ;stkvar	___ftadd@f2 @ sp[(-3)+-6]
  6388  000DE2  0EF7               	movlw	-9
  6389  000DE4  50E3               	movf	plusw1,w,c
  6390  000DE6  6E4F               	movwf	btemp,c
  6391  000DE8  0EFA               	movlw	-6
  6392  000DEA  50E3               	movf	plusw1,w,c
  6393  000DEC  264F               	addwf	btemp,f,c
  6394  000DEE  0EF7               	movlw	-9
  6395  000DF0  C04F  FFE3         	movff	btemp,plusw1
  6396  000DF4  0EF8               	movlw	-8
  6397  000DF6  50E3               	movf	plusw1,w,c
  6398  000DF8  6E4F               	movwf	btemp,c
  6399  000DFA  0EFB               	movlw	-5
  6400  000DFC  50E3               	movf	plusw1,w,c
  6401  000DFE  224F               	addwfc	btemp,f,c
  6402  000E00  0EF8               	movlw	-8
  6403  000E02  C04F  FFE3         	movff	btemp,plusw1
  6404  000E06  0EF9               	movlw	-7
  6405  000E08  50E3               	movf	plusw1,w,c
  6406  000E0A  6E4F               	movwf	btemp,c
  6407  000E0C  0EFC               	movlw	-4
  6408  000E0E  50E3               	movf	plusw1,w,c
  6409  000E10  224F               	addwfc	btemp,f,c
  6410  000E12  0EF9               	movlw	-7
  6411  000E14  C04F  FFE3         	movff	btemp,plusw1
  6412                           
  6413                           ;stkvar	___ftadd@f2 @ sp[(-3)+-6]
  6414  000E18  0EF9               	movlw	-7
  6415  000E1A  AEE3               	btfss	plusw1,7,c
  6416  000E1C  D014               	goto	l2517
  6417                           
  6418                           ;stkvar	___ftadd@f2 @ sp[(-3)+-6]
  6419  000E1E  0EF7               	movlw	-9
  6420  000E20  1EE3               	comf	plusw1,f,c
  6421  000E22  0EF8               	movlw	-8
  6422  000E24  1EE3               	comf	plusw1,f,c
  6423  000E26  0EF9               	movlw	-7
  6424  000E28  1EE3               	comf	plusw1,f,c
  6425                           
  6426                           ;stkvar	___ftadd@f2 @ sp[(-3)+-6]
  6427  000E2A  50E1               	movf	fsr1l,w,c
  6428  000E2C  0FF7               	addlw	-9
  6429  000E2E  6ED9               	movwf	fsr2l,c
  6430  000E30  50E2               	movf	fsr1h,w,c
  6431  000E32  6EDA               	movwf	fsr2h,c
  6432  000E34  0EFF               	movlw	255
  6433  000E36  22DA               	addwfc	fsr2h,f,c
  6434  000E38  2ADE               	incf	postinc2,f,c
  6435  000E3A  0E00               	movlw	0
  6436  000E3C  22DE               	addwfc	postinc2,f,c
  6437  000E3E  22DE               	addwfc	postinc2,f,c
  6438                           
  6439                           ;stkvar	___ftadd@sign @ sp[(-3)+2]
  6440  000E40  0EFF               	movlw	-1
  6441  000E42  6AE3               	clrf	plusw1,c
  6442  000E44  2AE3               	incf	plusw1,f,c
  6443  000E46                     l2517:
  6444                           
  6445                           ;stkvar	___ftadd@sign @ sp[(-3)+2]
  6446  000E46  0EFF               	movlw	-1
  6447  000E48  50E3               	movf	plusw1,w,c
  6448  000E4A  6EE6               	movwf	postinc1,c
  6449                           
  6450                           ;stkvar	___ftadd@exp1 @ sp[(-4)+0]
  6451  000E4C  0EFC               	movlw	-4
  6452  000E4E  50E3               	movf	plusw1,w,c
  6453  000E50  6EE6               	movwf	postinc1,c
  6454                           
  6455                           ;stkvar	___ftadd@f2 @ sp[(-5)+-6]
  6456  000E52  0EF5               	movlw	-11
  6457  000E54  CFE3 FFE6          	movff	plusw1,postinc1
  6458  000E58  CFE3 FFE6          	movff	plusw1,postinc1
  6459  000E5C  CFE3 FFE6          	movff	plusw1,postinc1
  6460  000E60  EC72  F00E         	call	___ftpack	;wreg free
  6461  000E64                     l746:
  6462                           
  6463                           ; ___ftadd: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsi
      +                          ze = 6, vargsize = 0
  6464  000E64  0EF7               	movlw	247
  6465  000E66  26E1               	addwf	fsr1l,f,c
  6466  000E68  0EFF               	movlw	255
  6467  000E6A  22E2               	addwfc	fsr1h,f,c
  6468  000E6C  0012               	return		;funcret
  6469  000E6E                     __end_of___ftadd:
  6470                           	opt stack 0
  6471                           tosu	equ	0xFFF
  6472                           tosh	equ	0xFFE
  6473                           tosl	equ	0xFFD
  6474                           stkptr	equ	0xFFC
  6475                           tblptru	equ	0xFF8
  6476                           tblptrh	equ	0xFF7
  6477                           tblptrl	equ	0xFF6
  6478                           tablat	equ	0xFF5
  6479                           prodh	equ	0xFF4
  6480                           prodl	equ	0xFF3
  6481                           intcon	equ	0xFF2
  6482                           indf0	equ	0xFEF
  6483                           postinc0	equ	0xFEE
  6484                           fsr0h	equ	0xFEA
  6485                           fsr0l	equ	0xFE9
  6486                           wreg	equ	0xFE8
  6487                           postinc1	equ	0xFE6
  6488                           postdec1	equ	0xFE5
  6489                           plusw1	equ	0xFE3
  6490                           fsr1h	equ	0xFE2
  6491                           fsr1l	equ	0xFE1
  6492                           bsr	equ	0xFE0
  6493                           indf2	equ	0xFDF
  6494                           postinc2	equ	0xFDE
  6495                           postdec2	equ	0xFDD
  6496                           plusw2	equ	0xFDB
  6497                           fsr2h	equ	0xFDA
  6498                           fsr2l	equ	0xFD9
  6499                           status	equ	0xFD8
  6500                           
  6501 ;; *************** function ___lwtoft *****************
  6502 ;; Defined at:
  6503 ;;		line 28 in file "/Applications/microchip/xc8/v1.44/sources/common/lwtoft.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;  c               2  [STACK] unsigned int 
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;		None
  6508 ;; Return value:  Size  Location     Type
  6509 ;;                  3  [STACK] float 
  6510 ;; Registers used:
  6511 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+6, btemp+7, btemp+8, btemp+9, b
      +temp+10, btemp+11
  6512 ;; Tracked objects:
  6513 ;;		On entry : 0/0
  6514 ;;		On exit  : 0/0
  6515 ;;		Unchanged: 0/0
  6516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6517 ;;      Params:         0       0       0       0       0       0       0
  6518 ;;      Locals:         0       0       0       0       0       0       0
  6519 ;;      Temps:          0       0       0       0       0       0       0
  6520 ;;      Totals:         0       0       0       0       0       0       0
  6521 ;;Total ram usage:        0 bytes
  6522 ;; Hardware stack levels used:    1
  6523 ;; Hardware stack levels required when called:    5
  6524 ;; This function calls:
  6525 ;;		___ftpack
  6526 ;; This function is called by:
  6527 ;;		_cloro
  6528 ;;		_ph
  6529 ;; This function uses a reentrant model
  6530 ;;
  6531                           
  6532                           	psect	text32
  6533  0031BA                     __ptext32:
  6534                           	opt stack 0
  6535  0031BA                     ___lwtoft:
  6536                           	opt stack 21
  6537                           
  6538                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  6539                           ;incstack = 0
  6540  0031BA  0E00               	movlw	0
  6541  0031BC  6EE6               	movwf	postinc1,c
  6542  0031BE  0E8E               	movlw	142
  6543  0031C0  6EE6               	movwf	postinc1,c
  6544                           
  6545                           ;stkvar	___lwtoft@c @ sp[(-2)+-2]
  6546  0031C2  0EFC               	movlw	-4
  6547  0031C4  CFE3 F059          	movff	plusw1,btemp+10
  6548  0031C8  0EFD               	movlw	-3
  6549  0031CA  CFE3 F05A          	movff	plusw1,btemp+11
  6550  0031CE  C059  F055         	movff	btemp+10,btemp+6
  6551  0031D2  C05A  F056         	movff	btemp+11,btemp+7
  6552  0031D6  6A57               	clrf	btemp+8,c
  6553  0031D8  C055  FFE6         	movff	btemp+6,postinc1
  6554  0031DC  C056  FFE6         	movff	btemp+7,postinc1
  6555  0031E0  C057  FFE6         	movff	btemp+8,postinc1
  6556  0031E4  EC72  F00E         	call	___ftpack	;wreg free
  6557                           
  6558                           ; ___lwtoft: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
  6559  0031E8  52E5               	movf	postdec1,f,c
  6560  0031EA  52E5               	movf	postdec1,f,c
  6561  0031EC  0012               	return		;funcret
  6562  0031EE                     __end_of___lwtoft:
  6563                           	opt stack 0
  6564                           tosu	equ	0xFFF
  6565                           tosh	equ	0xFFE
  6566                           tosl	equ	0xFFD
  6567                           stkptr	equ	0xFFC
  6568                           tblptru	equ	0xFF8
  6569                           tblptrh	equ	0xFF7
  6570                           tblptrl	equ	0xFF6
  6571                           tablat	equ	0xFF5
  6572                           prodh	equ	0xFF4
  6573                           prodl	equ	0xFF3
  6574                           intcon	equ	0xFF2
  6575                           indf0	equ	0xFEF
  6576                           postinc0	equ	0xFEE
  6577                           fsr0h	equ	0xFEA
  6578                           fsr0l	equ	0xFE9
  6579                           wreg	equ	0xFE8
  6580                           postinc1	equ	0xFE6
  6581                           postdec1	equ	0xFE5
  6582                           plusw1	equ	0xFE3
  6583                           fsr1h	equ	0xFE2
  6584                           fsr1l	equ	0xFE1
  6585                           bsr	equ	0xFE0
  6586                           indf2	equ	0xFDF
  6587                           postinc2	equ	0xFDE
  6588                           postdec2	equ	0xFDD
  6589                           plusw2	equ	0xFDB
  6590                           fsr2h	equ	0xFDA
  6591                           fsr2l	equ	0xFD9
  6592                           status	equ	0xFD8
  6593                           
  6594 ;; *************** function ___ftmul *****************
  6595 ;; Defined at:
  6596 ;;		line 62 in file "/Applications/microchip/xc8/v1.44/sources/common/ftmul.c"
  6597 ;; Parameters:    Size  Location     Type
  6598 ;;  f1              3  [STACK] float 
  6599 ;;  f2              3  [STACK] float 
  6600 ;; Auto vars:     Size  Location     Type
  6601 ;;  f3_as_produc    3  [STACK] unsigned um
  6602 ;;  sign            1  [STACK] unsigned char 
  6603 ;;  cntr            1  [STACK] unsigned char 
  6604 ;;  exp             1  [STACK] unsigned char 
  6605 ;; Return value:  Size  Location     Type
  6606 ;;                  3  [STACK] float 
  6607 ;; Registers used:
  6608 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+6, btemp+7, btemp+8, btemp+9, b
      +temp+10, btemp+11
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6614 ;;      Params:         0       0       0       0       0       0       0
  6615 ;;      Locals:         0       0       0       0       0       0       0
  6616 ;;      Temps:          0       0       0       0       0       0       0
  6617 ;;      Totals:         0       0       0       0       0       0       0
  6618 ;;Total ram usage:        0 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; Hardware stack levels required when called:    5
  6621 ;; This function calls:
  6622 ;;		___ftpack
  6623 ;; This function is called by:
  6624 ;;		_cloro
  6625 ;;		_ph
  6626 ;; This function uses a reentrant model
  6627 ;;
  6628                           
  6629                           	psect	text33
  6630  001094                     __ptext33:
  6631                           	opt stack 0
  6632  001094                     ___ftmul:
  6633                           	opt stack 0
  6634                           
  6635                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0
  6636  001094  0E06               	movlw	6
  6637  001096  26E1               	addwf	fsr1l,f,c
  6638  001098  0E00               	movlw	0
  6639  00109A  22E2               	addwfc	fsr1h,f,c
  6640                           
  6641                           ;incstack = 0
  6642  00109C  0E0F               	movlw	15
  6643  00109E  6E5A               	movwf	btemp+11,c
  6644                           
  6645                           ;stkvar	___ftmul@f1 @ sp[(-6)+-3]
  6646  0010A0  0EF7               	movlw	-9
  6647  0010A2  CFE3 F055          	movff	plusw1,btemp+6
  6648  0010A6  0EF8               	movlw	-8
  6649  0010A8  CFE3 F056          	movff	plusw1,btemp+7
  6650  0010AC  0EF9               	movlw	-7
  6651  0010AE  CFE3 F057          	movff	plusw1,btemp+8
  6652  0010B2  285A               	incf	btemp+11,w,c
  6653  0010B4  6E4F               	movwf	btemp,c
  6654  0010B6  D004               	goto	u244_20
  6655  0010B8                     u244_25:
  6656  0010B8  90D8               	bcf	status,0,c
  6657  0010BA  3257               	rrcf	btemp+8,f,c
  6658  0010BC  3256               	rrcf	btemp+7,f,c
  6659  0010BE  3255               	rrcf	btemp+6,f,c
  6660  0010C0                     u244_20:
  6661  0010C0  2E4F               	decfsz	btemp,f,c
  6662  0010C2  D7FA               	goto	u244_25
  6663  0010C4  5055               	movf	btemp+6,w,c
  6664  0010C6  6E5A               	movwf	btemp+11,c
  6665                           
  6666                           ;stkvar	___ftmul@exp @ sp[(-6)+5]
  6667  0010C8  0EFF               	movlw	-1
  6668  0010CA  C05A  FFE3         	movff	btemp+11,plusw1
  6669  0010CE  0EFF               	movlw	-1
  6670  0010D0  50E3               	movf	plusw1,w,c
  6671  0010D2  B4D8               	btfsc	status,2,c
  6672  0010D4  D01D               	goto	u247_20
  6673  0010D6  0E0F               	movlw	15
  6674  0010D8  6E5A               	movwf	btemp+11,c
  6675                           
  6676                           ;stkvar	___ftmul@f2 @ sp[(-6)+-6]
  6677  0010DA  0EF4               	movlw	-12
  6678  0010DC  CFE3 F055          	movff	plusw1,btemp+6
  6679  0010E0  0EF5               	movlw	-11
  6680  0010E2  CFE3 F056          	movff	plusw1,btemp+7
  6681  0010E6  0EF6               	movlw	-10
  6682  0010E8  CFE3 F057          	movff	plusw1,btemp+8
  6683  0010EC  285A               	incf	btemp+11,w,c
  6684  0010EE  6E4F               	movwf	btemp,c
  6685  0010F0  D004               	goto	u246_20
  6686  0010F2                     u246_25:
  6687  0010F2  90D8               	bcf	status,0,c
  6688  0010F4  3257               	rrcf	btemp+8,f,c
  6689  0010F6  3256               	rrcf	btemp+7,f,c
  6690  0010F8  3255               	rrcf	btemp+6,f,c
  6691  0010FA                     u246_20:
  6692  0010FA  2E4F               	decfsz	btemp,f,c
  6693  0010FC  D7FA               	goto	u246_25
  6694  0010FE  5055               	movf	btemp+6,w,c
  6695  001100  6E5A               	movwf	btemp+11,c
  6696                           
  6697                           ;stkvar	___ftmul@sign @ sp[(-6)+3]
  6698  001102  0EFD               	movlw	-3
  6699  001104  C05A  FFE3         	movff	btemp+11,plusw1
  6700  001108  0EFD               	movlw	-3
  6701  00110A  50E3               	movf	plusw1,w,c
  6702  00110C  A4D8               	btfss	status,2,c
  6703  00110E  D007               	goto	l3185
  6704  001110                     u247_20:
  6705  001110  0E00               	movlw	0
  6706  001112  6E4F               	movwf	btemp,c
  6707  001114  0E00               	movlw	0
  6708  001116  6E50               	movwf	btemp+1,c
  6709  001118  0E00               	movlw	0
  6710  00111A  6E51               	movwf	btemp+2,c
  6711  00111C  D0C3               	goto	l792
  6712  00111E                     l3185:
  6713  00111E  0E7B               	movlw	123
  6714  001120  6E5A               	movwf	btemp+11,c
  6715                           
  6716                           ;stkvar	___ftmul@sign @ sp[(-6)+3]
  6717  001122  0EFD               	movlw	-3
  6718  001124  50E3               	movf	plusw1,w,c
  6719  001126  245A               	addwf	btemp+11,w,c
  6720  001128  6E59               	movwf	btemp+10,c
  6721                           
  6722                           ;stkvar	___ftmul@exp @ sp[(-6)+5]
  6723  00112A  50E1               	movf	fsr1l,w,c
  6724  00112C  0FFF               	addlw	-1
  6725  00112E  6ED9               	movwf	fsr2l,c
  6726  001130  50E2               	movf	fsr1h,w,c
  6727  001132  6EDA               	movwf	fsr2h,c
  6728  001134  0EFF               	movlw	255
  6729  001136  22DA               	addwfc	fsr2h,f,c
  6730  001138  5059               	movf	btemp+10,w,c
  6731  00113A  26DF               	addwf	indf2,f,c
  6732                           
  6733                           ;stkvar	___ftmul@f1 @ sp[(-6)+-3]
  6734  00113C  0EF9               	movlw	249
  6735  00113E  24E1               	addwf	fsr1l,w,c
  6736  001140  6ED9               	movwf	fsr2l,c
  6737  001142  0EFF               	movlw	255
  6738  001144  20E2               	addwfc	fsr1h,w,c
  6739  001146  6EDA               	movwf	fsr2h,c
  6740  001148  50DF               	movf	indf2,w,c
  6741  00114A  6E5A               	movwf	btemp+11,c
  6742                           
  6743                           ;stkvar	___ftmul@sign @ sp[(-6)+3]
  6744  00114C  0EFD               	movlw	-3
  6745  00114E  C05A  FFE3         	movff	btemp+11,plusw1
  6746                           
  6747                           ;stkvar	___ftmul@f2 @ sp[(-6)+-6]
  6748  001152  0EF6               	movlw	246
  6749  001154  24E1               	addwf	fsr1l,w,c
  6750  001156  6ED9               	movwf	fsr2l,c
  6751  001158  0EFF               	movlw	255
  6752  00115A  20E2               	addwfc	fsr1h,w,c
  6753  00115C  6EDA               	movwf	fsr2h,c
  6754  00115E  50DF               	movf	indf2,w,c
  6755  001160  6E5A               	movwf	btemp+11,c
  6756                           
  6757                           ;stkvar	___ftmul@sign @ sp[(-6)+3]
  6758  001162  50E1               	movf	fsr1l,w,c
  6759  001164  0FFD               	addlw	-3
  6760  001166  6ED9               	movwf	fsr2l,c
  6761  001168  50E2               	movf	fsr1h,w,c
  6762  00116A  6EDA               	movwf	fsr2h,c
  6763  00116C  0EFF               	movlw	255
  6764  00116E  22DA               	addwfc	fsr2h,f,c
  6765  001170  505A               	movf	btemp+11,w,c
  6766  001172  1ADF               	xorwf	indf2,f,c
  6767                           
  6768                           ;stkvar	___ftmul@sign @ sp[(-6)+3]
  6769  001174  0EFD               	movlw	-3
  6770  001176  CFE3 F04F          	movff	plusw1,btemp
  6771  00117A  0E80               	movlw	128
  6772  00117C  164F               	andwf	btemp,f,c
  6773  00117E  0EFD               	movlw	-3
  6774  001180  C04F  FFE3         	movff	btemp,plusw1
  6775                           
  6776                           ;stkvar	___ftmul@f1 @ sp[(-6)+-3]
  6777  001184  0EF8               	movlw	-8
  6778  001186  8EE3               	bsf	plusw1,7,c
  6779                           
  6780                           ;stkvar	___ftmul@f2 @ sp[(-6)+-6]
  6781  001188  0EF5               	movlw	-11
  6782  00118A  8EE3               	bsf	plusw1,7,c
  6783                           
  6784                           ;stkvar	___ftmul@f2 @ sp[(-6)+-6]
  6785  00118C  0EF6               	movlw	-10
  6786  00118E  6AE3               	clrf	plusw1,c
  6787                           
  6788                           ;stkvar	___ftmul@f3_as_product @ sp[(-6)+0]
  6789  001190  0EFA               	movlw	-6
  6790  001192  6AE3               	clrf	plusw1,c
  6791  001194  0EFB               	movlw	-5
  6792  001196  6AE3               	clrf	plusw1,c
  6793  001198  0EFC               	movlw	-4
  6794  00119A  6AE3               	clrf	plusw1,c
  6795  00119C  0E07               	movlw	7
  6796  00119E  6E5A               	movwf	btemp+11,c
  6797                           
  6798                           ;stkvar	___ftmul@cntr @ sp[(-6)+4]
  6799  0011A0  0EFE               	movlw	-2
  6800  0011A2  C05A  FFE3         	movff	btemp+11,plusw1
  6801  0011A6                     l3203:
  6802                           
  6803                           ;stkvar	___ftmul@f1 @ sp[(-6)+-3]
  6804  0011A6  0EF7               	movlw	-9
  6805  0011A8  A0E3               	btfss	plusw1,0,c
  6806  0011AA  D01B               	goto	l3207
  6807                           
  6808                           ;stkvar	___ftmul@f2 @ sp[(-6)+-6]
  6809                           ;stkvar	___ftmul@f3_as_product @ sp[(-6)+0]
  6810  0011AC  0EFA               	movlw	-6
  6811  0011AE  50E3               	movf	plusw1,w,c
  6812  0011B0  6E4F               	movwf	btemp,c
  6813  0011B2  0EF4               	movlw	-12
  6814  0011B4  50E3               	movf	plusw1,w,c
  6815  0011B6  264F               	addwf	btemp,f,c
  6816  0011B8  0EFA               	movlw	-6
  6817  0011BA  C04F  FFE3         	movff	btemp,plusw1
  6818  0011BE  0EFB               	movlw	-5
  6819  0011C0  50E3               	movf	plusw1,w,c
  6820  0011C2  6E4F               	movwf	btemp,c
  6821  0011C4  0EF5               	movlw	-11
  6822  0011C6  50E3               	movf	plusw1,w,c
  6823  0011C8  224F               	addwfc	btemp,f,c
  6824  0011CA  0EFB               	movlw	-5
  6825  0011CC  C04F  FFE3         	movff	btemp,plusw1
  6826  0011D0  0EFC               	movlw	-4
  6827  0011D2  50E3               	movf	plusw1,w,c
  6828  0011D4  6E4F               	movwf	btemp,c
  6829  0011D6  0EF6               	movlw	-10
  6830  0011D8  50E3               	movf	plusw1,w,c
  6831  0011DA  224F               	addwfc	btemp,f,c
  6832  0011DC  0EFC               	movlw	-4
  6833  0011DE  C04F  FFE3         	movff	btemp,plusw1
  6834  0011E2                     l3207:
  6835                           
  6836                           ;stkvar	___ftmul@f1 @ sp[(-6)+-3]
  6837  0011E2  90D8               	bcf	status,0,c
  6838  0011E4  0EF9               	movlw	-7
  6839  0011E6  32E3               	rrcf	plusw1,f,c
  6840  0011E8  0EF8               	movlw	-8
  6841  0011EA  32E3               	rrcf	plusw1,f,c
  6842  0011EC  0EF7               	movlw	-9
  6843  0011EE  32E3               	rrcf	plusw1,f,c
  6844                           
  6845                           ;stkvar	___ftmul@f2 @ sp[(-6)+-6]
  6846  0011F0  90D8               	bcf	status,0,c
  6847  0011F2  0EF4               	movlw	-12
  6848  0011F4  36E3               	rlcf	plusw1,f,c
  6849  0011F6  0EF5               	movlw	-11
  6850  0011F8  36E3               	rlcf	plusw1,f,c
  6851  0011FA  0EF6               	movlw	-10
  6852  0011FC  36E3               	rlcf	plusw1,f,c
  6853                           
  6854                           ;stkvar	___ftmul@cntr @ sp[(-6)+4]
  6855  0011FE  0EFE               	movlw	-2
  6856  001200  50E3               	movf	plusw1,w,c
  6857  001202  6E4F               	movwf	btemp,c
  6858  001204  0E01               	movlw	1
  6859  001206  5E4F               	subwf	btemp,f,c
  6860  001208  0EFE               	movlw	-2
  6861  00120A  C04F  FFE3         	movff	btemp,plusw1
  6862  00120E  A4D8               	btfss	status,2,c
  6863  001210  D7CA               	goto	l3203
  6864                           
  6865                           ;stkvar	___ftmul@cntr @ sp[(-6)+4]
  6866  001212  0EFE               	movlw	-2
  6867  001214  6AE3               	clrf	plusw1,c
  6868  001216  80E3               	bsf	plusw1,0,c
  6869  001218  86E3               	bsf	plusw1,3,c	;indir
  6870  00121A                     l797:
  6871                           
  6872                           ;stkvar	___ftmul@f1 @ sp[(-6)+-3]
  6873  00121A  0EF7               	movlw	-9
  6874  00121C  A0E3               	btfss	plusw1,0,c
  6875  00121E  D01B               	goto	l3215
  6876                           
  6877                           ;stkvar	___ftmul@f2 @ sp[(-6)+-6]
  6878                           ;stkvar	___ftmul@f3_as_product @ sp[(-6)+0]
  6879  001220  0EFA               	movlw	-6
  6880  001222  50E3               	movf	plusw1,w,c
  6881  001224  6E4F               	movwf	btemp,c
  6882  001226  0EF4               	movlw	-12
  6883  001228  50E3               	movf	plusw1,w,c
  6884  00122A  264F               	addwf	btemp,f,c
  6885  00122C  0EFA               	movlw	-6
  6886  00122E  C04F  FFE3         	movff	btemp,plusw1
  6887  001232  0EFB               	movlw	-5
  6888  001234  50E3               	movf	plusw1,w,c
  6889  001236  6E4F               	movwf	btemp,c
  6890  001238  0EF5               	movlw	-11
  6891  00123A  50E3               	movf	plusw1,w,c
  6892  00123C  224F               	addwfc	btemp,f,c
  6893  00123E  0EFB               	movlw	-5
  6894  001240  C04F  FFE3         	movff	btemp,plusw1
  6895  001244  0EFC               	movlw	-4
  6896  001246  50E3               	movf	plusw1,w,c
  6897  001248  6E4F               	movwf	btemp,c
  6898  00124A  0EF6               	movlw	-10
  6899  00124C  50E3               	movf	plusw1,w,c
  6900  00124E  224F               	addwfc	btemp,f,c
  6901  001250  0EFC               	movlw	-4
  6902  001252  C04F  FFE3         	movff	btemp,plusw1
  6903  001256                     l3215:
  6904                           
  6905                           ;stkvar	___ftmul@f1 @ sp[(-6)+-3]
  6906  001256  90D8               	bcf	status,0,c
  6907  001258  0EF9               	movlw	-7
  6908  00125A  32E3               	rrcf	plusw1,f,c
  6909  00125C  0EF8               	movlw	-8
  6910  00125E  32E3               	rrcf	plusw1,f,c
  6911  001260  0EF7               	movlw	-9
  6912  001262  32E3               	rrcf	plusw1,f,c
  6913                           
  6914                           ;stkvar	___ftmul@f3_as_product @ sp[(-6)+0]
  6915  001264  90D8               	bcf	status,0,c
  6916  001266  0EFC               	movlw	-4
  6917  001268  32E3               	rrcf	plusw1,f,c
  6918  00126A  0EFB               	movlw	-5
  6919  00126C  32E3               	rrcf	plusw1,f,c
  6920  00126E  0EFA               	movlw	-6
  6921  001270  32E3               	rrcf	plusw1,f,c
  6922                           
  6923                           ;stkvar	___ftmul@cntr @ sp[(-6)+4]
  6924  001272  0EFE               	movlw	-2
  6925  001274  50E3               	movf	plusw1,w,c
  6926  001276  6E4F               	movwf	btemp,c
  6927  001278  0E01               	movlw	1
  6928  00127A  5E4F               	subwf	btemp,f,c
  6929  00127C  0EFE               	movlw	-2
  6930  00127E  C04F  FFE3         	movff	btemp,plusw1
  6931  001282  A4D8               	btfss	status,2,c
  6932  001284  D7CA               	goto	l797
  6933                           
  6934                           ;stkvar	___ftmul@sign @ sp[(-6)+3]
  6935  001286  0EFD               	movlw	-3
  6936  001288  50E3               	movf	plusw1,w,c
  6937  00128A  6EE6               	movwf	postinc1,c
  6938                           
  6939                           ;stkvar	___ftmul@exp @ sp[(-7)+5]
  6940  00128C  0EFE               	movlw	-2
  6941  00128E  50E3               	movf	plusw1,w,c
  6942  001290  6EE6               	movwf	postinc1,c
  6943                           
  6944                           ;stkvar	___ftmul@f3_as_product @ sp[(-8)+0]
  6945  001292  0EF8               	movlw	-8
  6946  001294  CFE3 FFE6          	movff	plusw1,postinc1
  6947  001298  CFE3 FFE6          	movff	plusw1,postinc1
  6948  00129C  CFE3 FFE6          	movff	plusw1,postinc1
  6949  0012A0  EC72  F00E         	call	___ftpack	;wreg free
  6950  0012A4                     l792:
  6951                           
  6952                           ; ___ftmul: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsi
      +                          ze = 6, vargsize = 0
  6953  0012A4  0EF4               	movlw	244
  6954  0012A6  26E1               	addwf	fsr1l,f,c
  6955  0012A8  0EFF               	movlw	255
  6956  0012AA  22E2               	addwfc	fsr1h,f,c
  6957  0012AC  0012               	return		;funcret
  6958  0012AE                     __end_of___ftmul:
  6959                           	opt stack 0
  6960                           tosu	equ	0xFFF
  6961                           tosh	equ	0xFFE
  6962                           tosl	equ	0xFFD
  6963                           stkptr	equ	0xFFC
  6964                           tblptru	equ	0xFF8
  6965                           tblptrh	equ	0xFF7
  6966                           tblptrl	equ	0xFF6
  6967                           tablat	equ	0xFF5
  6968                           prodh	equ	0xFF4
  6969                           prodl	equ	0xFF3
  6970                           intcon	equ	0xFF2
  6971                           indf0	equ	0xFEF
  6972                           postinc0	equ	0xFEE
  6973                           fsr0h	equ	0xFEA
  6974                           fsr0l	equ	0xFE9
  6975                           wreg	equ	0xFE8
  6976                           postinc1	equ	0xFE6
  6977                           postdec1	equ	0xFE5
  6978                           plusw1	equ	0xFE3
  6979                           fsr1h	equ	0xFE2
  6980                           fsr1l	equ	0xFE1
  6981                           bsr	equ	0xFE0
  6982                           indf2	equ	0xFDF
  6983                           postinc2	equ	0xFDE
  6984                           postdec2	equ	0xFDD
  6985                           plusw2	equ	0xFDB
  6986                           fsr2h	equ	0xFDA
  6987                           fsr2l	equ	0xFD9
  6988                           status	equ	0xFD8
  6989                           
  6990 ;; *************** function ___ftpack *****************
  6991 ;; Defined at:
  6992 ;;		line 62 in file "/Applications/microchip/xc8/v1.44/sources/common/float.c"
  6993 ;; Parameters:    Size  Location     Type
  6994 ;;  arg             3  [STACK] unsigned um
  6995 ;;  exp             1  [STACK] unsigned char 
  6996 ;;  sign            1  [STACK] unsigned char 
  6997 ;; Auto vars:     Size  Location     Type
  6998 ;;		None
  6999 ;; Return value:  Size  Location     Type
  7000 ;;                  3  [STACK] float 
  7001 ;; Registers used:
  7002 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11
  7003 ;; Tracked objects:
  7004 ;;		On entry : 0/0
  7005 ;;		On exit  : 0/0
  7006 ;;		Unchanged: 0/0
  7007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7008 ;;      Params:         0       0       0       0       0       0       0
  7009 ;;      Locals:         0       0       0       0       0       0       0
  7010 ;;      Temps:          0       0       0       0       0       0       0
  7011 ;;      Totals:         0       0       0       0       0       0       0
  7012 ;;Total ram usage:        0 bytes
  7013 ;; Hardware stack levels used:    1
  7014 ;; Hardware stack levels required when called:    4
  7015 ;; This function calls:
  7016 ;;		Nothing
  7017 ;; This function is called by:
  7018 ;;		___altoft
  7019 ;;		___ftadd
  7020 ;;		___ftmul
  7021 ;;		___lwtoft
  7022 ;; This function uses a reentrant model
  7023 ;;
  7024                           
  7025                           	psect	text34
  7026  001CE4                     __ptext34:
  7027                           	opt stack 0
  7028  001CE4                     ___ftpack:
  7029                           	opt stack 19
  7030                           
  7031                           ;stkvar	___ftpack@exp @ sp[(0)+-4]
  7032                           
  7033                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, argsize = 5 var
      +                          gsize = 0, retsize = 0
  7034                           ;incstack = 0
  7035  001CE4  0EFC               	movlw	-4
  7036  001CE6  50E3               	movf	plusw1,w,c
  7037  001CE8  B4D8               	btfsc	status,2,c
  7038  001CEA  D00A               	goto	u135_20
  7039                           
  7040                           ;stkvar	___ftpack@arg @ sp[(0)+-3]
  7041  001CEC  0EFD               	movlw	-3
  7042  001CEE  50E3               	movf	plusw1,w,c
  7043  001CF0  E117               	bnz	l2281
  7044  001CF2  0EFE               	movlw	-2
  7045  001CF4  50E3               	movf	plusw1,w,c
  7046  001CF6  E114               	bnz	l2281
  7047  001CF8  0EFF               	movlw	-1
  7048  001CFA  50E3               	movf	plusw1,w,c
  7049  001CFC  A4D8               	btfss	status,2,c
  7050  001CFE  D010               	goto	l2281
  7051  001D00                     u135_20:
  7052  001D00  0E00               	movlw	0
  7053  001D02  6E4F               	movwf	btemp,c
  7054  001D04  0E00               	movlw	0
  7055  001D06  6E50               	movwf	btemp+1,c
  7056  001D08  0E00               	movlw	0
  7057  001D0A  6E51               	movwf	btemp+2,c
  7058  001D0C  D072               	goto	l711
  7059  001D0E                     l2279:
  7060                           
  7061                           ;stkvar	___ftpack@exp @ sp[(0)+-4]
  7062  001D0E  0EFC               	movlw	-4
  7063  001D10  2AE3               	incf	plusw1,f,c
  7064                           
  7065                           ;stkvar	___ftpack@arg @ sp[(0)+-3]
  7066  001D12  90D8               	bcf	status,0,c
  7067  001D14  0EFF               	movlw	-1
  7068  001D16  32E3               	rrcf	plusw1,f,c
  7069  001D18  0EFE               	movlw	-2
  7070  001D1A  32E3               	rrcf	plusw1,f,c
  7071  001D1C  0EFD               	movlw	-3
  7072  001D1E  32E3               	rrcf	plusw1,f,c
  7073  001D20                     l2281:
  7074                           
  7075                           ;stkvar	___ftpack@arg @ sp[(0)+-3]
  7076  001D20  6A58               	clrf	btemp+9,c
  7077  001D22  6A59               	clrf	btemp+10,c
  7078  001D24  0EFF               	movlw	-1
  7079  001D26  CFE3 F05A          	movff	plusw1,btemp+11
  7080  001D2A  0EFE               	movlw	254
  7081  001D2C  165A               	andwf	btemp+11,f,c
  7082  001D2E  B4D8               	btfsc	status,2,c
  7083  001D30  D015               	goto	l2289
  7084  001D32  D7ED               	goto	l2279
  7085  001D34                     l2283:
  7086                           
  7087                           ;stkvar	___ftpack@exp @ sp[(0)+-4]
  7088  001D34  0EFC               	movlw	-4
  7089  001D36  2AE3               	incf	plusw1,f,c
  7090                           
  7091                           ;stkvar	___ftpack@arg @ sp[(0)+-3]
  7092  001D38  50E1               	movf	fsr1l,w,c
  7093  001D3A  0FFD               	addlw	-3
  7094  001D3C  6ED9               	movwf	fsr2l,c
  7095  001D3E  50E2               	movf	fsr1h,w,c
  7096  001D40  6EDA               	movwf	fsr2h,c
  7097  001D42  0EFF               	movlw	255
  7098  001D44  22DA               	addwfc	fsr2h,f,c
  7099  001D46  2ADE               	incf	postinc2,f,c
  7100  001D48  0E00               	movlw	0
  7101  001D4A  22DE               	addwfc	postinc2,f,c
  7102  001D4C  22DE               	addwfc	postinc2,f,c
  7103                           
  7104                           ;stkvar	___ftpack@arg @ sp[(0)+-3]
  7105  001D4E  90D8               	bcf	status,0,c
  7106  001D50  0EFF               	movlw	-1
  7107  001D52  32E3               	rrcf	plusw1,f,c
  7108  001D54  0EFE               	movlw	-2
  7109  001D56  32E3               	rrcf	plusw1,f,c
  7110  001D58  0EFD               	movlw	-3
  7111  001D5A  32E3               	rrcf	plusw1,f,c
  7112  001D5C                     l2289:
  7113                           
  7114                           ;stkvar	___ftpack@arg @ sp[(0)+-3]
  7115  001D5C  6A58               	clrf	btemp+9,c
  7116  001D5E  6A59               	clrf	btemp+10,c
  7117  001D60  0EFF               	movlw	-1
  7118  001D62  CFE3 F05A          	movff	plusw1,btemp+11
  7119  001D66  0EFF               	movlw	255
  7120  001D68  165A               	andwf	btemp+11,f,c
  7121  001D6A  B4D8               	btfsc	status,2,c
  7122  001D6C  D00A               	goto	l2293
  7123  001D6E  D7E2               	goto	l2283
  7124  001D70                     l2291:
  7125                           
  7126                           ;stkvar	___ftpack@exp @ sp[(0)+-4]
  7127  001D70  0EFC               	movlw	-4
  7128  001D72  06E3               	decf	plusw1,f,c
  7129                           
  7130                           ;stkvar	___ftpack@arg @ sp[(0)+-3]
  7131  001D74  90D8               	bcf	status,0,c
  7132  001D76  0EFD               	movlw	-3
  7133  001D78  36E3               	rlcf	plusw1,f,c
  7134  001D7A  0EFE               	movlw	-2
  7135  001D7C  36E3               	rlcf	plusw1,f,c
  7136  001D7E  0EFF               	movlw	-1
  7137  001D80  36E3               	rlcf	plusw1,f,c
  7138  001D82                     l2293:
  7139                           
  7140                           ;stkvar	___ftpack@arg @ sp[(0)+-3]
  7141  001D82  0EFE               	movlw	-2
  7142  001D84  BEE3               	btfsc	plusw1,7,c
  7143  001D86  D006               	goto	u139_20
  7144                           
  7145                           ;stkvar	___ftpack@exp @ sp[(0)+-4]
  7146  001D88  0EFC               	movlw	-4
  7147  001D8A  CFE3 F04F          	movff	plusw1,btemp
  7148  001D8E  0E02               	movlw	2
  7149  001D90  604F               	cpfslt	btemp,c
  7150  001D92  D7EE               	goto	l2291
  7151  001D94                     u139_20:
  7152                           
  7153                           ;stkvar	___ftpack@exp @ sp[(0)+-4]
  7154  001D94  0EFC               	movlw	-4
  7155  001D96  B0E3               	btfsc	plusw1,0,c
  7156  001D98  D002               	goto	l2301
  7157                           
  7158                           ;stkvar	___ftpack@arg @ sp[(0)+-3]
  7159  001D9A  0EFE               	movlw	-2
  7160  001D9C  9EE3               	bcf	plusw1,7,c
  7161  001D9E                     l2301:
  7162                           
  7163                           ;stkvar	___ftpack@exp @ sp[(0)+-4]
  7164  001D9E  50E1               	movf	fsr1l,w,c
  7165  001DA0  0FFC               	addlw	-4
  7166  001DA2  6ED9               	movwf	fsr2l,c
  7167  001DA4  50E2               	movf	fsr1h,w,c
  7168  001DA6  6EDA               	movwf	fsr2h,c
  7169  001DA8  0EFF               	movlw	255
  7170  001DAA  22DA               	addwfc	fsr2h,f,c
  7171  001DAC  90D8               	bcf	status,0,c
  7172  001DAE  32DF               	rrcf	indf2,f,c
  7173                           
  7174                           ;stkvar	___ftpack@exp @ sp[(0)+-4]
  7175  001DB0  0EFC               	movlw	-4
  7176  001DB2  50E3               	movf	plusw1,w,c
  7177  001DB4  6E5A               	movwf	btemp+11,c
  7178  001DB6  6A59               	clrf	btemp+10,c
  7179  001DB8  6A58               	clrf	btemp+9,c
  7180                           
  7181                           ;stkvar	___ftpack@arg @ sp[(0)+-3]
  7182  001DBA  50E1               	movf	fsr1l,w,c
  7183  001DBC  0FFD               	addlw	-3
  7184  001DBE  6ED9               	movwf	fsr2l,c
  7185  001DC0  50E2               	movf	fsr1h,w,c
  7186  001DC2  6EDA               	movwf	fsr2h,c
  7187  001DC4  0EFF               	movlw	255
  7188  001DC6  22DA               	addwfc	fsr2h,f,c
  7189  001DC8  5058               	movf	btemp+9,w,c
  7190  001DCA  12DE               	iorwf	postinc2,f,c
  7191  001DCC  5059               	movf	btemp+10,w,c
  7192  001DCE  12DE               	iorwf	postinc2,f,c
  7193  001DD0  505A               	movf	btemp+11,w,c
  7194  001DD2  12DE               	iorwf	postinc2,f,c
  7195                           
  7196                           ;stkvar	___ftpack@sign @ sp[(0)+-5]
  7197  001DD4  0EFB               	movlw	-5
  7198  001DD6  50E3               	movf	plusw1,w,c
  7199  001DD8  B4D8               	btfsc	status,2,c
  7200  001DDA  D002               	goto	l2309
  7201                           
  7202                           ;stkvar	___ftpack@arg @ sp[(0)+-3]
  7203  001DDC  0EFF               	movlw	-1
  7204  001DDE  8EE3               	bsf	plusw1,7,c
  7205  001DE0                     l2309:
  7206                           
  7207                           ;stkvar	___ftpack@arg @ sp[(0)+-3]
  7208  001DE0  0EFD               	movlw	-3
  7209  001DE2  CFE3 F04F          	movff	plusw1,btemp
  7210  001DE6  0EFE               	movlw	-2
  7211  001DE8  CFE3 F050          	movff	plusw1,btemp+1
  7212  001DEC  0EFF               	movlw	-1
  7213  001DEE  CFE3 F051          	movff	plusw1,btemp+2
  7214  001DF2                     l711:
  7215                           
  7216                           ; ___ftpack: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, args
      +                          ize = 5, vargsize = 0
  7217  001DF2  0EFB               	movlw	251
  7218  001DF4  26E1               	addwf	fsr1l,f,c
  7219  001DF6  0EFF               	movlw	255
  7220  001DF8  22E2               	addwfc	fsr1h,f,c
  7221  001DFA  0012               	return		;funcret
  7222  001DFC                     __end_of___ftpack:
  7223                           	opt stack 0
  7224                           tosu	equ	0xFFF
  7225                           tosh	equ	0xFFE
  7226                           tosl	equ	0xFFD
  7227                           stkptr	equ	0xFFC
  7228                           tblptru	equ	0xFF8
  7229                           tblptrh	equ	0xFF7
  7230                           tblptrl	equ	0xFF6
  7231                           tablat	equ	0xFF5
  7232                           prodh	equ	0xFF4
  7233                           prodl	equ	0xFF3
  7234                           intcon	equ	0xFF2
  7235                           indf0	equ	0xFEF
  7236                           postinc0	equ	0xFEE
  7237                           fsr0h	equ	0xFEA
  7238                           fsr0l	equ	0xFE9
  7239                           wreg	equ	0xFE8
  7240                           postinc1	equ	0xFE6
  7241                           postdec1	equ	0xFE5
  7242                           plusw1	equ	0xFE3
  7243                           fsr1h	equ	0xFE2
  7244                           fsr1l	equ	0xFE1
  7245                           bsr	equ	0xFE0
  7246                           indf2	equ	0xFDF
  7247                           postinc2	equ	0xFDE
  7248                           postdec2	equ	0xFDD
  7249                           plusw2	equ	0xFDB
  7250                           fsr2h	equ	0xFDA
  7251                           fsr2l	equ	0xFD9
  7252                           status	equ	0xFD8
  7253                           
  7254 ;; *************** function _LCDWriteInt *****************
  7255 ;; Defined at:
  7256 ;;		line 223 in file "lcd.c"
  7257 ;; Parameters:    Size  Location     Type
  7258 ;;  val             2  [STACK] int 
  7259 ;;  field_length    2  [STACK] unsigned int 
  7260 ;; Auto vars:     Size  Location     Type
  7261 ;;  str             5  [STACK] unsigned char [5]
  7262 ;;  i               2  [STACK] int 
  7263 ;;  j               2  [STACK] int 
  7264 ;; Return value:  Size  Location     Type
  7265 ;;                  1  [STACK] void 
  7266 ;; Registers used:
  7267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, pro
      +dl
  7268 ;; Tracked objects:
  7269 ;;		On entry : 0/0
  7270 ;;		On exit  : 0/0
  7271 ;;		Unchanged: 0/0
  7272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7273 ;;      Params:         0       0       0       0       0       0       0
  7274 ;;      Locals:         0       0       0       0       0       0       0
  7275 ;;      Temps:          0       0       0       0       0       0       0
  7276 ;;      Totals:         0       0       0       0       0       0       0
  7277 ;;Total ram usage:        0 bytes
  7278 ;; Hardware stack levels used:    1
  7279 ;; Hardware stack levels required when called:    6
  7280 ;; This function calls:
  7281 ;;		_LCDByte
  7282 ;;		___awdiv
  7283 ;;		___awmod
  7284 ;; This function is called by:
  7285 ;;		_cloro
  7286 ;;		_ph
  7287 ;; This function uses a reentrant model
  7288 ;;
  7289                           
  7290                           	psect	text35
  7291  0012AE                     __ptext35:
  7292                           	opt stack 0
  7293  0012AE                     _LCDWriteInt:
  7294                           	opt stack 0
  7295                           
  7296                           ; autosize = 9, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  7297  0012AE  0E09               	movlw	9
  7298  0012B0  26E1               	addwf	fsr1l,f,c
  7299  0012B2  0E00               	movlw	0
  7300  0012B4  22E2               	addwfc	fsr1h,f,c
  7301                           
  7302                           ;lcd.c: 236: char str[5]={0,0,0,0,0};
  7303                           
  7304                           ;incstack = 0
  7305  0012B6  EE20  F001         	lfsr	2,LCDWriteInt@F2966
  7306                           
  7307                           ;stkvar	LCDWriteInt@str @ sp[(-9)+0]
  7308  0012BA  50E1               	movf	fsr1l,w,c
  7309  0012BC  0FF7               	addlw	-9
  7310  0012BE  6EE9               	movwf	fsr0l,c
  7311  0012C0  50E2               	movf	fsr1h,w,c
  7312  0012C2  6EEA               	movwf	fsr0h,c
  7313  0012C4  0EFF               	movlw	255
  7314  0012C6  22EA               	addwfc	fsr0h,f,c
  7315  0012C8  0E04               	movlw	4
  7316  0012CA                     u308_21:
  7317  0012CA  CFDB FFEB          	movff	plusw2,plusw0
  7318  0012CE  06E8               	decf	wreg,f,c
  7319  0012D0  E2FC               	bc	u308_21
  7320                           
  7321                           ;lcd.c: 237: int i=4,j=0;
  7322  0012D2  0E04               	movlw	4
  7323  0012D4  6E50               	movwf	btemp+1,c
  7324  0012D6  0E00               	movlw	0
  7325  0012D8  6E51               	movwf	btemp+2,c
  7326                           
  7327                           ;stkvar	LCDWriteInt@i @ sp[(-9)+5]
  7328  0012DA  0EFC               	movlw	-4
  7329  0012DC  C050  FFE3         	movff	btemp+1,plusw1
  7330  0012E0  0EFD               	movlw	-3
  7331  0012E2  C051  FFE3         	movff	btemp+2,plusw1
  7332                           
  7333                           ;stkvar	LCDWriteInt@j @ sp[(-9)+7]
  7334  0012E6  0EFE               	movlw	-2
  7335  0012E8  6AE3               	clrf	plusw1,c
  7336  0012EA  0EFF               	movlw	-1
  7337  0012EC  6AE3               	clrf	plusw1,c
  7338                           
  7339                           ;lcd.c: 238: while(val)
  7340  0012EE  D03A               	goto	l3901
  7341  0012F0                     l3895:
  7342                           
  7343                           ;lcd.c: 239: {
  7344                           ;lcd.c: 240: str[i]=val%10;
  7345                           ;stkvar	LCDWriteInt@i @ sp[(-9)+5]
  7346  0012F0  0EFC               	movlw	-4
  7347  0012F2  CFE3 F050          	movff	plusw1,btemp+1
  7348  0012F6  0EFD               	movlw	-3
  7349  0012F8  CFE3 F051          	movff	plusw1,btemp+2
  7350                           
  7351                           ;stkvar	LCDWriteInt@str @ sp[(-9)+0]
  7352  0012FC  0EF7               	movlw	247
  7353  0012FE  24E1               	addwf	fsr1l,w,c
  7354  001300  6E59               	movwf	btemp+10,c
  7355  001302  0EFF               	movlw	255
  7356  001304  20E2               	addwfc	fsr1h,w,c
  7357  001306  6E5A               	movwf	btemp+11,c
  7358  001308  5050               	movf	btemp+1,w,c
  7359  00130A  2459               	addwf	btemp+10,w,c
  7360  00130C  6ED9               	movwf	fsr2l,c
  7361  00130E  5051               	movf	btemp+2,w,c
  7362  001310  205A               	addwfc	btemp+11,w,c
  7363  001312  6EDA               	movwf	fsr2h,c
  7364  001314  0E0A               	movlw	10
  7365  001316  6EE6               	movwf	postinc1,c
  7366  001318  0E00               	movlw	0
  7367  00131A  6EE6               	movwf	postinc1,c
  7368                           
  7369                           ;stkvar	LCDWriteInt@val @ sp[(-11)+-2]
  7370  00131C  0EF3               	movlw	-13
  7371  00131E  CFE3 FFE6          	movff	plusw1,postinc1
  7372  001322  CFE3 FFE6          	movff	plusw1,postinc1
  7373  001326  EC8B  F010         	call	___awmod	;wreg free
  7374  00132A  504F               	movf	btemp,w,c
  7375  00132C  6EDF               	movwf	indf2,c
  7376                           
  7377                           ;lcd.c: 241: val=val/10;
  7378  00132E  0E0A               	movlw	10
  7379  001330  6EE6               	movwf	postinc1,c
  7380  001332  0E00               	movlw	0
  7381  001334  6EE6               	movwf	postinc1,c
  7382                           
  7383                           ;stkvar	LCDWriteInt@val @ sp[(-11)+-2]
  7384  001336  0EF3               	movlw	-13
  7385  001338  CFE3 FFE6          	movff	plusw1,postinc1
  7386  00133C  CFE3 FFE6          	movff	plusw1,postinc1
  7387  001340  EC9B  F00B         	call	___awdiv	;wreg free
  7388                           
  7389                           ;stkvar	LCDWriteInt@val @ sp[(-9)+-2]
  7390  001344  0EF5               	movlw	-11
  7391  001346  C04F  FFE3         	movff	btemp,plusw1
  7392  00134A  0EF6               	movlw	-10
  7393  00134C  C050  FFE3         	movff	btemp+1,plusw1
  7394                           
  7395                           ;lcd.c: 242: i--;
  7396                           ;stkvar	LCDWriteInt@i @ sp[(-9)+5]
  7397  001350  50E1               	movf	fsr1l,w,c
  7398  001352  0FFC               	addlw	-4
  7399  001354  6ED9               	movwf	fsr2l,c
  7400  001356  50E2               	movf	fsr1h,w,c
  7401  001358  6EDA               	movwf	fsr2h,c
  7402  00135A  0EFF               	movlw	255
  7403  00135C  22DA               	addwfc	fsr2h,f,c
  7404  00135E  06DE               	decf	postinc2,f,c
  7405  001360  0E00               	movlw	0
  7406  001362  5ADD               	subwfb	postdec2,f,c
  7407  001364                     l3901:
  7408                           
  7409                           ;stkvar	LCDWriteInt@val @ sp[(-9)+-2]
  7410  001364  0EF5               	movlw	-11
  7411  001366  CFE3 F04F          	movff	plusw1,btemp
  7412  00136A  0EF6               	movlw	-10
  7413  00136C  50E3               	movf	plusw1,w,c
  7414  00136E  104F               	iorwf	btemp,w,c
  7415  001370  A4D8               	btfss	status,2,c
  7416  001372  D7BE               	goto	l3895
  7417                           
  7418                           ;lcd.c: 243: }
  7419                           ;lcd.c: 244: if(field_length==-1)
  7420                           ;stkvar	LCDWriteInt@field_length @ sp[(-9)+-4]
  7421  001374  0EF3               	movlw	-13
  7422  001376  28E3               	incf	plusw1,w,c
  7423  001378  E12A               	bnz	l3911
  7424  00137A  0EF4               	movlw	-12
  7425  00137C  28E3               	incf	plusw1,w,c
  7426  00137E  B4D8               	btfsc	status,2,c
  7427  001380  D010               	goto	l3909
  7428  001382  D025               	goto	l3911
  7429  001384                     l3907:
  7430                           
  7431                           ;stkvar	LCDWriteInt@j @ sp[(-9)+7]
  7432  001384  0EFE               	movlw	-2
  7433  001386  50E3               	movf	plusw1,w,c
  7434  001388  0F01               	addlw	1
  7435  00138A  6E4F               	movwf	btemp,c
  7436  00138C  0EFE               	movlw	-2
  7437  00138E  C04F  FFE3         	movff	btemp,plusw1
  7438  001392  6A4F               	clrf	btemp,c
  7439  001394  0EFF               	movlw	-1
  7440  001396  50E3               	movf	plusw1,w,c
  7441  001398  204F               	addwfc	btemp,w,c
  7442  00139A  6E4F               	movwf	btemp,c
  7443  00139C  0EFF               	movlw	-1
  7444  00139E  C04F  FFE3         	movff	btemp,plusw1
  7445  0013A2                     l3909:
  7446                           
  7447                           ;stkvar	LCDWriteInt@j @ sp[(-9)+7]
  7448  0013A2  0EFE               	movlw	-2
  7449  0013A4  CFE3 F050          	movff	plusw1,btemp+1
  7450  0013A8  0EFF               	movlw	-1
  7451  0013AA  CFE3 F051          	movff	plusw1,btemp+2
  7452                           
  7453                           ;stkvar	LCDWriteInt@str @ sp[(-9)+0]
  7454  0013AE  0EF7               	movlw	247
  7455  0013B0  24E1               	addwf	fsr1l,w,c
  7456  0013B2  6E59               	movwf	btemp+10,c
  7457  0013B4  0EFF               	movlw	255
  7458  0013B6  20E2               	addwfc	fsr1h,w,c
  7459  0013B8  6E5A               	movwf	btemp+11,c
  7460  0013BA  5050               	movf	btemp+1,w,c
  7461  0013BC  2459               	addwf	btemp+10,w,c
  7462  0013BE  6ED9               	movwf	fsr2l,c
  7463  0013C0  5051               	movf	btemp+2,w,c
  7464  0013C2  205A               	addwfc	btemp+11,w,c
  7465  0013C4  6EDA               	movwf	fsr2h,c
  7466  0013C6  50DF               	movf	indf2,w,c
  7467  0013C8  A4D8               	btfss	status,2,c
  7468  0013CA  D011               	goto	l3913
  7469  0013CC  D7DB               	goto	l3907
  7470  0013CE                     l3911:
  7471                           
  7472                           ;lcd.c: 246: else
  7473                           ;lcd.c: 247: j=5-field_length;
  7474                           ;stkvar	LCDWriteInt@field_length @ sp[(-9)+-4]
  7475  0013CE  0E05               	movlw	5
  7476  0013D0  6E50               	movwf	btemp+1,c
  7477  0013D2  0E00               	movlw	0
  7478  0013D4  6E51               	movwf	btemp+2,c
  7479  0013D6  0EF3               	movlw	-13
  7480  0013D8  50E3               	movf	plusw1,w,c
  7481  0013DA  5E50               	subwf	btemp+1,f,c
  7482  0013DC  0EF4               	movlw	-12
  7483  0013DE  50E3               	movf	plusw1,w,c
  7484  0013E0  5A51               	subwfb	btemp+2,f,c
  7485                           
  7486                           ;stkvar	LCDWriteInt@j @ sp[(-9)+7]
  7487  0013E2  0EFE               	movlw	-2
  7488  0013E4  C050  FFE3         	movff	btemp+1,plusw1
  7489  0013E8  0EFF               	movlw	-1
  7490  0013EA  C051  FFE3         	movff	btemp+2,plusw1
  7491  0013EE                     l3913:
  7492                           
  7493                           ;lcd.c: 249: if(val<0) (LCDByte('-',1));
  7494                           ;stkvar	LCDWriteInt@val @ sp[(-9)+-2]
  7495  0013EE  0EF6               	movlw	-10
  7496  0013F0  AEE3               	btfss	plusw1,7,c
  7497  0013F2  D006               	goto	l3917
  7498  0013F4  0E01               	movlw	1
  7499  0013F6  6EE6               	movwf	postinc1,c
  7500  0013F8  0E2D               	movlw	45
  7501  0013FA  6EE6               	movwf	postinc1,c
  7502  0013FC  ECDD  F014         	call	_LCDByte	;wreg free
  7503  001400                     l3917:
  7504                           
  7505                           ;lcd.c: 250: for(i=j;i<5;i++)
  7506                           ;stkvar	LCDWriteInt@j @ sp[(-9)+7]
  7507                           ;stkvar	LCDWriteInt@i @ sp[(-9)+5]
  7508  001400  0EFE               	movlw	-2
  7509  001402  CFE3 F04F          	movff	plusw1,btemp
  7510  001406  0EFC               	movlw	-4
  7511  001408  C04F  FFE3         	movff	btemp,plusw1
  7512  00140C  0EFF               	movlw	-1
  7513  00140E  CFE3 F04F          	movff	plusw1,btemp
  7514  001412  0EFD               	movlw	-3
  7515  001414  C04F  FFE3         	movff	btemp,plusw1
  7516                           
  7517                           ;stkvar	LCDWriteInt@i @ sp[(-9)+5]
  7518  001418  0EFD               	movlw	-3
  7519  00141A  BEE3               	btfsc	plusw1,7,c
  7520  00141C  D00A               	goto	l3923
  7521  00141E  0EFD               	movlw	-3
  7522  001420  50E3               	movf	plusw1,w,c
  7523  001422  E12D               	bnz	l492
  7524  001424  0EFC               	movlw	-4
  7525  001426  CFE3 F04F          	movff	plusw1,btemp
  7526  00142A  0E05               	movlw	5
  7527  00142C  5E4F               	subwf	btemp,f,c
  7528  00142E  B0D8               	btfsc	status,0,c
  7529  001430  D026               	goto	l492
  7530  001432                     l3923:
  7531                           
  7532                           ;lcd.c: 251: {
  7533                           ;lcd.c: 252: (LCDByte(48+str[i],1));
  7534  001432  0E01               	movlw	1
  7535  001434  6EE6               	movwf	postinc1,c
  7536                           
  7537                           ;stkvar	LCDWriteInt@i @ sp[(-10)+5]
  7538  001436  0EFB               	movlw	-5
  7539  001438  CFE3 F050          	movff	plusw1,btemp+1
  7540  00143C  0EFC               	movlw	-4
  7541  00143E  CFE3 F051          	movff	plusw1,btemp+2
  7542                           
  7543                           ;stkvar	LCDWriteInt@str @ sp[(-10)+0]
  7544  001442  0EF6               	movlw	246
  7545  001444  24E1               	addwf	fsr1l,w,c
  7546  001446  6E59               	movwf	btemp+10,c
  7547  001448  0EFF               	movlw	255
  7548  00144A  20E2               	addwfc	fsr1h,w,c
  7549  00144C  6E5A               	movwf	btemp+11,c
  7550  00144E  5050               	movf	btemp+1,w,c
  7551  001450  2459               	addwf	btemp+10,w,c
  7552  001452  6ED9               	movwf	fsr2l,c
  7553  001454  5051               	movf	btemp+2,w,c
  7554  001456  205A               	addwfc	btemp+11,w,c
  7555  001458  6EDA               	movwf	fsr2h,c
  7556  00145A  50DF               	movf	indf2,w,c
  7557  00145C  0F30               	addlw	48
  7558  00145E  6EE6               	movwf	postinc1,c
  7559  001460  ECDD  F014         	call	_LCDByte	;wreg free
  7560                           
  7561                           ;stkvar	LCDWriteInt@i @ sp[(-9)+5]
  7562  001464  0EFC               	movlw	-4
  7563  001466  50E3               	movf	plusw1,w,c
  7564  001468  0F01               	addlw	1
  7565  00146A  6E4F               	movwf	btemp,c
  7566  00146C  0EFC               	movlw	-4
  7567  00146E  C04F  FFE3         	movff	btemp,plusw1
  7568  001472  6A4F               	clrf	btemp,c
  7569  001474  0EFD               	movlw	-3
  7570  001476  50E3               	movf	plusw1,w,c
  7571  001478  204F               	addwfc	btemp,w,c
  7572  00147A  6E4F               	movwf	btemp,c
  7573  00147C  D7CA               	goto	L5
  7574  00147E                     l492:
  7575                           
  7576                           ; _LCDWriteInt: autosize = 9, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, a
      +                          rgsize = 4, vargsize = 0
  7577  00147E  0EF3               	movlw	243
  7578  001480  26E1               	addwf	fsr1l,f,c
  7579  001482  0EFF               	movlw	255
  7580  001484  22E2               	addwfc	fsr1h,f,c
  7581  001486  0012               	return		;funcret
  7582  001488                     __end_of_LCDWriteInt:
  7583                           	opt stack 0
  7584                           tosu	equ	0xFFF
  7585                           tosh	equ	0xFFE
  7586                           tosl	equ	0xFFD
  7587                           stkptr	equ	0xFFC
  7588                           tblptru	equ	0xFF8
  7589                           tblptrh	equ	0xFF7
  7590                           tblptrl	equ	0xFF6
  7591                           tablat	equ	0xFF5
  7592                           prodh	equ	0xFF4
  7593                           prodl	equ	0xFF3
  7594                           intcon	equ	0xFF2
  7595                           indf0	equ	0xFEF
  7596                           postinc0	equ	0xFEE
  7597                           plusw0	equ	0xFEB
  7598                           fsr0h	equ	0xFEA
  7599                           fsr0l	equ	0xFE9
  7600                           wreg	equ	0xFE8
  7601                           postinc1	equ	0xFE6
  7602                           postdec1	equ	0xFE5
  7603                           plusw1	equ	0xFE3
  7604                           fsr1h	equ	0xFE2
  7605                           fsr1l	equ	0xFE1
  7606                           bsr	equ	0xFE0
  7607                           indf2	equ	0xFDF
  7608                           postinc2	equ	0xFDE
  7609                           postdec2	equ	0xFDD
  7610                           plusw2	equ	0xFDB
  7611                           fsr2h	equ	0xFDA
  7612                           fsr2l	equ	0xFD9
  7613                           status	equ	0xFD8
  7614                           
  7615 ;; *************** function ___awmod *****************
  7616 ;; Defined at:
  7617 ;;		line 8 in file "/Applications/microchip/xc8/v1.44/sources/common/awmod.c"
  7618 ;; Parameters:    Size  Location     Type
  7619 ;;  dividend        2  [STACK] int 
  7620 ;;  divisor         2  [STACK] int 
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;  sign            1  [STACK] unsigned char 
  7623 ;;  counter         1  [STACK] unsigned char 
  7624 ;; Return value:  Size  Location     Type
  7625 ;;                  2  [STACK] int 
  7626 ;; Registers used:
  7627 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7633 ;;      Params:         0       0       0       0       0       0       0
  7634 ;;      Locals:         0       0       0       0       0       0       0
  7635 ;;      Temps:          0       0       0       0       0       0       0
  7636 ;;      Totals:         0       0       0       0       0       0       0
  7637 ;;Total ram usage:        0 bytes
  7638 ;; Hardware stack levels used:    1
  7639 ;; Hardware stack levels required when called:    4
  7640 ;; This function calls:
  7641 ;;		Nothing
  7642 ;; This function is called by:
  7643 ;;		_LCDWriteInt
  7644 ;; This function uses a reentrant model
  7645 ;;
  7646                           
  7647                           	psect	text36
  7648  002116                     __ptext36:
  7649                           	opt stack 0
  7650  002116                     ___awmod:
  7651                           	opt stack 0
  7652                           
  7653                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  7654  002116  52E6               	movf	postinc1,f,c
  7655  002118  52E6               	movf	postinc1,f,c
  7656                           
  7657                           ;stkvar	___awmod@sign @ sp[(-2)+0]
  7658                           
  7659                           ;incstack = 0
  7660  00211A  0EFE               	movlw	-2
  7661  00211C  6AE3               	clrf	plusw1,c
  7662                           
  7663                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
  7664  00211E  0EFD               	movlw	-3
  7665  002120  AEE3               	btfss	plusw1,7,c
  7666  002122  D009               	goto	l2825
  7667                           
  7668                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
  7669                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
  7670  002124  0EFC               	movlw	-4
  7671  002126  6CE3               	negf	plusw1,c
  7672  002128  0EFD               	movlw	-3
  7673  00212A  1EE3               	comf	plusw1,f,c
  7674  00212C  B0D8               	btfsc	status,0,c
  7675  00212E  2AE3               	incf	plusw1,f,c
  7676                           
  7677                           ;stkvar	___awmod@sign @ sp[(-2)+0]
  7678  002130  0EFE               	movlw	-2
  7679  002132  6AE3               	clrf	plusw1,c
  7680  002134  2AE3               	incf	plusw1,f,c
  7681  002136                     l2825:
  7682                           
  7683                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
  7684  002136  0EFB               	movlw	-5
  7685  002138  AEE3               	btfss	plusw1,7,c
  7686  00213A  D006               	goto	l2829
  7687                           
  7688                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
  7689                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
  7690  00213C  0EFA               	movlw	-6
  7691  00213E  6CE3               	negf	plusw1,c
  7692  002140  0EFB               	movlw	-5
  7693  002142  1EE3               	comf	plusw1,f,c
  7694  002144  B0D8               	btfsc	status,0,c
  7695  002146  2AE3               	incf	plusw1,f,c
  7696  002148                     l2829:
  7697                           
  7698                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
  7699  002148  0EFA               	movlw	-6
  7700  00214A  CFE3 F04F          	movff	plusw1,btemp
  7701  00214E  0EFB               	movlw	-5
  7702  002150  50E3               	movf	plusw1,w,c
  7703  002152  104F               	iorwf	btemp,w,c
  7704  002154  B4D8               	btfsc	status,2,c
  7705  002156  D04A               	goto	u217_20
  7706                           
  7707                           ;stkvar	___awmod@counter @ sp[(-2)+1]
  7708  002158  0EFF               	movlw	-1
  7709  00215A  6AE3               	clrf	plusw1,c
  7710  00215C  D010               	goto	L6
  7711  00215E                     l2833:
  7712                           
  7713                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
  7714  00215E  0EFA               	movlw	-6
  7715  002160  50E3               	movf	plusw1,w,c
  7716  002162  90D8               	bcf	status,0,c
  7717  002164  34E8               	rlcf	wreg,w,c
  7718  002166  6E4F               	movwf	btemp,c
  7719  002168  0EFA               	movlw	-6
  7720  00216A  C04F  FFE3         	movff	btemp,plusw1
  7721  00216E  0EFB               	movlw	-5
  7722  002170  50E3               	movf	plusw1,w,c
  7723  002172  34E8               	rlcf	wreg,w,c
  7724  002174  6E4F               	movwf	btemp,c
  7725  002176  0EFB               	movlw	-5
  7726  002178  C04F  FFE3         	movff	btemp,plusw1
  7727                           
  7728                           ;stkvar	___awmod@counter @ sp[(-2)+1]
  7729  00217C  0EFF               	movlw	-1
  7730  00217E                     L6:
  7731  00217E  2AE3               	incf	plusw1,f,c
  7732                           
  7733                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
  7734  002180  0EFB               	movlw	-5
  7735  002182  AEE3               	btfss	plusw1,7,c
  7736  002184  D7EC               	goto	l2833
  7737  002186                     u215_20:
  7738                           
  7739                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
  7740  002186  0EFA               	movlw	-6
  7741  002188  CFE3 F050          	movff	plusw1,btemp+1
  7742  00218C  0EFB               	movlw	-5
  7743  00218E  CFE3 F051          	movff	plusw1,btemp+2
  7744                           
  7745                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
  7746  002192  0EFC               	movlw	-4
  7747  002194  CFE3 F059          	movff	plusw1,btemp+10
  7748  002198  0EFD               	movlw	-3
  7749  00219A  CFE3 F05A          	movff	plusw1,btemp+11
  7750  00219E  5050               	movf	btemp+1,w,c
  7751  0021A0  5C59               	subwf	btemp+10,w,c
  7752  0021A2  5051               	movf	btemp+2,w,c
  7753  0021A4  585A               	subwfb	btemp+11,w,c
  7754  0021A6  A0D8               	btfss	status,0,c
  7755  0021A8  D012               	goto	l2843
  7756                           
  7757                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
  7758                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
  7759  0021AA  0EFC               	movlw	-4
  7760  0021AC  50E3               	movf	plusw1,w,c
  7761  0021AE  6E4F               	movwf	btemp,c
  7762  0021B0  0EFA               	movlw	-6
  7763  0021B2  50E3               	movf	plusw1,w,c
  7764  0021B4  5E4F               	subwf	btemp,f,c
  7765  0021B6  0EFC               	movlw	-4
  7766  0021B8  C04F  FFE3         	movff	btemp,plusw1
  7767  0021BC  0EFD               	movlw	-3
  7768  0021BE  50E3               	movf	plusw1,w,c
  7769  0021C0  6E4F               	movwf	btemp,c
  7770  0021C2  0EFB               	movlw	-5
  7771  0021C4  50E3               	movf	plusw1,w,c
  7772  0021C6  5A4F               	subwfb	btemp,f,c
  7773  0021C8  0EFD               	movlw	-3
  7774  0021CA  C04F  FFE3         	movff	btemp,plusw1
  7775  0021CE                     l2843:
  7776                           
  7777                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
  7778  0021CE  90D8               	bcf	status,0,c
  7779  0021D0  0EFB               	movlw	-5
  7780  0021D2  32E3               	rrcf	plusw1,f,c
  7781  0021D4  0EFA               	movlw	-6
  7782  0021D6  32E3               	rrcf	plusw1,f,c
  7783                           
  7784                           ;stkvar	___awmod@counter @ sp[(-2)+1]
  7785  0021D8  0EFF               	movlw	-1
  7786  0021DA  50E3               	movf	plusw1,w,c
  7787  0021DC  6E4F               	movwf	btemp,c
  7788  0021DE  0E01               	movlw	1
  7789  0021E0  5E4F               	subwf	btemp,f,c
  7790  0021E2  0EFF               	movlw	-1
  7791  0021E4  C04F  FFE3         	movff	btemp,plusw1
  7792  0021E8  A4D8               	btfss	status,2,c
  7793  0021EA  D7CD               	goto	u215_20
  7794  0021EC                     u217_20:
  7795                           
  7796                           ;stkvar	___awmod@sign @ sp[(-2)+0]
  7797  0021EC  0EFE               	movlw	-2
  7798  0021EE  50E3               	movf	plusw1,w,c
  7799  0021F0  B4D8               	btfsc	status,2,c
  7800  0021F2  D006               	goto	l2851
  7801                           
  7802                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
  7803                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
  7804  0021F4  0EFC               	movlw	-4
  7805  0021F6  6CE3               	negf	plusw1,c
  7806  0021F8  0EFD               	movlw	-3
  7807  0021FA  1EE3               	comf	plusw1,f,c
  7808  0021FC  B0D8               	btfsc	status,0,c
  7809  0021FE  2AE3               	incf	plusw1,f,c
  7810  002200                     l2851:
  7811                           
  7812                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
  7813  002200  0EFC               	movlw	-4
  7814  002202  CFE3 F04F          	movff	plusw1,btemp
  7815  002206  0EFD               	movlw	-3
  7816  002208  CFE3 F050          	movff	plusw1,btemp+1
  7817                           
  7818                           ; ___awmod: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
  7819  00220C  0EFA               	movlw	250
  7820  00220E  26E1               	addwf	fsr1l,f,c
  7821  002210  0EFF               	movlw	255
  7822  002212  22E2               	addwfc	fsr1h,f,c
  7823  002214  0012               	return		;funcret
  7824  002216                     __end_of___awmod:
  7825                           	opt stack 0
  7826                           tosu	equ	0xFFF
  7827                           tosh	equ	0xFFE
  7828                           tosl	equ	0xFFD
  7829                           stkptr	equ	0xFFC
  7830                           tblptru	equ	0xFF8
  7831                           tblptrh	equ	0xFF7
  7832                           tblptrl	equ	0xFF6
  7833                           tablat	equ	0xFF5
  7834                           prodh	equ	0xFF4
  7835                           prodl	equ	0xFF3
  7836                           intcon	equ	0xFF2
  7837                           indf0	equ	0xFEF
  7838                           postinc0	equ	0xFEE
  7839                           plusw0	equ	0xFEB
  7840                           fsr0h	equ	0xFEA
  7841                           fsr0l	equ	0xFE9
  7842                           wreg	equ	0xFE8
  7843                           postinc1	equ	0xFE6
  7844                           postdec1	equ	0xFE5
  7845                           plusw1	equ	0xFE3
  7846                           fsr1h	equ	0xFE2
  7847                           fsr1l	equ	0xFE1
  7848                           bsr	equ	0xFE0
  7849                           indf2	equ	0xFDF
  7850                           postinc2	equ	0xFDE
  7851                           postdec2	equ	0xFDD
  7852                           plusw2	equ	0xFDB
  7853                           fsr2h	equ	0xFDA
  7854                           fsr2l	equ	0xFD9
  7855                           status	equ	0xFD8
  7856                           
  7857 ;; *************** function ___awdiv *****************
  7858 ;; Defined at:
  7859 ;;		line 8 in file "/Applications/microchip/xc8/v1.44/sources/common/awdiv.c"
  7860 ;; Parameters:    Size  Location     Type
  7861 ;;  dividend        2  [STACK] int 
  7862 ;;  divisor         2  [STACK] int 
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;  quotient        2  [STACK] int 
  7865 ;;  sign            1  [STACK] unsigned char 
  7866 ;;  counter         1  [STACK] unsigned char 
  7867 ;; Return value:  Size  Location     Type
  7868 ;;                  2  [STACK] int 
  7869 ;; Registers used:
  7870 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
  7871 ;; Tracked objects:
  7872 ;;		On entry : 0/0
  7873 ;;		On exit  : 0/0
  7874 ;;		Unchanged: 0/0
  7875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7876 ;;      Params:         0       0       0       0       0       0       0
  7877 ;;      Locals:         0       0       0       0       0       0       0
  7878 ;;      Temps:          0       0       0       0       0       0       0
  7879 ;;      Totals:         0       0       0       0       0       0       0
  7880 ;;Total ram usage:        0 bytes
  7881 ;; Hardware stack levels used:    1
  7882 ;; Hardware stack levels required when called:    4
  7883 ;; This function calls:
  7884 ;;		Nothing
  7885 ;; This function is called by:
  7886 ;;		_LCDWriteInt
  7887 ;; This function uses a reentrant model
  7888 ;;
  7889                           
  7890                           	psect	text37
  7891  001736                     __ptext37:
  7892                           	opt stack 0
  7893  001736                     ___awdiv:
  7894                           	opt stack 0
  7895                           
  7896                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  7897  001736  52E6               	movf	postinc1,f,c
  7898  001738  52E6               	movf	postinc1,f,c
  7899  00173A  52E6               	movf	postinc1,f,c
  7900  00173C  52E6               	movf	postinc1,f,c
  7901                           
  7902                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
  7903                           
  7904                           ;incstack = 0
  7905  00173E  0EFE               	movlw	-2
  7906  001740  6AE3               	clrf	plusw1,c
  7907                           
  7908                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
  7909  001742  0EF9               	movlw	-7
  7910  001744  AEE3               	btfss	plusw1,7,c
  7911  001746  D009               	goto	l2779
  7912                           
  7913                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
  7914                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
  7915  001748  0EF8               	movlw	-8
  7916  00174A  6CE3               	negf	plusw1,c
  7917  00174C  0EF9               	movlw	-7
  7918  00174E  1EE3               	comf	plusw1,f,c
  7919  001750  B0D8               	btfsc	status,0,c
  7920  001752  2AE3               	incf	plusw1,f,c
  7921                           
  7922                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
  7923  001754  0EFE               	movlw	-2
  7924  001756  6AE3               	clrf	plusw1,c
  7925  001758  2AE3               	incf	plusw1,f,c
  7926  00175A                     l2779:
  7927                           
  7928                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
  7929  00175A  0EFB               	movlw	-5
  7930  00175C  AEE3               	btfss	plusw1,7,c
  7931  00175E  D008               	goto	l2785
  7932                           
  7933                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
  7934                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
  7935  001760  0EFA               	movlw	-6
  7936  001762  6CE3               	negf	plusw1,c
  7937  001764  0EFB               	movlw	-5
  7938  001766  1EE3               	comf	plusw1,f,c
  7939  001768  B0D8               	btfsc	status,0,c
  7940  00176A  2AE3               	incf	plusw1,f,c
  7941                           
  7942                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
  7943  00176C  0EFE               	movlw	-2
  7944  00176E  70E3               	btg	plusw1,0,c
  7945  001770                     l2785:
  7946                           
  7947                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
  7948  001770  0EFC               	movlw	-4
  7949  001772  6AE3               	clrf	plusw1,c
  7950  001774  0EFD               	movlw	-3
  7951  001776  6AE3               	clrf	plusw1,c
  7952                           
  7953                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
  7954  001778  0EF8               	movlw	-8
  7955  00177A  CFE3 F04F          	movff	plusw1,btemp
  7956  00177E  0EF9               	movlw	-7
  7957  001780  50E3               	movf	plusw1,w,c
  7958  001782  104F               	iorwf	btemp,w,c
  7959  001784  B4D8               	btfsc	status,2,c
  7960  001786  D05B               	goto	u210_20
  7961                           
  7962                           ;stkvar	___awdiv@counter @ sp[(-4)+3]
  7963  001788  0EFF               	movlw	-1
  7964  00178A  6AE3               	clrf	plusw1,c
  7965  00178C  D010               	goto	L7
  7966  00178E                     l2791:
  7967                           
  7968                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
  7969  00178E  0EF8               	movlw	-8
  7970  001790  50E3               	movf	plusw1,w,c
  7971  001792  90D8               	bcf	status,0,c
  7972  001794  34E8               	rlcf	wreg,w,c
  7973  001796  6E4F               	movwf	btemp,c
  7974  001798  0EF8               	movlw	-8
  7975  00179A  C04F  FFE3         	movff	btemp,plusw1
  7976  00179E  0EF9               	movlw	-7
  7977  0017A0  50E3               	movf	plusw1,w,c
  7978  0017A2  34E8               	rlcf	wreg,w,c
  7979  0017A4  6E4F               	movwf	btemp,c
  7980  0017A6  0EF9               	movlw	-7
  7981  0017A8  C04F  FFE3         	movff	btemp,plusw1
  7982                           
  7983                           ;stkvar	___awdiv@counter @ sp[(-4)+3]
  7984  0017AC  0EFF               	movlw	-1
  7985  0017AE                     L7:
  7986  0017AE  2AE3               	incf	plusw1,f,c
  7987                           
  7988                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
  7989  0017B0  0EF9               	movlw	-7
  7990  0017B2  AEE3               	btfss	plusw1,7,c
  7991  0017B4  D7EC               	goto	l2791
  7992  0017B6                     u208_20:
  7993                           
  7994                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
  7995  0017B6  0EFC               	movlw	-4
  7996  0017B8  50E3               	movf	plusw1,w,c
  7997  0017BA  90D8               	bcf	status,0,c
  7998  0017BC  34E8               	rlcf	wreg,w,c
  7999  0017BE  6E4F               	movwf	btemp,c
  8000  0017C0  0EFC               	movlw	-4
  8001  0017C2  C04F  FFE3         	movff	btemp,plusw1
  8002  0017C6  0EFD               	movlw	-3
  8003  0017C8  50E3               	movf	plusw1,w,c
  8004  0017CA  34E8               	rlcf	wreg,w,c
  8005  0017CC  6E4F               	movwf	btemp,c
  8006  0017CE  0EFD               	movlw	-3
  8007  0017D0  C04F  FFE3         	movff	btemp,plusw1
  8008                           
  8009                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
  8010  0017D4  0EF8               	movlw	-8
  8011  0017D6  CFE3 F050          	movff	plusw1,btemp+1
  8012  0017DA  0EF9               	movlw	-7
  8013  0017DC  CFE3 F051          	movff	plusw1,btemp+2
  8014                           
  8015                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
  8016  0017E0  0EFA               	movlw	-6
  8017  0017E2  CFE3 F059          	movff	plusw1,btemp+10
  8018  0017E6  0EFB               	movlw	-5
  8019  0017E8  CFE3 F05A          	movff	plusw1,btemp+11
  8020  0017EC  5050               	movf	btemp+1,w,c
  8021  0017EE  5C59               	subwf	btemp+10,w,c
  8022  0017F0  5051               	movf	btemp+2,w,c
  8023  0017F2  585A               	subwfb	btemp+11,w,c
  8024  0017F4  A0D8               	btfss	status,0,c
  8025  0017F6  D014               	goto	l2805
  8026                           
  8027                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
  8028                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
  8029  0017F8  0EFA               	movlw	-6
  8030  0017FA  50E3               	movf	plusw1,w,c
  8031  0017FC  6E4F               	movwf	btemp,c
  8032  0017FE  0EF8               	movlw	-8
  8033  001800  50E3               	movf	plusw1,w,c
  8034  001802  5E4F               	subwf	btemp,f,c
  8035  001804  0EFA               	movlw	-6
  8036  001806  C04F  FFE3         	movff	btemp,plusw1
  8037  00180A  0EFB               	movlw	-5
  8038  00180C  50E3               	movf	plusw1,w,c
  8039  00180E  6E4F               	movwf	btemp,c
  8040  001810  0EF9               	movlw	-7
  8041  001812  50E3               	movf	plusw1,w,c
  8042  001814  5A4F               	subwfb	btemp,f,c
  8043  001816  0EFB               	movlw	-5
  8044  001818  C04F  FFE3         	movff	btemp,plusw1
  8045                           
  8046                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
  8047  00181C  0EFC               	movlw	-4
  8048  00181E  80E3               	bsf	plusw1,0,c
  8049  001820                     l2805:
  8050                           
  8051                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
  8052  001820  90D8               	bcf	status,0,c
  8053  001822  0EF9               	movlw	-7
  8054  001824  32E3               	rrcf	plusw1,f,c
  8055  001826  0EF8               	movlw	-8
  8056  001828  32E3               	rrcf	plusw1,f,c
  8057                           
  8058                           ;stkvar	___awdiv@counter @ sp[(-4)+3]
  8059  00182A  0EFF               	movlw	-1
  8060  00182C  50E3               	movf	plusw1,w,c
  8061  00182E  6E4F               	movwf	btemp,c
  8062  001830  0E01               	movlw	1
  8063  001832  5E4F               	subwf	btemp,f,c
  8064  001834  0EFF               	movlw	-1
  8065  001836  C04F  FFE3         	movff	btemp,plusw1
  8066  00183A  A4D8               	btfss	status,2,c
  8067  00183C  D7BC               	goto	u208_20
  8068  00183E                     u210_20:
  8069                           
  8070                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
  8071  00183E  0EFE               	movlw	-2
  8072  001840  50E3               	movf	plusw1,w,c
  8073  001842  B4D8               	btfsc	status,2,c
  8074  001844  D006               	goto	l2813
  8075                           
  8076                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
  8077                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
  8078  001846  0EFC               	movlw	-4
  8079  001848  6CE3               	negf	plusw1,c
  8080  00184A  0EFD               	movlw	-3
  8081  00184C  1EE3               	comf	plusw1,f,c
  8082  00184E  B0D8               	btfsc	status,0,c
  8083  001850  2AE3               	incf	plusw1,f,c
  8084  001852                     l2813:
  8085                           
  8086                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
  8087  001852  0EFC               	movlw	-4
  8088  001854  CFE3 F04F          	movff	plusw1,btemp
  8089  001858  0EFD               	movlw	-3
  8090  00185A  CFE3 F050          	movff	plusw1,btemp+1
  8091                           
  8092                           ; ___awdiv: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
  8093  00185E  0EF8               	movlw	248
  8094  001860  26E1               	addwf	fsr1l,f,c
  8095  001862  0EFF               	movlw	255
  8096  001864  22E2               	addwfc	fsr1h,f,c
  8097  001866  0012               	return		;funcret
  8098  001868                     __end_of___awdiv:
  8099                           	opt stack 0
  8100                           tosu	equ	0xFFF
  8101                           tosh	equ	0xFFE
  8102                           tosl	equ	0xFFD
  8103                           stkptr	equ	0xFFC
  8104                           tblptru	equ	0xFF8
  8105                           tblptrh	equ	0xFF7
  8106                           tblptrl	equ	0xFF6
  8107                           tablat	equ	0xFF5
  8108                           prodh	equ	0xFF4
  8109                           prodl	equ	0xFF3
  8110                           intcon	equ	0xFF2
  8111                           indf0	equ	0xFEF
  8112                           postinc0	equ	0xFEE
  8113                           plusw0	equ	0xFEB
  8114                           fsr0h	equ	0xFEA
  8115                           fsr0l	equ	0xFE9
  8116                           wreg	equ	0xFE8
  8117                           postinc1	equ	0xFE6
  8118                           postdec1	equ	0xFE5
  8119                           plusw1	equ	0xFE3
  8120                           fsr1h	equ	0xFE2
  8121                           fsr1l	equ	0xFE1
  8122                           bsr	equ	0xFE0
  8123                           indf2	equ	0xFDF
  8124                           postinc2	equ	0xFDE
  8125                           postdec2	equ	0xFDD
  8126                           plusw2	equ	0xFDB
  8127                           fsr2h	equ	0xFDA
  8128                           fsr2l	equ	0xFD9
  8129                           status	equ	0xFD8
  8130                           
  8131 ;; *************** function _ADCRead *****************
  8132 ;; Defined at:
  8133 ;;		line 109 in file "tasks.c"
  8134 ;; Parameters:    Size  Location     Type
  8135 ;;  ch              1  [STACK] unsigned char 
  8136 ;; Auto vars:     Size  Location     Type
  8137 ;;		None
  8138 ;; Return value:  Size  Location     Type
  8139 ;;                  2  [STACK] unsigned int 
  8140 ;; Registers used:
  8141 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+11
  8142 ;; Tracked objects:
  8143 ;;		On entry : 0/0
  8144 ;;		On exit  : 0/0
  8145 ;;		Unchanged: 0/0
  8146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8147 ;;      Params:         0       0       0       0       0       0       0
  8148 ;;      Locals:         0       0       0       0       0       0       0
  8149 ;;      Temps:          0       0       0       0       0       0       0
  8150 ;;      Totals:         0       0       0       0       0       0       0
  8151 ;;Total ram usage:        0 bytes
  8152 ;; Hardware stack levels used:    1
  8153 ;; Hardware stack levels required when called:    4
  8154 ;; This function calls:
  8155 ;;		Nothing
  8156 ;; This function is called by:
  8157 ;;		_cloro
  8158 ;;		_ph
  8159 ;; This function uses a reentrant model
  8160 ;;
  8161                           
  8162                           	psect	text38
  8163  003102                     __ptext38:
  8164                           	opt stack 0
  8165  003102                     _ADCRead:
  8166                           	opt stack 22
  8167                           
  8168                           ;tasks.c: 112: if(ch>13)
  8169                           ;stkvar	ADCRead@ch @ sp[(0)+-1]
  8170                           
  8171                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  8172                           ;incstack = 0
  8173  003102  0EFF               	movlw	-1
  8174  003104  CFE3 F04F          	movff	plusw1,btemp
  8175  003108  0E0D               	movlw	13
  8176  00310A  644F               	cpfsgt	btemp,c
  8177  00310C  D005               	goto	l402
  8178                           
  8179                           ;tasks.c: 113: return 0;
  8180  00310E  0E00               	movlw	0
  8181  003110  6E4F               	movwf	btemp,c
  8182  003112  0E00               	movlw	0
  8183  003114  6E50               	movwf	btemp+1,c
  8184  003116  D012               	goto	l403
  8185  003118                     l402:
  8186                           
  8187                           ;tasks.c: 116: ADCON0=0x00;
  8188  003118  6AC2               	clrf	4034,c	;volatile
  8189                           
  8190                           ;tasks.c: 117: ADCON0=(ch<<2);
  8191                           ;stkvar	ADCRead@ch @ sp[(0)+-1]
  8192  00311A  0EFF               	movlw	-1
  8193  00311C  CFE3 F05A          	movff	plusw1,btemp+11
  8194  003120  90D8               	bcf	status,0,c
  8195  003122  365A               	rlcf	btemp+11,f,c
  8196  003124  90D8               	bcf	status,0,c
  8197  003126  345A               	rlcf	btemp+11,w,c
  8198  003128  6EC2               	movwf	4034,c	;volatile
  8199                           
  8200                           ;tasks.c: 119: ADON=1;
  8201  00312A  80C2               	bsf	4034,0,c	;volatile
  8202                           
  8203                           ;tasks.c: 121: GODONE=1;
  8204  00312C  82C2               	bsf	4034,1,c	;volatile
  8205  00312E                     l404:
  8206  00312E  B2C2               	btfsc	4034,1,c	;volatile
  8207  003130  D7FE               	goto	l404
  8208                           
  8209                           ;tasks.c: 125: ADON=0;
  8210  003132  90C2               	bcf	4034,0,c	;volatile
  8211                           
  8212                           ;tasks.c: 127: return ADRES;
  8213  003134  CFC3 F04F          	movff	4035,btemp	;volatile
  8214  003138  CFC4 F050          	movff	4036,btemp+1	;volatile
  8215  00313C                     l403:
  8216                           
  8217                           ; _ADCRead: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsi
      +                          ze = 1, vargsize = 0
  8218  00313C  52E5               	movf	postdec1,f,c
  8219  00313E  0012               	return		;funcret
  8220  003140                     __end_of_ADCRead:
  8221                           	opt stack 0
  8222                           tosu	equ	0xFFF
  8223                           tosh	equ	0xFFE
  8224                           tosl	equ	0xFFD
  8225                           stkptr	equ	0xFFC
  8226                           tblptru	equ	0xFF8
  8227                           tblptrh	equ	0xFF7
  8228                           tblptrl	equ	0xFF6
  8229                           tablat	equ	0xFF5
  8230                           prodh	equ	0xFF4
  8231                           prodl	equ	0xFF3
  8232                           intcon	equ	0xFF2
  8233                           indf0	equ	0xFEF
  8234                           postinc0	equ	0xFEE
  8235                           plusw0	equ	0xFEB
  8236                           fsr0h	equ	0xFEA
  8237                           fsr0l	equ	0xFE9
  8238                           wreg	equ	0xFE8
  8239                           postinc1	equ	0xFE6
  8240                           postdec1	equ	0xFE5
  8241                           plusw1	equ	0xFE3
  8242                           fsr1h	equ	0xFE2
  8243                           fsr1l	equ	0xFE1
  8244                           bsr	equ	0xFE0
  8245                           indf2	equ	0xFDF
  8246                           postinc2	equ	0xFDE
  8247                           postdec2	equ	0xFDD
  8248                           plusw2	equ	0xFDB
  8249                           fsr2h	equ	0xFDA
  8250                           fsr2l	equ	0xFD9
  8251                           status	equ	0xFD8
  8252                           
  8253 ;; *************** function _ph *****************
  8254 ;; Defined at:
  8255 ;;		line 17 in file "tasks.c"
  8256 ;; Parameters:    Size  Location     Type
  8257 ;;		None
  8258 ;; Auto vars:     Size  Location     Type
  8259 ;;		None
  8260 ;; Return value:  Size  Location     Type
  8261 ;;                  2  121[None  ] PTR void 
  8262 ;; Registers used:
  8263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh
  8264 ;; Tracked objects:
  8265 ;;		On entry : 0/0
  8266 ;;		On exit  : 0/0
  8267 ;;		Unchanged: 0/0
  8268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8269 ;;      Params:         0       0       0       0       0       0       0
  8270 ;;      Locals:         0       0       0       0       0       0       0
  8271 ;;      Temps:          0       0       0       0       0       0       0
  8272 ;;      Totals:         0       0       0       0       0       0       0
  8273 ;;Total ram usage:        0 bytes
  8274 ;; Hardware stack levels used:    1
  8275 ;; Hardware stack levels required when called:    8
  8276 ;; This function calls:
  8277 ;;		_ADCRead
  8278 ;;		_LCDGotoXY
  8279 ;;		_LCDWriteInt
  8280 ;;		_LCDWriteString
  8281 ;;		___ftmul
  8282 ;;		___fttol
  8283 ;;		___lwtoft
  8284 ;;		_round
  8285 ;;		_sem_post
  8286 ;;		_sem_wait
  8287 ;; This function is called by:
  8288 ;;		_main
  8289 ;; This function uses a non-reentrant model
  8290 ;;
  8291                           
  8292                           	psect	text39
  8293  0027BE                     __ptext39:
  8294                           	opt stack 0
  8295  0027BE                     _ph:
  8296                           	opt stack 19
  8297                           
  8298                           ;tasks.c: 20: sem_wait(&s_1);
  8299                           
  8300                           ;incstack = 0
  8301                           ;tasks.c: 19: while(1) {
  8302  0027BE  0EBE               	movlw	low _s_1
  8303  0027C0  6EE6               	movwf	postinc1,c
  8304  0027C2  0E00               	movlw	high _s_1
  8305  0027C4  6EE6               	movwf	postinc1,c
  8306  0027C6  ECC4  F015         	call	_sem_wait	;wreg free
  8307                           
  8308                           ;tasks.c: 21: val=ADCRead(1);
  8309  0027CA  0E01               	movlw	1
  8310  0027CC  6EE6               	movwf	postinc1,c
  8311  0027CE  EC81  F018         	call	_ADCRead	;wreg free
  8312  0027D2  C04F  F00E         	movff	btemp,_val
  8313  0027D6  C050  F00F         	movff	btemp+1,_val+1
  8314                           
  8315                           ;tasks.c: 22: medph=round(val*0.020);
  8316  0027DA  0ED7               	movlw	215
  8317  0027DC  6EE6               	movwf	postinc1,c
  8318  0027DE  0EA3               	movlw	163
  8319  0027E0  6EE6               	movwf	postinc1,c
  8320  0027E2  0E3C               	movlw	60
  8321  0027E4  6EE6               	movwf	postinc1,c
  8322  0027E6  C00E  FFE6         	movff	_val,postinc1
  8323  0027EA  C00F  FFE6         	movff	_val+1,postinc1
  8324  0027EE  ECDD  F018         	call	___lwtoft	;wreg free
  8325  0027F2  C04F  FFE6         	movff	btemp,postinc1
  8326  0027F6  C050  FFE6         	movff	btemp+1,postinc1
  8327  0027FA  C051  FFE6         	movff	btemp+2,postinc1
  8328  0027FE  EC4A  F008         	call	___ftmul	;wreg free
  8329  002802  C04F  FFE6         	movff	btemp,postinc1
  8330  002806  C050  FFE6         	movff	btemp+1,postinc1
  8331  00280A  C051  FFE6         	movff	btemp+2,postinc1
  8332  00280E  EC5B  F016         	call	_round	;wreg free
  8333  002812  C04F  FFE6         	movff	btemp,postinc1
  8334  002816  C050  FFE6         	movff	btemp+1,postinc1
  8335  00281A  C051  FFE6         	movff	btemp+2,postinc1
  8336  00281E  EC44  F00A         	call	___fttol	;wreg free
  8337  002822  C04F  F00A         	movff	btemp,_medph
  8338  002826  C050  F00B         	movff	btemp+1,_medph+1
  8339                           
  8340                           ;tasks.c: 23: { LCDGotoXY(6,1); LCDWriteString("pH:");};
  8341  00282A  0E01               	movlw	1
  8342  00282C  6EE6               	movwf	postinc1,c
  8343  00282E  0E06               	movlw	6
  8344  002830  6EE6               	movwf	postinc1,c
  8345  002832  ECF7  F018         	call	_LCDGotoXY	;wreg free
  8346  002836  0E13               	movlw	low STR_3
  8347  002838  6EE6               	movwf	postinc1,c
  8348  00283A  0E06               	movlw	high STR_3
  8349  00283C  6EE6               	movwf	postinc1,c
  8350  00283E  EC78  F017         	call	_LCDWriteString	;wreg free
  8351                           
  8352                           ;tasks.c: 24: { LCDGotoXY(8,1); LCDWriteInt(medph,2);};
  8353  002842  0E01               	movlw	1
  8354  002844  6EE6               	movwf	postinc1,c
  8355  002846  0E08               	movlw	8
  8356  002848  6EE6               	movwf	postinc1,c
  8357  00284A  ECF7  F018         	call	_LCDGotoXY	;wreg free
  8358  00284E  0E02               	movlw	2
  8359  002850  6EE6               	movwf	postinc1,c
  8360  002852  0E00               	movlw	0
  8361  002854  6EE6               	movwf	postinc1,c
  8362  002856  C00A  FFE6         	movff	_medph,postinc1
  8363  00285A  C00B  FFE6         	movff	_medph+1,postinc1
  8364  00285E  EC57  F009         	call	_LCDWriteInt	;wreg free
  8365                           
  8366                           ;tasks.c: 25: sem_post(&s_2);
  8367  002862  0EA4               	movlw	low _s_2
  8368  002864  6EE6               	movwf	postinc1,c
  8369  002866  0E00               	movlw	high _s_2
  8370  002868  6EE6               	movwf	postinc1,c
  8371  00286A  ECF0  F016         	call	_sem_post	;wreg free
  8372  00286E  D7A7               	goto	_ph
  8373  002870                     __end_of_ph:
  8374                           	opt stack 0
  8375                           tosu	equ	0xFFF
  8376                           tosh	equ	0xFFE
  8377                           tosl	equ	0xFFD
  8378                           stkptr	equ	0xFFC
  8379                           tblptru	equ	0xFF8
  8380                           tblptrh	equ	0xFF7
  8381                           tblptrl	equ	0xFF6
  8382                           tablat	equ	0xFF5
  8383                           prodh	equ	0xFF4
  8384                           prodl	equ	0xFF3
  8385                           intcon	equ	0xFF2
  8386                           indf0	equ	0xFEF
  8387                           postinc0	equ	0xFEE
  8388                           plusw0	equ	0xFEB
  8389                           fsr0h	equ	0xFEA
  8390                           fsr0l	equ	0xFE9
  8391                           wreg	equ	0xFE8
  8392                           postinc1	equ	0xFE6
  8393                           postdec1	equ	0xFE5
  8394                           plusw1	equ	0xFE3
  8395                           fsr1h	equ	0xFE2
  8396                           fsr1l	equ	0xFE1
  8397                           bsr	equ	0xFE0
  8398                           indf2	equ	0xFDF
  8399                           postinc2	equ	0xFDE
  8400                           postdec2	equ	0xFDD
  8401                           plusw2	equ	0xFDB
  8402                           fsr2h	equ	0xFDA
  8403                           fsr2l	equ	0xFD9
  8404                           status	equ	0xFD8
  8405                           
  8406 ;; *************** function _controle *****************
  8407 ;; Defined at:
  8408 ;;		line 30 in file "tasks.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;		None
  8411 ;; Auto vars:     Size  Location     Type
  8412 ;;  msg             1   12[BANK0 ] unsigned char 
  8413 ;; Return value:  Size  Location     Type
  8414 ;;                  2  123[None  ] PTR void 
  8415 ;; Registers used:
  8416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh, cstack
  8417 ;; Tracked objects:
  8418 ;;		On entry : 0/0
  8419 ;;		On exit  : 0/0
  8420 ;;		Unchanged: 0/0
  8421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8422 ;;      Params:         0       0       0       0       0       0       0
  8423 ;;      Locals:         0       1       0       0       0       0       0
  8424 ;;      Temps:          0       0       0       0       0       0       0
  8425 ;;      Totals:         0       1       0       0       0       0       0
  8426 ;;Total ram usage:        1 bytes
  8427 ;; Hardware stack levels used:    1
  8428 ;; Hardware stack levels required when called:    8
  8429 ;; This function calls:
  8430 ;;		_pipe_destroy
  8431 ;;		_pipe_read
  8432 ;; This function is called by:
  8433 ;;		_main
  8434 ;; This function uses a non-reentrant model
  8435 ;;
  8436                           
  8437                           	psect	text40
  8438  003140                     __ptext40:
  8439                           	opt stack 0
  8440  003140                     _controle:
  8441                           	opt stack 19
  8442                           
  8443                           ;tasks.c: 34: pipe_read(&mensagens, &msg);
  8444                           
  8445                           ;incstack = 0
  8446                           ;tasks.c: 31: char msg;
  8447                           ;tasks.c: 32: while(1) {
  8448  003140  0E13               	movlw	low _mensagens
  8449  003142  0100               	movlb	0	; () banked
  8450  003144  6FD8               	movwf	pipe_read@pipe_handler& (0+255),b
  8451  003146  0E00               	movlw	high _mensagens
  8452  003148  6FD9               	movwf	(pipe_read@pipe_handler+1)& (0+255),b
  8453  00314A  0EE4               	movlw	low controle@msg
  8454  00314C  6FDA               	movwf	pipe_read@msg& (0+255),b
  8455  00314E  0E00               	movlw	high controle@msg
  8456  003150  6FDB               	movwf	(pipe_read@msg+1)& (0+255),b
  8457  003152  EC85  F00F         	call	_pipe_read	;wreg free
  8458                           
  8459                           ;tasks.c: 35: if(msg == '2'){
  8460  003156  0E32               	movlw	50
  8461  003158  0100               	movlb	0	; () banked
  8462  00315A  19E4               	xorwf	controle@msg& (0+255),w,b
  8463  00315C  A4D8               	btfss	status,2,c
  8464  00315E  D002               	goto	l375
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;tasks.c: 36: PORTCbits.RC2 = 0;
  8468  003160  9482               	bcf	3970,2,c	;volatile
  8469                           
  8470                           ;tasks.c: 39: }
  8471  003162  D7EE               	goto	_controle
  8472  003164                     l375:
  8473                           
  8474                           ; BSR set to: 0
  8475                           ;tasks.c: 40: else if(msg == '3'){
  8476                           
  8477                           ; BSR set to: 0
  8478  003164  0E33               	movlw	51
  8479  003166  19E4               	xorwf	controle@msg& (0+255),w,b
  8480  003168  A4D8               	btfss	status,2,c
  8481  00316A  D7EA               	goto	_controle
  8482                           
  8483                           ; BSR set to: 0
  8484                           ;tasks.c: 42: PORTCbits.RC2 = 0;
  8485  00316C  9482               	bcf	3970,2,c	;volatile
  8486                           
  8487                           ;tasks.c: 44: PORTCbits.RC3 = 0;
  8488  00316E  9682               	bcf	3970,3,c	;volatile
  8489                           
  8490                           ; BSR set to: 0
  8491                           ;tasks.c: 46: pipe_destroy(&mensagens);
  8492  003170  0E13               	movlw	low _mensagens
  8493  003172  6FD8               	movwf	pipe_destroy@pipe_handler& (0+255),b
  8494  003174  0E00               	movlw	high _mensagens
  8495  003176  6FD9               	movwf	(pipe_destroy@pipe_handler+1)& (0+255),b
  8496  003178  EC37  F019         	call	_pipe_destroy	;wreg free
  8497  00317C  D7E1               	goto	_controle
  8498  00317E                     __end_of_controle:
  8499                           	opt stack 0
  8500                           tosu	equ	0xFFF
  8501                           tosh	equ	0xFFE
  8502                           tosl	equ	0xFFD
  8503                           stkptr	equ	0xFFC
  8504                           tblptru	equ	0xFF8
  8505                           tblptrh	equ	0xFF7
  8506                           tblptrl	equ	0xFF6
  8507                           tablat	equ	0xFF5
  8508                           prodh	equ	0xFF4
  8509                           prodl	equ	0xFF3
  8510                           intcon	equ	0xFF2
  8511                           indf0	equ	0xFEF
  8512                           postinc0	equ	0xFEE
  8513                           plusw0	equ	0xFEB
  8514                           fsr0h	equ	0xFEA
  8515                           fsr0l	equ	0xFE9
  8516                           wreg	equ	0xFE8
  8517                           postinc1	equ	0xFE6
  8518                           postdec1	equ	0xFE5
  8519                           plusw1	equ	0xFE3
  8520                           fsr1h	equ	0xFE2
  8521                           fsr1l	equ	0xFE1
  8522                           bsr	equ	0xFE0
  8523                           indf2	equ	0xFDF
  8524                           postinc2	equ	0xFDE
  8525                           postdec2	equ	0xFDD
  8526                           plusw2	equ	0xFDB
  8527                           fsr2h	equ	0xFDA
  8528                           fsr2l	equ	0xFD9
  8529                           status	equ	0xFD8
  8530                           
  8531 ;; *************** function _pipe_read *****************
  8532 ;; Defined at:
  8533 ;;		line 18 in file "pipe.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;  pipe_handler    2    0[BANK0 ] PTR struct pipe
  8536 ;;		 -> mensagens(22), 
  8537 ;;  msg             2    2[BANK0 ] PTR unsigned char 
  8538 ;;		 -> controle@msg(1), 
  8539 ;; Auto vars:     Size  Location     Type
  8540 ;;		None
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  1    wreg      void 
  8543 ;; Registers used:
  8544 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8550 ;;      Params:         0       4       0       0       0       0       0
  8551 ;;      Locals:         0       0       0       0       0       0       0
  8552 ;;      Temps:          0       8       0       0       0       0       0
  8553 ;;      Totals:         0      12       0       0       0       0       0
  8554 ;;Total ram usage:       12 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    7
  8557 ;; This function calls:
  8558 ;;		___llmod
  8559 ;;		_libera_processos
  8560 ;;		_nojoDispatcher
  8561 ;; This function is called by:
  8562 ;;		_controle
  8563 ;; This function uses a non-reentrant model
  8564 ;;
  8565                           
  8566                           	psect	text41
  8567  001F0A                     __ptext41:
  8568                           	opt stack 0
  8569  001F0A                     _pipe_read:
  8570                           	opt stack 19
  8571                           
  8572                           ;pipe.c: 20: INTCONbits.GIE = 0;
  8573                           
  8574                           ;incstack = 0
  8575  001F0A  9EF2               	bcf	intcon,7,c	;volatile
  8576                           
  8577                           ;pipe.c: 22: if (pipe_handler->p_count == 0) {
  8578  001F0C  0100               	movlb	0	; () banked
  8579  001F0E  EE20 F012          	lfsr	2,18
  8580  001F12  51D8               	movf	pipe_read@pipe_handler& (0+255),w,b
  8581  001F14  26D9               	addwf	fsr2l,f,c
  8582  001F16  51D9               	movf	(pipe_read@pipe_handler+1)& (0+255),w,b
  8583  001F18  22DA               	addwfc	fsr2h,f,c
  8584  001F1A  50DE               	movf	postinc2,w,c
  8585  001F1C  10DE               	iorwf	postinc2,w,c
  8586  001F1E  10DE               	iorwf	postinc2,w,c
  8587  001F20  10DE               	iorwf	postinc2,w,c
  8588  001F22  A4D8               	btfss	status,2,c
  8589  001F24  D005               	goto	i1l195
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;pipe.c: 25: nojoDispatcher(WAITING_PIPE);
  8593  001F26  0E03               	movlw	3
  8594  001F28  6EE6               	movwf	postinc1,c
  8595  001F2A  EC0E  F003         	call	_nojoDispatcher	;wreg free
  8596                           
  8597                           ;pipe.c: 26: }
  8598  001F2E  D06F               	goto	i1l196
  8599  001F30                     i1l195:
  8600                           
  8601                           ;pipe.c: 27: else {
  8602                           ;pipe.c: 28: *msg = pipe_handler->p_msg_queue[pipe_handler->p_pos_read];
  8603  001F30  0100               	movlb	0	; () banked
  8604  001F32  EE20 F00A          	lfsr	2,10
  8605  001F36  51D8               	movf	pipe_read@pipe_handler& (0+255),w,b
  8606  001F38  26D9               	addwf	fsr2l,f,c
  8607  001F3A  51D9               	movf	(pipe_read@pipe_handler+1)& (0+255),w,b
  8608  001F3C  22DA               	addwfc	fsr2h,f,c
  8609  001F3E  CFDE F0DC          	movff	postinc2,??_pipe_read
  8610  001F42  CFDD F0DD          	movff	postdec2,??_pipe_read+1
  8611  001F46  EE20 F004          	lfsr	2,4
  8612  001F4A  51D8               	movf	pipe_read@pipe_handler& (0+255),w,b
  8613  001F4C  26D9               	addwf	fsr2l,f,c
  8614  001F4E  51D9               	movf	(pipe_read@pipe_handler+1)& (0+255),w,b
  8615  001F50  22DA               	addwfc	fsr2h,f,c
  8616  001F52  CFDE F0DE          	movff	postinc2,??_pipe_read+2
  8617  001F56  CFDD F0DF          	movff	postdec2,??_pipe_read+3
  8618  001F5A  51DC               	movf	??_pipe_read& (0+255),w,b
  8619  001F5C  25DE               	addwf	(??_pipe_read+2)& (0+255),w,b
  8620  001F5E  6ED9               	movwf	fsr2l,c
  8621  001F60  51DD               	movf	(??_pipe_read+1)& (0+255),w,b
  8622  001F62  21DF               	addwfc	(??_pipe_read+3)& (0+255),w,b
  8623  001F64  6EDA               	movwf	fsr2h,c
  8624  001F66  C0DA  FFE9         	movff	pipe_read@msg,fsr0l
  8625  001F6A  C0DB  FFEA         	movff	pipe_read@msg+1,fsr0h
  8626  001F6E  CFDF FFEF          	movff	indf2,indf0
  8627                           
  8628                           ; BSR set to: 0
  8629                           ;pipe.c: 29: pipe_handler->p_pos_read = (pipe_handler->p_pos_read + 1) % pipe_handler->p
      +                          _size;
  8630  001F72  EE20 F00E          	lfsr	2,14
  8631  001F76  51D8               	movf	pipe_read@pipe_handler& (0+255),w,b
  8632  001F78  26D9               	addwf	fsr2l,f,c
  8633  001F7A  51D9               	movf	(pipe_read@pipe_handler+1)& (0+255),w,b
  8634  001F7C  22DA               	addwfc	fsr2h,f,c
  8635  001F7E  CFDE FFE6          	movff	postinc2,postinc1
  8636  001F82  CFDE FFE6          	movff	postinc2,postinc1
  8637  001F86  CFDE FFE6          	movff	postinc2,postinc1
  8638  001F8A  CFDE FFE6          	movff	postinc2,postinc1
  8639  001F8E  EE20 F00A          	lfsr	2,10
  8640  001F92  51D8               	movf	pipe_read@pipe_handler& (0+255),w,b
  8641  001F94  26D9               	addwf	fsr2l,f,c
  8642  001F96  51D9               	movf	(pipe_read@pipe_handler+1)& (0+255),w,b
  8643  001F98  22DA               	addwfc	fsr2h,f,c
  8644  001F9A  CFDE F0DC          	movff	postinc2,??_pipe_read
  8645  001F9E  CFDE F0DD          	movff	postinc2,??_pipe_read+1
  8646  001FA2  CFDE F0DE          	movff	postinc2,??_pipe_read+2
  8647  001FA6  CFDE F0DF          	movff	postinc2,??_pipe_read+3
  8648  001FAA  0E01               	movlw	1
  8649  001FAC  25DC               	addwf	??_pipe_read& (0+255),w,b
  8650  001FAE  6FE0               	movwf	(??_pipe_read+4)& (0+255),b
  8651  001FB0  0E00               	movlw	0
  8652  001FB2  21DD               	addwfc	(??_pipe_read+1)& (0+255),w,b
  8653  001FB4  6FE1               	movwf	(??_pipe_read+5)& (0+255),b
  8654  001FB6  0E00               	movlw	0
  8655  001FB8  21DE               	addwfc	(??_pipe_read+2)& (0+255),w,b
  8656  001FBA  6FE2               	movwf	(??_pipe_read+6)& (0+255),b
  8657  001FBC  0E00               	movlw	0
  8658  001FBE  21DF               	addwfc	(??_pipe_read+3)& (0+255),w,b
  8659  001FC0  6FE3               	movwf	(??_pipe_read+7)& (0+255),b
  8660  001FC2  C0E0  FFE6         	movff	??_pipe_read+4,postinc1
  8661  001FC6  C0E1  FFE6         	movff	??_pipe_read+5,postinc1
  8662  001FCA  C0E2  FFE6         	movff	??_pipe_read+6,postinc1
  8663  001FCE  C0E3  FFE6         	movff	??_pipe_read+7,postinc1
  8664  001FD2  EC05  F012         	call	___llmod	;wreg free
  8665  001FD6  0100               	movlb	0	; () banked
  8666  001FD8  EE20 F00A          	lfsr	2,10
  8667  001FDC  51D8               	movf	pipe_read@pipe_handler& (0+255),w,b
  8668  001FDE  26D9               	addwf	fsr2l,f,c
  8669  001FE0  51D9               	movf	(pipe_read@pipe_handler+1)& (0+255),w,b
  8670  001FE2  22DA               	addwfc	fsr2h,f,c
  8671  001FE4  C04F  FFDE         	movff	btemp,postinc2
  8672  001FE8  C050  FFDE         	movff	btemp+1,postinc2
  8673  001FEC  C051  FFDE         	movff	btemp+2,postinc2
  8674  001FF0  C052  FFDE         	movff	btemp+3,postinc2
  8675                           
  8676                           ; BSR set to: 0
  8677                           ;pipe.c: 30: pipe_handler->p_count--;
  8678  001FF4  EE20 F012          	lfsr	2,18
  8679  001FF8  51D8               	movf	pipe_read@pipe_handler& (0+255),w,b
  8680  001FFA  26D9               	addwf	fsr2l,f,c
  8681  001FFC  51D9               	movf	(pipe_read@pipe_handler+1)& (0+255),w,b
  8682  001FFE  22DA               	addwfc	fsr2h,f,c
  8683  002000  06DE               	decf	postinc2,f,c
  8684  002002  0E00               	movlw	0
  8685  002004  5ADE               	subwfb	postinc2,f,c
  8686  002006  5ADE               	subwfb	postinc2,f,c
  8687  002008  5ADE               	subwfb	postinc2,f,c
  8688                           
  8689                           ; BSR set to: 0
  8690                           ;pipe.c: 32: libera_processos();
  8691  00200A  ECD1  F012         	call	_libera_processos	;wreg free
  8692  00200E                     i1l196:
  8693                           
  8694                           ;pipe.c: 33: }
  8695                           ;pipe.c: 35: INTCONbits.GIE = 1;
  8696  00200E  8EF2               	bsf	intcon,7,c	;volatile
  8697  002010  0012               	return		;funcret
  8698  002012                     __end_of_pipe_read:
  8699                           	opt stack 0
  8700                           tosu	equ	0xFFF
  8701                           tosh	equ	0xFFE
  8702                           tosl	equ	0xFFD
  8703                           stkptr	equ	0xFFC
  8704                           tblptru	equ	0xFF8
  8705                           tblptrh	equ	0xFF7
  8706                           tblptrl	equ	0xFF6
  8707                           tablat	equ	0xFF5
  8708                           prodh	equ	0xFF4
  8709                           prodl	equ	0xFF3
  8710                           intcon	equ	0xFF2
  8711                           indf0	equ	0xFEF
  8712                           postinc0	equ	0xFEE
  8713                           plusw0	equ	0xFEB
  8714                           fsr0h	equ	0xFEA
  8715                           fsr0l	equ	0xFE9
  8716                           wreg	equ	0xFE8
  8717                           postinc1	equ	0xFE6
  8718                           postdec1	equ	0xFE5
  8719                           plusw1	equ	0xFE3
  8720                           fsr1h	equ	0xFE2
  8721                           fsr1l	equ	0xFE1
  8722                           bsr	equ	0xFE0
  8723                           indf2	equ	0xFDF
  8724                           postinc2	equ	0xFDE
  8725                           postdec2	equ	0xFDD
  8726                           plusw2	equ	0xFDB
  8727                           fsr2h	equ	0xFDA
  8728                           fsr2l	equ	0xFD9
  8729                           status	equ	0xFD8
  8730                           
  8731 ;; *************** function _libera_processos *****************
  8732 ;; Defined at:
  8733 ;;		line 63 in file "pipe.c"
  8734 ;; Parameters:    Size  Location     Type
  8735 ;;		None
  8736 ;; Auto vars:     Size  Location     Type
  8737 ;;  i               2  [STACK] int 
  8738 ;; Return value:  Size  Location     Type
  8739 ;;                  1  [STACK] void 
  8740 ;; Registers used:
  8741 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+4, btemp+5, btemp+6, btemp+7, btemp+10, 
      +btemp+11, prodl, prodh
  8742 ;; Tracked objects:
  8743 ;;		On entry : 3F/0
  8744 ;;		On exit  : 0/0
  8745 ;;		Unchanged: 0/0
  8746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8747 ;;      Params:         0       0       0       0       0       0       0
  8748 ;;      Locals:         0       0       0       0       0       0       0
  8749 ;;      Temps:          0       0       0       0       0       0       0
  8750 ;;      Totals:         0       0       0       0       0       0       0
  8751 ;;Total ram usage:        0 bytes
  8752 ;; Hardware stack levels used:    1
  8753 ;; Hardware stack levels required when called:    5
  8754 ;; This function calls:
  8755 ;;		___wmul
  8756 ;; This function is called by:
  8757 ;;		_pipe_read
  8758 ;;		_pipe_write
  8759 ;; This function uses a reentrant model
  8760 ;;
  8761                           
  8762                           	psect	text42
  8763  0025A2                     __ptext42:
  8764                           	opt stack 0
  8765  0025A2                     _libera_processos:
  8766                           	opt stack 0
  8767                           
  8768                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  8769  0025A2  52E6               	movf	postinc1,f,c
  8770  0025A4  52E6               	movf	postinc1,f,c
  8771                           
  8772                           ;pipe.c: 65: int i;
  8773                           ;pipe.c: 66: for (i = 0; i < F_APTOS.tasks_installed; i++)
  8774                           ;stkvar	libera_processos@i @ sp[(-2)+0]
  8775                           
  8776                           ;incstack = 0
  8777  0025A6  0EFE               	movlw	-2
  8778  0025A8  6AE3               	clrf	plusw1,c
  8779  0025AA  0EFF               	movlw	-1
  8780  0025AC  6AE3               	clrf	plusw1,c
  8781  0025AE  D037               	goto	l3621
  8782  0025B0                     l3615:
  8783                           
  8784                           ;pipe.c: 67: if (F_APTOS.FILA_APTOS[i].task_STATE == WAITING_PIPE)
  8785  0025B0  0E70               	movlw	112
  8786  0025B2  6EE6               	movwf	postinc1,c
  8787  0025B4  0E00               	movlw	0
  8788  0025B6  6EE6               	movwf	postinc1,c
  8789                           
  8790                           ;stkvar	libera_processos@i @ sp[(-4)+0]
  8791  0025B8  0EFC               	movlw	-4
  8792  0025BA  CFE3 FFE6          	movff	plusw1,postinc1
  8793  0025BE  CFE3 FFE6          	movff	plusw1,postinc1
  8794  0025C2  EC10  F016         	call	___wmul	;wreg free
  8795  0025C6  0E29               	movlw	low (_F_APTOS+8)
  8796  0025C8  244F               	addwf	btemp,w,c
  8797  0025CA  6ED9               	movwf	fsr2l,c
  8798  0025CC  0E01               	movlw	high (_F_APTOS+8)
  8799  0025CE  2050               	addwfc	btemp+1,w,c
  8800  0025D0  6EDA               	movwf	fsr2h,c
  8801  0025D2  0E03               	movlw	3
  8802  0025D4  18DE               	xorwf	postinc2,w,c
  8803  0025D6  A4D8               	btfss	status,2,c
  8804  0025D8  D013               	goto	l3619
  8805                           
  8806                           ;pipe.c: 68: F_APTOS.FILA_APTOS[i].task_STATE = READY;
  8807  0025DA  0E70               	movlw	112
  8808  0025DC  6EE6               	movwf	postinc1,c
  8809  0025DE  0E00               	movlw	0
  8810  0025E0  6EE6               	movwf	postinc1,c
  8811                           
  8812                           ;stkvar	libera_processos@i @ sp[(-4)+0]
  8813  0025E2  0EFC               	movlw	-4
  8814  0025E4  CFE3 FFE6          	movff	plusw1,postinc1
  8815  0025E8  CFE3 FFE6          	movff	plusw1,postinc1
  8816  0025EC  EC10  F016         	call	___wmul	;wreg free
  8817  0025F0  0E29               	movlw	low (_F_APTOS+8)
  8818  0025F2  244F               	addwf	btemp,w,c
  8819  0025F4  6ED9               	movwf	fsr2l,c
  8820  0025F6  0E01               	movlw	high (_F_APTOS+8)
  8821  0025F8  2050               	addwfc	btemp+1,w,c
  8822  0025FA  6EDA               	movwf	fsr2h,c
  8823  0025FC  0E00               	movlw	0
  8824  0025FE  6EDF               	movwf	indf2,c
  8825  002600                     l3619:
  8826                           
  8827                           ;stkvar	libera_processos@i @ sp[(-2)+0]
  8828  002600  0EFE               	movlw	-2
  8829  002602  50E3               	movf	plusw1,w,c
  8830  002604  0F01               	addlw	1
  8831  002606  6E4F               	movwf	btemp,c
  8832  002608  0EFE               	movlw	-2
  8833  00260A  C04F  FFE3         	movff	btemp,plusw1
  8834  00260E  6A4F               	clrf	btemp,c
  8835  002610  0EFF               	movlw	-1
  8836  002612  50E3               	movf	plusw1,w,c
  8837  002614  204F               	addwfc	btemp,w,c
  8838  002616  6E4F               	movwf	btemp,c
  8839  002618  0EFF               	movlw	-1
  8840  00261A  C04F  FFE3         	movff	btemp,plusw1
  8841  00261E                     l3621:
  8842  00261E  EE23  F051         	lfsr	2,_F_APTOS+560
  8843                           
  8844                           ;stkvar	libera_processos@i @ sp[(-2)+0]
  8845  002622  0EFE               	movlw	-2
  8846  002624  CFE3 F059          	movff	plusw1,btemp+10
  8847  002628  0EFF               	movlw	-1
  8848  00262A  CFE3 F05A          	movff	plusw1,btemp+11
  8849  00262E  C059  F053         	movff	btemp+10,btemp+4
  8850  002632  C05A  F054         	movff	btemp+11,btemp+5
  8851  002636  0E00               	movlw	0
  8852  002638  BE54               	btfsc	btemp+5,7,c
  8853  00263A  0EFF               	movlw	255
  8854  00263C  6E55               	movwf	btemp+6,c
  8855  00263E  6E56               	movwf	btemp+7,c
  8856  002640  50DE               	movf	postinc2,w,c
  8857  002642  5C53               	subwf	btemp+4,w,c
  8858  002644  50DE               	movf	postinc2,w,c
  8859  002646  5854               	subwfb	btemp+5,w,c
  8860  002648  50DE               	movf	postinc2,w,c
  8861  00264A  5855               	subwfb	btemp+6,w,c
  8862  00264C  50DE               	movf	postinc2,w,c
  8863  00264E  5856               	subwfb	btemp+7,w,c
  8864  002650  A0D8               	btfss	status,0,c
  8865  002652  D7AE               	goto	l3615
  8866                           
  8867                           ; _libera_processos: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           0, argsize = 0, vargsize = 0
  8868  002654  52E5               	movf	postdec1,f,c
  8869  002656  52E5               	movf	postdec1,f,c
  8870  002658  0012               	return		;funcret
  8871  00265A                     __end_of_libera_processos:
  8872                           	opt stack 0
  8873                           tosu	equ	0xFFF
  8874                           tosh	equ	0xFFE
  8875                           tosl	equ	0xFFD
  8876                           stkptr	equ	0xFFC
  8877                           tblptru	equ	0xFF8
  8878                           tblptrh	equ	0xFF7
  8879                           tblptrl	equ	0xFF6
  8880                           tablat	equ	0xFF5
  8881                           prodh	equ	0xFF4
  8882                           prodl	equ	0xFF3
  8883                           intcon	equ	0xFF2
  8884                           indf0	equ	0xFEF
  8885                           postinc0	equ	0xFEE
  8886                           plusw0	equ	0xFEB
  8887                           fsr0h	equ	0xFEA
  8888                           fsr0l	equ	0xFE9
  8889                           wreg	equ	0xFE8
  8890                           postinc1	equ	0xFE6
  8891                           postdec1	equ	0xFE5
  8892                           plusw1	equ	0xFE3
  8893                           fsr1h	equ	0xFE2
  8894                           fsr1l	equ	0xFE1
  8895                           bsr	equ	0xFE0
  8896                           indf2	equ	0xFDF
  8897                           postinc2	equ	0xFDE
  8898                           postdec2	equ	0xFDD
  8899                           plusw2	equ	0xFDB
  8900                           fsr2h	equ	0xFDA
  8901                           fsr2l	equ	0xFD9
  8902                           status	equ	0xFD8
  8903                           
  8904 ;; *************** function _pipe_destroy *****************
  8905 ;; Defined at:
  8906 ;;		line 58 in file "pipe.c"
  8907 ;; Parameters:    Size  Location     Type
  8908 ;;  pipe_handler    2    0[BANK0 ] PTR struct pipe
  8909 ;;		 -> mensagens(22), 
  8910 ;; Auto vars:     Size  Location     Type
  8911 ;;		None
  8912 ;; Return value:  Size  Location     Type
  8913 ;;                  1    wreg      void 
  8914 ;; Registers used:
  8915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8916 ;; Tracked objects:
  8917 ;;		On entry : 0/0
  8918 ;;		On exit  : 0/0
  8919 ;;		Unchanged: 0/0
  8920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8921 ;;      Params:         0       2       0       0       0       0       0
  8922 ;;      Locals:         0       0       0       0       0       0       0
  8923 ;;      Temps:          0       0       0       0       0       0       0
  8924 ;;      Totals:         0       2       0       0       0       0       0
  8925 ;;Total ram usage:        2 bytes
  8926 ;; Hardware stack levels used:    1
  8927 ;; Hardware stack levels required when called:    5
  8928 ;; This function calls:
  8929 ;;		_SRAMfree
  8930 ;; This function is called by:
  8931 ;;		_controle
  8932 ;; This function uses a non-reentrant model
  8933 ;;
  8934                           
  8935                           	psect	text43
  8936  00326E                     __ptext43:
  8937                           	opt stack 0
  8938  00326E                     _pipe_destroy:
  8939                           	opt stack 21
  8940                           
  8941                           ;pipe.c: 60: SRAMfree(pipe_handler->p_msg_queue);
  8942                           
  8943                           ;incstack = 0
  8944  00326E  0100               	movlb	0	; () banked
  8945  003270  EE20 F004          	lfsr	2,4
  8946  003274  51D8               	movf	pipe_destroy@pipe_handler& (0+255),w,b
  8947  003276  26D9               	addwf	fsr2l,f,c
  8948  003278  51D9               	movf	(pipe_destroy@pipe_handler+1)& (0+255),w,b
  8949  00327A  22DA               	addwfc	fsr2h,f,c
  8950  00327C  CFDE F04D          	movff	postinc2,SRAMfree@pSRAM
  8951  003280  CFDD F04E          	movff	postdec2,SRAMfree@pSRAM+1
  8952  003284  EC5A  F019         	call	_SRAMfree	;wreg free
  8953  003288  0012               	return		;funcret
  8954  00328A                     __end_of_pipe_destroy:
  8955                           	opt stack 0
  8956                           tosu	equ	0xFFF
  8957                           tosh	equ	0xFFE
  8958                           tosl	equ	0xFFD
  8959                           stkptr	equ	0xFFC
  8960                           tblptru	equ	0xFF8
  8961                           tblptrh	equ	0xFF7
  8962                           tblptrl	equ	0xFF6
  8963                           tablat	equ	0xFF5
  8964                           prodh	equ	0xFF4
  8965                           prodl	equ	0xFF3
  8966                           intcon	equ	0xFF2
  8967                           indf0	equ	0xFEF
  8968                           postinc0	equ	0xFEE
  8969                           plusw0	equ	0xFEB
  8970                           fsr0h	equ	0xFEA
  8971                           fsr0l	equ	0xFE9
  8972                           wreg	equ	0xFE8
  8973                           postinc1	equ	0xFE6
  8974                           postdec1	equ	0xFE5
  8975                           plusw1	equ	0xFE3
  8976                           fsr1h	equ	0xFE2
  8977                           fsr1l	equ	0xFE1
  8978                           bsr	equ	0xFE0
  8979                           indf2	equ	0xFDF
  8980                           postinc2	equ	0xFDE
  8981                           postdec2	equ	0xFDD
  8982                           plusw2	equ	0xFDB
  8983                           fsr2h	equ	0xFDA
  8984                           fsr2l	equ	0xFD9
  8985                           status	equ	0xFD8
  8986                           
  8987 ;; *************** function _SRAMfree *****************
  8988 ;; Defined at:
  8989 ;;		line 288 in file "sralloc.c"
  8990 ;; Parameters:    Size  Location     Type
  8991 ;;  pSRAM           2   36[COMRAM] PTR unsigned char 
  8992 ;;		 -> _uDynamicHeap(512), NULL(0), 
  8993 ;; Auto vars:     Size  Location     Type
  8994 ;;		None
  8995 ;; Return value:  Size  Location     Type
  8996 ;;                  1    wreg      void 
  8997 ;; Registers used:
  8998 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8999 ;; Tracked objects:
  9000 ;;		On entry : 0/0
  9001 ;;		On exit  : 0/0
  9002 ;;		Unchanged: 0/0
  9003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9004 ;;      Params:         2       0       0       0       0       0       0
  9005 ;;      Locals:         0       0       0       0       0       0       0
  9006 ;;      Temps:          0       0       0       0       0       0       0
  9007 ;;      Totals:         2       0       0       0       0       0       0
  9008 ;;Total ram usage:        2 bytes
  9009 ;; Hardware stack levels used:    1
  9010 ;; Hardware stack levels required when called:    4
  9011 ;; This function calls:
  9012 ;;		Nothing
  9013 ;; This function is called by:
  9014 ;;		_pipe_destroy
  9015 ;; This function uses a non-reentrant model
  9016 ;;
  9017                           
  9018                           	psect	text44
  9019  0032B4                     __ptext44:
  9020                           	opt stack 0
  9021  0032B4                     _SRAMfree:
  9022                           	opt stack 21
  9023                           
  9024                           ;sralloc.c: 291: (*(SALLOC *)(pSRAM - 1)).bits.alloc = 0;
  9025                           
  9026                           ;incstack = 0
  9027  0032B4  EE2F F0FF          	lfsr	2,-1
  9028  0032B8  504D               	movf	SRAMfree@pSRAM,w,c
  9029  0032BA  26D9               	addwf	fsr2l,f,c
  9030  0032BC  504E               	movf	SRAMfree@pSRAM+1,w,c
  9031  0032BE  22DA               	addwfc	fsr2h,f,c
  9032  0032C0  9EDF               	bcf	indf2,7,c
  9033  0032C2  0012               	return		;funcret
  9034  0032C4                     __end_of_SRAMfree:
  9035                           	opt stack 0
  9036                           tosu	equ	0xFFF
  9037                           tosh	equ	0xFFE
  9038                           tosl	equ	0xFFD
  9039                           stkptr	equ	0xFFC
  9040                           tblptru	equ	0xFF8
  9041                           tblptrh	equ	0xFF7
  9042                           tblptrl	equ	0xFF6
  9043                           tablat	equ	0xFF5
  9044                           prodh	equ	0xFF4
  9045                           prodl	equ	0xFF3
  9046                           intcon	equ	0xFF2
  9047                           indf0	equ	0xFEF
  9048                           postinc0	equ	0xFEE
  9049                           plusw0	equ	0xFEB
  9050                           fsr0h	equ	0xFEA
  9051                           fsr0l	equ	0xFE9
  9052                           wreg	equ	0xFE8
  9053                           postinc1	equ	0xFE6
  9054                           postdec1	equ	0xFE5
  9055                           plusw1	equ	0xFE3
  9056                           fsr1h	equ	0xFE2
  9057                           fsr1l	equ	0xFE1
  9058                           bsr	equ	0xFE0
  9059                           indf2	equ	0xFDF
  9060                           postinc2	equ	0xFDE
  9061                           postdec2	equ	0xFDD
  9062                           plusw2	equ	0xFDB
  9063                           fsr2h	equ	0xFDA
  9064                           fsr2l	equ	0xFD9
  9065                           status	equ	0xFD8
  9066                           
  9067 ;; *************** function _limpeza *****************
  9068 ;; Defined at:
  9069 ;;		line 52 in file "tasks.c"
  9070 ;; Parameters:    Size  Location     Type
  9071 ;;		None
  9072 ;; Auto vars:     Size  Location     Type
  9073 ;;		None
  9074 ;; Return value:  Size  Location     Type
  9075 ;;                  2  117[None  ] PTR void 
  9076 ;; Registers used:
  9077 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9078 ;; Tracked objects:
  9079 ;;		On entry : 0/0
  9080 ;;		On exit  : 0/0
  9081 ;;		Unchanged: 0/0
  9082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9083 ;;      Params:         0       0       0       0       0       0       0
  9084 ;;      Locals:         0       0       0       0       0       0       0
  9085 ;;      Temps:          0       0       0       0       0       0       0
  9086 ;;      Totals:         0       0       0       0       0       0       0
  9087 ;;Total ram usage:        0 bytes
  9088 ;; Hardware stack levels used:    1
  9089 ;; Hardware stack levels required when called:    8
  9090 ;; This function calls:
  9091 ;;		_LCDGotoXY
  9092 ;;		_LCDWriteString
  9093 ;;		_nojoDelay
  9094 ;;		_pipe_create
  9095 ;;		_pipe_write
  9096 ;;		_sem_post
  9097 ;;		_sem_wait
  9098 ;; This function is called by:
  9099 ;;		_main
  9100 ;; This function uses a non-reentrant model
  9101 ;;
  9102                           
  9103                           	psect	text45
  9104  001AB0                     __ptext45:
  9105                           	opt stack 0
  9106  001AB0                     _limpeza:
  9107                           	opt stack 19
  9108                           
  9109                           ;tasks.c: 54: pipe_create(&mensagens, 1, 4);
  9110                           
  9111                           ;incstack = 0
  9112  001AB0  0E13               	movlw	low _mensagens
  9113  001AB2  0101               	movlb	1	; () banked
  9114  001AB4  6F07               	movwf	pipe_create@pipe_handler& (0+255),b
  9115  001AB6  0E00               	movlw	high _mensagens
  9116  001AB8  6F08               	movwf	(pipe_create@pipe_handler+1)& (0+255),b
  9117  001ABA  0E01               	movlw	1
  9118  001ABC  6F09               	movwf	pipe_create@id& (0+255),b
  9119  001ABE  0E00               	movlw	0
  9120  001AC0  6F0A               	movwf	(pipe_create@id+1)& (0+255),b
  9121  001AC2  0E00               	movlw	0
  9122  001AC4  6F0B               	movwf	(pipe_create@id+2)& (0+255),b
  9123  001AC6  0E00               	movlw	0
  9124  001AC8  6F0C               	movwf	(pipe_create@id+3)& (0+255),b
  9125  001ACA  0E04               	movlw	4
  9126  001ACC  6F0D               	movwf	pipe_create@size& (0+255),b
  9127  001ACE  0E00               	movlw	0
  9128  001AD0  6F0E               	movwf	(pipe_create@size+1)& (0+255),b
  9129  001AD2  0E00               	movlw	0
  9130  001AD4  6F0F               	movwf	(pipe_create@size+2)& (0+255),b
  9131  001AD6  0E00               	movlw	0
  9132  001AD8  6F10               	movwf	(pipe_create@size+3)& (0+255),b
  9133  001ADA  ECA6  F016         	call	_pipe_create	;wreg free
  9134  001ADE                     
  9135                           ;tasks.c: 57: sem_wait(&s_2);
  9136  001ADE  0EA4               	movlw	low _s_2
  9137  001AE0  6EE6               	movwf	postinc1,c
  9138  001AE2  0E00               	movlw	high _s_2
  9139  001AE4  6EE6               	movwf	postinc1,c
  9140  001AE6  ECC4  F015         	call	_sem_wait	;wreg free
  9141                           
  9142                           ;tasks.c: 58: switch(state){
  9143  001AEA  D05B               	goto	l384
  9144  001AEC                     l385:
  9145                           
  9146                           ;tasks.c: 60: if(PORTCbits.RC7 == 0)
  9147  001AEC  BE82               	btfsc	3970,7,c	;volatile
  9148  001AEE  D002               	goto	l386
  9149                           
  9150                           ;tasks.c: 61: PORTCbits.RC1 = 0;
  9151  001AF0  9282               	bcf	3970,1,c	;volatile
  9152  001AF2  D064               	goto	l388
  9153  001AF4                     l386:
  9154                           
  9155                           ;tasks.c: 62: else{
  9156                           ;tasks.c: 64: PORTCbits.RC1 = 1;
  9157  001AF4  8282               	bsf	3970,1,c	;volatile
  9158                           
  9159                           ;tasks.c: 65: state = '1';
  9160  001AF6  0E31               	movlw	49
  9161  001AF8  6E5B               	movwf	_state,c
  9162                           
  9163                           ;tasks.c: 66: }
  9164                           ;tasks.c: 67: break;
  9165  001AFA  D060               	goto	l388
  9166  001AFC                     
  9167                           ;tasks.c: 71: if(medcloro<10){
  9168  001AFC  500D               	movf	_medcloro+1,w,c
  9169  001AFE  E107               	bnz	l4043
  9170  001B00  0E0A               	movlw	10
  9171  001B02  5C0C               	subwf	_medcloro,w,c
  9172  001B04  B0D8               	btfsc	status,0,c
  9173  001B06  D003               	goto	l390
  9174                           
  9175                           ;tasks.c: 72: PORTCbits.RC2 = 1;
  9176  001B08  8482               	bsf	3970,2,c	;volatile
  9177                           
  9178                           ;tasks.c: 73: PORTCbits.RC3 = 0;
  9179  001B0A  9682               	bcf	3970,3,c	;volatile
  9180                           
  9181                           ;tasks.c: 74: }
  9182  001B0C  D002               	goto	l391
  9183  001B0E                     l390:
  9184  001B0E                     l4043:
  9185                           
  9186                           ;tasks.c: 75: else
  9187                           ;tasks.c: 77: state = '2';
  9188  001B0E  0E32               	movlw	50
  9189  001B10  6E5B               	movwf	_state,c
  9190  001B12                     l391:
  9191                           
  9192                           ;tasks.c: 78: pipe_write(&mensagens, state);
  9193  001B12  0E13               	movlw	low _mensagens
  9194  001B14  0100               	movlb	0	; () banked
  9195  001B16  6FE5               	movwf	pipe_write@pipe_handler& (0+255),b
  9196  001B18  0E00               	movlw	high _mensagens
  9197  001B1A  6FE6               	movwf	(pipe_write@pipe_handler+1)& (0+255),b
  9198  001B1C  C05B  F0E7         	movff	_state,pipe_write@msg
  9199  001B20  ECE5  F00D         	call	_pipe_write	;wreg free
  9200                           
  9201                           ;tasks.c: 81: break;
  9202  001B24  D04B               	goto	l388
  9203  001B26                     
  9204                           ;tasks.c: 84: if(medph<10 && medcloro>=10){
  9205  001B26  500B               	movf	_medph+1,w,c
  9206  001B28  E10C               	bnz	l4053
  9207  001B2A  0E0A               	movlw	10
  9208  001B2C  5C0A               	subwf	_medph,w,c
  9209  001B2E  B0D8               	btfsc	status,0,c
  9210  001B30  D008               	goto	l393
  9211  001B32  500D               	movf	_medcloro+1,w,c
  9212  001B34  E104               	bnz	u322_20
  9213  001B36  0E0A               	movlw	10
  9214  001B38  5C0C               	subwf	_medcloro,w,c
  9215  001B3A  A0D8               	btfss	status,0,c
  9216  001B3C  D002               	goto	l393
  9217  001B3E                     u322_20:
  9218                           
  9219                           ;tasks.c: 86: PORTCbits.RC3 = 1;
  9220  001B3E  8682               	bsf	3970,3,c	;volatile
  9221                           
  9222                           ;tasks.c: 87: }
  9223  001B40  D002               	goto	l394
  9224  001B42                     l393:
  9225  001B42                     l4053:
  9226                           
  9227                           ;tasks.c: 88: else
  9228                           ;tasks.c: 90: state = '3';
  9229  001B42  0E33               	movlw	51
  9230  001B44  6E5B               	movwf	_state,c
  9231  001B46                     l394:
  9232                           
  9233                           ;tasks.c: 91: pipe_write(&mensagens, state);
  9234  001B46  0E13               	movlw	low _mensagens
  9235  001B48  0100               	movlb	0	; () banked
  9236  001B4A  6FE5               	movwf	pipe_write@pipe_handler& (0+255),b
  9237  001B4C  0E00               	movlw	high _mensagens
  9238  001B4E  6FE6               	movwf	(pipe_write@pipe_handler+1)& (0+255),b
  9239  001B50  C05B  F0E7         	movff	_state,pipe_write@msg
  9240  001B54  ECE5  F00D         	call	_pipe_write	;wreg free
  9241                           
  9242                           ;tasks.c: 95: break;
  9243  001B58  D031               	goto	l388
  9244  001B5A                     
  9245                           ;tasks.c: 97: if(medcloro>=10 & medph>=10){
  9246  001B5A  500D               	movf	_medcloro+1,w,c
  9247  001B5C  E104               	bnz	u323_20
  9248  001B5E  0E0A               	movlw	10
  9249  001B60  5C0C               	subwf	_medcloro,w,c
  9250  001B62  A0D8               	btfss	status,0,c
  9251  001B64  D02B               	goto	l388
  9252  001B66                     u323_20:
  9253  001B66  500B               	movf	_medph+1,w,c
  9254  001B68  E104               	bnz	u324_20
  9255  001B6A  0E0A               	movlw	10
  9256  001B6C  5C0A               	subwf	_medph,w,c
  9257  001B6E  A0D8               	btfss	status,0,c
  9258  001B70  D025               	goto	l388
  9259  001B72                     u324_20:
  9260                           
  9261                           ;tasks.c: 98: { LCDGotoXY(0,1); LCDWriteString("===FIM===");};
  9262  001B72  0E01               	movlw	1
  9263  001B74  6EE6               	movwf	postinc1,c
  9264  001B76  0E00               	movlw	0
  9265  001B78  6EE6               	movwf	postinc1,c
  9266  001B7A  ECF7  F018         	call	_LCDGotoXY	;wreg free
  9267  001B7E  0E01               	movlw	low STR_4
  9268  001B80  6EE6               	movwf	postinc1,c
  9269  001B82  0E06               	movlw	high STR_4
  9270  001B84  6EE6               	movwf	postinc1,c
  9271  001B86  EC78  F017         	call	_LCDWriteString	;wreg free
  9272                           
  9273                           ;tasks.c: 99: nojoDelay(1000);
  9274  001B8A  0EE8               	movlw	232
  9275  001B8C  0101               	movlb	1	; () banked
  9276  001B8E  6F06               	movwf	nojoDelay@ms& (0+255),b
  9277  001B90  0E03               	movlw	3
  9278  001B92  6F07               	movwf	(nojoDelay@ms+1)& (0+255),b
  9279  001B94  0E00               	movlw	0
  9280  001B96  6F08               	movwf	(nojoDelay@ms+2)& (0+255),b
  9281  001B98  0E00               	movlw	0
  9282  001B9A  6F09               	movwf	(nojoDelay@ms+3)& (0+255),b
  9283  001B9C  ECBF  F018         	call	_nojoDelay	;wreg free
  9284                           
  9285                           ;tasks.c: 103: }
  9286                           
  9287                           ;tasks.c: 100: }
  9288                           ;tasks.c: 101: break;
  9289  001BA0  D00D               	goto	l388
  9290  001BA2                     l384:
  9291  001BA2  505B               	movf	_state,w,c
  9292                           
  9293                           ; Switch size 1, requested type "space"
  9294                           ; Number of cases is 4, Range of values is 48 to 51
  9295                           ; switch strategies available:
  9296                           ; Name         Instructions Cycles
  9297                           ; simple_byte           13     7 (average)
  9298                           ;	Chosen strategy is simple_byte
  9299  001BA4  0A30               	xorlw	48	; case 48
  9300  001BA6  B4D8               	btfsc	status,2,c
  9301  001BA8  D7A1               	goto	l385
  9302  001BAA  0A01               	xorlw	1	; case 49
  9303  001BAC  B4D8               	btfsc	status,2,c
  9304  001BAE  D7A6               	goto	l389
  9305  001BB0  0A03               	xorlw	3	; case 50
  9306  001BB2  B4D8               	btfsc	status,2,c
  9307  001BB4  D7B8               	goto	l392
  9308  001BB6  0A01               	xorlw	1	; case 51
  9309  001BB8  B4D8               	btfsc	status,2,c
  9310  001BBA  D7CF               	goto	l395
  9311  001BBC                     l388:
  9312                           
  9313                           ;tasks.c: 104: sem_post(&s_1);
  9314  001BBC  0EBE               	movlw	low _s_1
  9315  001BBE  6EE6               	movwf	postinc1,c
  9316  001BC0  0E00               	movlw	high _s_1
  9317  001BC2  6EE6               	movwf	postinc1,c
  9318  001BC4  ECF0  F016         	call	_sem_post	;wreg free
  9319  001BC8  D78A               	goto	l383
  9320  001BCA                     __end_of_limpeza:
  9321                           	opt stack 0
  9322                           tosu	equ	0xFFF
  9323                           tosh	equ	0xFFE
  9324                           tosl	equ	0xFFD
  9325                           stkptr	equ	0xFFC
  9326                           tblptru	equ	0xFF8
  9327                           tblptrh	equ	0xFF7
  9328                           tblptrl	equ	0xFF6
  9329                           tablat	equ	0xFF5
  9330                           prodh	equ	0xFF4
  9331                           prodl	equ	0xFF3
  9332                           intcon	equ	0xFF2
  9333                           indf0	equ	0xFEF
  9334                           postinc0	equ	0xFEE
  9335                           plusw0	equ	0xFEB
  9336                           fsr0h	equ	0xFEA
  9337                           fsr0l	equ	0xFE9
  9338                           wreg	equ	0xFE8
  9339                           postinc1	equ	0xFE6
  9340                           postdec1	equ	0xFE5
  9341                           plusw1	equ	0xFE3
  9342                           fsr1h	equ	0xFE2
  9343                           fsr1l	equ	0xFE1
  9344                           bsr	equ	0xFE0
  9345                           indf2	equ	0xFDF
  9346                           postinc2	equ	0xFDE
  9347                           postdec2	equ	0xFDD
  9348                           plusw2	equ	0xFDB
  9349                           fsr2h	equ	0xFDA
  9350                           fsr2l	equ	0xFD9
  9351                           status	equ	0xFD8
  9352                           
  9353 ;; *************** function _pipe_write *****************
  9354 ;; Defined at:
  9355 ;;		line 38 in file "pipe.c"
  9356 ;; Parameters:    Size  Location     Type
  9357 ;;  pipe_handler    2   13[BANK0 ] PTR struct pipe
  9358 ;;		 -> mensagens(22), 
  9359 ;;  msg             1   15[BANK0 ] unsigned char 
  9360 ;; Auto vars:     Size  Location     Type
  9361 ;;		None
  9362 ;; Return value:  Size  Location     Type
  9363 ;;                  1    wreg      void 
  9364 ;; Registers used:
  9365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  9366 ;; Tracked objects:
  9367 ;;		On entry : 0/0
  9368 ;;		On exit  : 0/0
  9369 ;;		Unchanged: 0/0
  9370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9371 ;;      Params:         0       3       0       0       0       0       0
  9372 ;;      Locals:         0       0       0       0       0       0       0
  9373 ;;      Temps:          0       8       0       0       0       0       0
  9374 ;;      Totals:         0      11       0       0       0       0       0
  9375 ;;Total ram usage:       11 bytes
  9376 ;; Hardware stack levels used:    1
  9377 ;; Hardware stack levels required when called:    7
  9378 ;; This function calls:
  9379 ;;		___llmod
  9380 ;;		_libera_processos
  9381 ;;		_nojoDispatcher
  9382 ;; This function is called by:
  9383 ;;		_limpeza
  9384 ;; This function uses a non-reentrant model
  9385 ;;
  9386                           
  9387                           	psect	text46
  9388  001BCA                     __ptext46:
  9389                           	opt stack 0
  9390  001BCA                     _pipe_write:
  9391                           	opt stack 19
  9392                           
  9393                           ;pipe.c: 40: INTCONbits.GIE = 0;
  9394                           
  9395                           ;incstack = 0
  9396  001BCA  9EF2               	bcf	intcon,7,c	;volatile
  9397                           
  9398                           ;pipe.c: 42: if (pipe_handler->p_count == pipe_handler->p_size) {
  9399  001BCC  0100               	movlb	0	; () banked
  9400  001BCE  EE20 F00E          	lfsr	2,14
  9401  001BD2  51E5               	movf	pipe_write@pipe_handler& (0+255),w,b
  9402  001BD4  26D9               	addwf	fsr2l,f,c
  9403  001BD6  51E6               	movf	(pipe_write@pipe_handler+1)& (0+255),w,b
  9404  001BD8  22DA               	addwfc	fsr2h,f,c
  9405  001BDA  EE00 F012          	lfsr	0,18
  9406  001BDE  51E5               	movf	pipe_write@pipe_handler& (0+255),w,b
  9407  001BE0  26E9               	addwf	fsr0l,f,c
  9408  001BE2  51E6               	movf	(pipe_write@pipe_handler+1)& (0+255),w,b
  9409  001BE4  22EA               	addwfc	fsr0h,f,c
  9410  001BE6  50DE               	movf	postinc2,w,c
  9411  001BE8  18EE               	xorwf	postinc0,w,c
  9412  001BEA  E10F               	bnz	i1l3851
  9413  001BEC  50DE               	movf	postinc2,w,c
  9414  001BEE  18EE               	xorwf	postinc0,w,c
  9415  001BF0  E10C               	bnz	i1l3851
  9416  001BF2  50DE               	movf	postinc2,w,c
  9417  001BF4  18EE               	xorwf	postinc0,w,c
  9418  001BF6  E109               	bnz	i1l3851
  9419  001BF8  50DE               	movf	postinc2,w,c
  9420  001BFA  18EE               	xorwf	postinc0,w,c
  9421  001BFC  A4D8               	btfss	status,2,c
  9422  001BFE  D005               	goto	i1l200
  9423                           
  9424                           ; BSR set to: 0
  9425                           ;pipe.c: 45: nojoDispatcher(WAITING_PIPE);
  9426  001C00  0E03               	movlw	3
  9427  001C02  6EE6               	movwf	postinc1,c
  9428  001C04  EC0E  F003         	call	_nojoDispatcher	;wreg free
  9429                           
  9430                           ;pipe.c: 46: }
  9431  001C08  D06B               	goto	i1l201
  9432  001C0A                     i1l200:
  9433  001C0A                     i1l3851:
  9434                           
  9435                           ;pipe.c: 47: else {
  9436                           ;pipe.c: 48: pipe_handler->p_msg_queue[pipe_handler->p_pos_write] = msg;
  9437  001C0A  0100               	movlb	0	; () banked
  9438  001C0C  EE20 F006          	lfsr	2,6
  9439  001C10  51E5               	movf	pipe_write@pipe_handler& (0+255),w,b
  9440  001C12  26D9               	addwf	fsr2l,f,c
  9441  001C14  51E6               	movf	(pipe_write@pipe_handler+1)& (0+255),w,b
  9442  001C16  22DA               	addwfc	fsr2h,f,c
  9443  001C18  CFDE F0E8          	movff	postinc2,??_pipe_write
  9444  001C1C  CFDD F0E9          	movff	postdec2,??_pipe_write+1
  9445  001C20  EE20 F004          	lfsr	2,4
  9446  001C24  51E5               	movf	pipe_write@pipe_handler& (0+255),w,b
  9447  001C26  26D9               	addwf	fsr2l,f,c
  9448  001C28  51E6               	movf	(pipe_write@pipe_handler+1)& (0+255),w,b
  9449  001C2A  22DA               	addwfc	fsr2h,f,c
  9450  001C2C  CFDE F0EA          	movff	postinc2,??_pipe_write+2
  9451  001C30  CFDD F0EB          	movff	postdec2,??_pipe_write+3
  9452  001C34  51E8               	movf	??_pipe_write& (0+255),w,b
  9453  001C36  25EA               	addwf	(??_pipe_write+2)& (0+255),w,b
  9454  001C38  6ED9               	movwf	fsr2l,c
  9455  001C3A  51E9               	movf	(??_pipe_write+1)& (0+255),w,b
  9456  001C3C  21EB               	addwfc	(??_pipe_write+3)& (0+255),w,b
  9457  001C3E  6EDA               	movwf	fsr2h,c
  9458  001C40  C0E7  FFDF         	movff	pipe_write@msg,indf2
  9459                           
  9460                           ; BSR set to: 0
  9461                           ;pipe.c: 49: pipe_handler->p_pos_write = (pipe_handler->p_pos_write + 1) % pipe_handler-
      +                          >p_size;
  9462  001C44  EE20 F00E          	lfsr	2,14
  9463  001C48  51E5               	movf	pipe_write@pipe_handler& (0+255),w,b
  9464  001C4A  26D9               	addwf	fsr2l,f,c
  9465  001C4C  51E6               	movf	(pipe_write@pipe_handler+1)& (0+255),w,b
  9466  001C4E  22DA               	addwfc	fsr2h,f,c
  9467  001C50  CFDE FFE6          	movff	postinc2,postinc1
  9468  001C54  CFDE FFE6          	movff	postinc2,postinc1
  9469  001C58  CFDE FFE6          	movff	postinc2,postinc1
  9470  001C5C  CFDE FFE6          	movff	postinc2,postinc1
  9471  001C60  EE20 F006          	lfsr	2,6
  9472  001C64  51E5               	movf	pipe_write@pipe_handler& (0+255),w,b
  9473  001C66  26D9               	addwf	fsr2l,f,c
  9474  001C68  51E6               	movf	(pipe_write@pipe_handler+1)& (0+255),w,b
  9475  001C6A  22DA               	addwfc	fsr2h,f,c
  9476  001C6C  CFDE F0E8          	movff	postinc2,??_pipe_write
  9477  001C70  CFDE F0E9          	movff	postinc2,??_pipe_write+1
  9478  001C74  CFDE F0EA          	movff	postinc2,??_pipe_write+2
  9479  001C78  CFDE F0EB          	movff	postinc2,??_pipe_write+3
  9480  001C7C  0E01               	movlw	1
  9481  001C7E  25E8               	addwf	??_pipe_write& (0+255),w,b
  9482  001C80  6FEC               	movwf	(??_pipe_write+4)& (0+255),b
  9483  001C82  0E00               	movlw	0
  9484  001C84  21E9               	addwfc	(??_pipe_write+1)& (0+255),w,b
  9485  001C86  6FED               	movwf	(??_pipe_write+5)& (0+255),b
  9486  001C88  0E00               	movlw	0
  9487  001C8A  21EA               	addwfc	(??_pipe_write+2)& (0+255),w,b
  9488  001C8C  6FEE               	movwf	(??_pipe_write+6)& (0+255),b
  9489  001C8E  0E00               	movlw	0
  9490  001C90  21EB               	addwfc	(??_pipe_write+3)& (0+255),w,b
  9491  001C92  6FEF               	movwf	(??_pipe_write+7)& (0+255),b
  9492  001C94  C0EC  FFE6         	movff	??_pipe_write+4,postinc1
  9493  001C98  C0ED  FFE6         	movff	??_pipe_write+5,postinc1
  9494  001C9C  C0EE  FFE6         	movff	??_pipe_write+6,postinc1
  9495  001CA0  C0EF  FFE6         	movff	??_pipe_write+7,postinc1
  9496  001CA4  EC05  F012         	call	___llmod	;wreg free
  9497  001CA8  0100               	movlb	0	; () banked
  9498  001CAA  EE20 F006          	lfsr	2,6
  9499  001CAE  51E5               	movf	pipe_write@pipe_handler& (0+255),w,b
  9500  001CB0  26D9               	addwf	fsr2l,f,c
  9501  001CB2  51E6               	movf	(pipe_write@pipe_handler+1)& (0+255),w,b
  9502  001CB4  22DA               	addwfc	fsr2h,f,c
  9503  001CB6  C04F  FFDE         	movff	btemp,postinc2
  9504  001CBA  C050  FFDE         	movff	btemp+1,postinc2
  9505  001CBE  C051  FFDE         	movff	btemp+2,postinc2
  9506  001CC2  C052  FFDE         	movff	btemp+3,postinc2
  9507                           
  9508                           ; BSR set to: 0
  9509                           ;pipe.c: 50: pipe_handler->p_count++;
  9510  001CC6  EE20 F012          	lfsr	2,18
  9511  001CCA  51E5               	movf	pipe_write@pipe_handler& (0+255),w,b
  9512  001CCC  26D9               	addwf	fsr2l,f,c
  9513  001CCE  51E6               	movf	(pipe_write@pipe_handler+1)& (0+255),w,b
  9514  001CD0  22DA               	addwfc	fsr2h,f,c
  9515  001CD2  2ADE               	incf	postinc2,f,c
  9516  001CD4  0E00               	movlw	0
  9517  001CD6  22DE               	addwfc	postinc2,f,c
  9518  001CD8  22DE               	addwfc	postinc2,f,c
  9519  001CDA  22DE               	addwfc	postinc2,f,c
  9520                           
  9521                           ; BSR set to: 0
  9522                           ;pipe.c: 52: libera_processos();
  9523  001CDC  ECD1  F012         	call	_libera_processos	;wreg free
  9524  001CE0                     i1l201:
  9525                           
  9526                           ;pipe.c: 53: }
  9527                           ;pipe.c: 55: INTCONbits.GIE = 1;
  9528  001CE0  8EF2               	bsf	intcon,7,c	;volatile
  9529  001CE2  0012               	return		;funcret
  9530  001CE4                     __end_of_pipe_write:
  9531                           	opt stack 0
  9532                           tosu	equ	0xFFF
  9533                           tosh	equ	0xFFE
  9534                           tosl	equ	0xFFD
  9535                           stkptr	equ	0xFFC
  9536                           tblptru	equ	0xFF8
  9537                           tblptrh	equ	0xFF7
  9538                           tblptrl	equ	0xFF6
  9539                           tablat	equ	0xFF5
  9540                           prodh	equ	0xFF4
  9541                           prodl	equ	0xFF3
  9542                           intcon	equ	0xFF2
  9543                           indf0	equ	0xFEF
  9544                           postinc0	equ	0xFEE
  9545                           plusw0	equ	0xFEB
  9546                           fsr0h	equ	0xFEA
  9547                           fsr0l	equ	0xFE9
  9548                           wreg	equ	0xFE8
  9549                           postinc1	equ	0xFE6
  9550                           postdec1	equ	0xFE5
  9551                           plusw1	equ	0xFE3
  9552                           fsr1h	equ	0xFE2
  9553                           fsr1l	equ	0xFE1
  9554                           bsr	equ	0xFE0
  9555                           indf2	equ	0xFDF
  9556                           postinc2	equ	0xFDE
  9557                           postdec2	equ	0xFDD
  9558                           plusw2	equ	0xFDB
  9559                           fsr2h	equ	0xFDA
  9560                           fsr2l	equ	0xFD9
  9561                           status	equ	0xFD8
  9562                           
  9563 ;; *************** function _pipe_create *****************
  9564 ;; Defined at:
  9565 ;;		line 8 in file "pipe.c"
  9566 ;; Parameters:    Size  Location     Type
  9567 ;;  pipe_handler    2    7[BANK1 ] PTR struct pipe
  9568 ;;		 -> mensagens(22), 
  9569 ;;  id              4    9[BANK1 ] unsigned long 
  9570 ;;  size            4   13[BANK1 ] unsigned long 
  9571 ;; Auto vars:     Size  Location     Type
  9572 ;;		None
  9573 ;; Return value:  Size  Location     Type
  9574 ;;                  1    wreg      void 
  9575 ;; Registers used:
  9576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9577 ;; Tracked objects:
  9578 ;;		On entry : 0/0
  9579 ;;		On exit  : 0/0
  9580 ;;		Unchanged: 0/0
  9581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9582 ;;      Params:         0       0      10       0       0       0       0
  9583 ;;      Locals:         0       0       0       0       0       0       0
  9584 ;;      Temps:          0       0       0       0       0       0       0
  9585 ;;      Totals:         0       0      10       0       0       0       0
  9586 ;;Total ram usage:       10 bytes
  9587 ;; Hardware stack levels used:    1
  9588 ;; Hardware stack levels required when called:    6
  9589 ;; This function calls:
  9590 ;;		_SRAMalloc
  9591 ;; This function is called by:
  9592 ;;		_limpeza
  9593 ;; This function uses a non-reentrant model
  9594 ;;
  9595                           
  9596                           	psect	text47
  9597  002D4C                     __ptext47:
  9598                           	opt stack 0
  9599  002D4C                     _pipe_create:
  9600                           	opt stack 20
  9601                           
  9602                           ;pipe.c: 10: pipe_handler->p_id = id;
  9603                           
  9604                           ;incstack = 0
  9605  002D4C  C107  FFD9         	movff	pipe_create@pipe_handler,fsr2l
  9606  002D50  C108  FFDA         	movff	pipe_create@pipe_handler+1,fsr2h
  9607  002D54  C109  FFDE         	movff	pipe_create@id,postinc2
  9608  002D58  C10A  FFDE         	movff	pipe_create@id+1,postinc2
  9609  002D5C  C10B  FFDE         	movff	pipe_create@id+2,postinc2
  9610  002D60  C10C  FFDE         	movff	pipe_create@id+3,postinc2
  9611                           
  9612                           ;pipe.c: 11: pipe_handler->p_pos_read = 0;
  9613  002D64  0101               	movlb	1	; () banked
  9614  002D66  EE20 F00A          	lfsr	2,10
  9615  002D6A  5107               	movf	pipe_create@pipe_handler& (0+255),w,b
  9616  002D6C  26D9               	addwf	fsr2l,f,c
  9617  002D6E  5108               	movf	(pipe_create@pipe_handler+1)& (0+255),w,b
  9618  002D70  22DA               	addwfc	fsr2h,f,c
  9619  002D72  6ADE               	clrf	postinc2,c
  9620  002D74  6ADE               	clrf	postinc2,c
  9621  002D76  6ADE               	clrf	postinc2,c
  9622  002D78  6ADD               	clrf	postdec2,c
  9623                           
  9624                           ; BSR set to: 1
  9625                           ;pipe.c: 12: pipe_handler->p_pos_write = 0;
  9626  002D7A  EE20 F006          	lfsr	2,6
  9627  002D7E  5107               	movf	pipe_create@pipe_handler& (0+255),w,b
  9628  002D80  26D9               	addwf	fsr2l,f,c
  9629  002D82  5108               	movf	(pipe_create@pipe_handler+1)& (0+255),w,b
  9630  002D84  22DA               	addwfc	fsr2h,f,c
  9631  002D86  6ADE               	clrf	postinc2,c
  9632  002D88  6ADE               	clrf	postinc2,c
  9633  002D8A  6ADE               	clrf	postinc2,c
  9634  002D8C  6ADD               	clrf	postdec2,c
  9635                           
  9636                           ; BSR set to: 1
  9637                           ;pipe.c: 13: pipe_handler->p_size = size;
  9638  002D8E  EE20 F00E          	lfsr	2,14
  9639  002D92  5107               	movf	pipe_create@pipe_handler& (0+255),w,b
  9640  002D94  26D9               	addwf	fsr2l,f,c
  9641  002D96  5108               	movf	(pipe_create@pipe_handler+1)& (0+255),w,b
  9642  002D98  22DA               	addwfc	fsr2h,f,c
  9643  002D9A  C10D  FFDE         	movff	pipe_create@size,postinc2
  9644  002D9E  C10E  FFDE         	movff	pipe_create@size+1,postinc2
  9645  002DA2  C10F  FFDE         	movff	pipe_create@size+2,postinc2
  9646  002DA6  C110  FFDE         	movff	pipe_create@size+3,postinc2
  9647                           
  9648                           ; BSR set to: 1
  9649                           ;pipe.c: 14: pipe_handler->p_msg_queue = SRAMalloc(size);
  9650  002DAA  510D               	movf	pipe_create@size& (0+255),w,b
  9651  002DAC  EC09  F010         	call	_SRAMalloc
  9652  002DB0  0101               	movlb	1	; () banked
  9653  002DB2  EE20 F004          	lfsr	2,4
  9654  002DB6  5107               	movf	pipe_create@pipe_handler& (0+255),w,b
  9655  002DB8  26D9               	addwf	fsr2l,f,c
  9656  002DBA  5108               	movf	(pipe_create@pipe_handler+1)& (0+255),w,b
  9657  002DBC  22DA               	addwfc	fsr2h,f,c
  9658  002DBE  0100               	movlb	0	; () banked
  9659  002DC0  C0ED  FFDE         	movff	?_SRAMalloc,postinc2
  9660  002DC4  C0EE  FFDD         	movff	?_SRAMalloc+1,postdec2
  9661                           
  9662                           ; BSR set to: 0
  9663                           ;pipe.c: 15: pipe_handler->p_count = 0;
  9664  002DC8  0101               	movlb	1	; () banked
  9665  002DCA  EE20 F012          	lfsr	2,18
  9666  002DCE  5107               	movf	pipe_create@pipe_handler& (0+255),w,b
  9667  002DD0  26D9               	addwf	fsr2l,f,c
  9668  002DD2  5108               	movf	(pipe_create@pipe_handler+1)& (0+255),w,b
  9669  002DD4  22DA               	addwfc	fsr2h,f,c
  9670  002DD6  6ADE               	clrf	postinc2,c
  9671  002DD8  6ADE               	clrf	postinc2,c
  9672  002DDA  6ADE               	clrf	postinc2,c
  9673  002DDC  6ADD               	clrf	postdec2,c
  9674                           
  9675                           ; BSR set to: 1
  9676  002DDE  0012               	return		;funcret
  9677  002DE0                     __end_of_pipe_create:
  9678                           	opt stack 0
  9679                           tosu	equ	0xFFF
  9680                           tosh	equ	0xFFE
  9681                           tosl	equ	0xFFD
  9682                           stkptr	equ	0xFFC
  9683                           tblptru	equ	0xFF8
  9684                           tblptrh	equ	0xFF7
  9685                           tblptrl	equ	0xFF6
  9686                           tablat	equ	0xFF5
  9687                           prodh	equ	0xFF4
  9688                           prodl	equ	0xFF3
  9689                           intcon	equ	0xFF2
  9690                           indf0	equ	0xFEF
  9691                           postinc0	equ	0xFEE
  9692                           plusw0	equ	0xFEB
  9693                           fsr0h	equ	0xFEA
  9694                           fsr0l	equ	0xFE9
  9695                           wreg	equ	0xFE8
  9696                           postinc1	equ	0xFE6
  9697                           postdec1	equ	0xFE5
  9698                           plusw1	equ	0xFE3
  9699                           fsr1h	equ	0xFE2
  9700                           fsr1l	equ	0xFE1
  9701                           bsr	equ	0xFE0
  9702                           indf2	equ	0xFDF
  9703                           postinc2	equ	0xFDE
  9704                           postdec2	equ	0xFDD
  9705                           plusw2	equ	0xFDB
  9706                           fsr2h	equ	0xFDA
  9707                           fsr2l	equ	0xFD9
  9708                           status	equ	0xFD8
  9709                           
  9710 ;; *************** function _SRAMalloc *****************
  9711 ;; Defined at:
  9712 ;;		line 192 in file "sralloc.c"
  9713 ;; Parameters:    Size  Location     Type
  9714 ;;  nBytes          1    wreg     unsigned char 
  9715 ;; Auto vars:     Size  Location     Type
  9716 ;;  nBytes          1    4[BANK1 ] unsigned char 
  9717 ;;  pHeap           2    5[BANK1 ] PTR struct _SALLOC
  9718 ;;		 -> _uDynamicHeap(512), 
  9719 ;;  temp            2    0[BANK1 ] PTR struct _SALLOC
  9720 ;;		 -> _uDynamicHeap(512), 
  9721 ;;  segHeader       1    3[BANK1 ] struct _SALLOC
  9722 ;;  segLen          1    2[BANK1 ] unsigned char 
  9723 ;; Return value:  Size  Location     Type
  9724 ;;                  2   21[BANK0 ] PTR unsigned char 
  9725 ;; Registers used:
  9726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9727 ;; Tracked objects:
  9728 ;;		On entry : 0/0
  9729 ;;		On exit  : 0/0
  9730 ;;		Unchanged: 0/0
  9731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9732 ;;      Params:         0       2       0       0       0       0       0
  9733 ;;      Locals:         0       0       7       0       0       0       0
  9734 ;;      Temps:          0       2       0       0       0       0       0
  9735 ;;      Totals:         0       4       7       0       0       0       0
  9736 ;;Total ram usage:       11 bytes
  9737 ;; Hardware stack levels used:    1
  9738 ;; Hardware stack levels required when called:    5
  9739 ;; This function calls:
  9740 ;;		__SRAMmerge
  9741 ;; This function is called by:
  9742 ;;		_pipe_create
  9743 ;; This function uses a non-reentrant model
  9744 ;;
  9745                           
  9746                           	psect	text48
  9747  002012                     __ptext48:
  9748                           	opt stack 0
  9749  002012                     _SRAMalloc:
  9750                           	opt stack 20
  9751                           
  9752                           ; BSR set to: 1
  9753                           ;incstack = 0
  9754                           ;SRAMalloc@nBytes stored from wreg
  9755  002012  0101               	movlb	1	; () banked
  9756  002014  6F04               	movwf	SRAMalloc@nBytes& (0+255),b
  9757                           
  9758                           ;sralloc.c: 194: SALLOC *  pHeap;
  9759                           ;sralloc.c: 195: SALLOC *  temp;
  9760                           ;sralloc.c: 196: SALLOC segHeader;
  9761                           ;sralloc.c: 197: unsigned char segLen;
  9762                           ;sralloc.c: 200: if (nBytes > (0x7F - 1)) return (0);
  9763  002016  0E7E               	movlw	126
  9764  002018  0101               	movlb	1	; () banked
  9765  00201A  6504               	cpfsgt	SRAMalloc@nBytes& (0+255),b
  9766  00201C  D006               	goto	i1l272
  9767                           
  9768                           ; BSR set to: 1
  9769  00201E  0E00               	movlw	0
  9770  002020  0100               	movlb	0	; () banked
  9771  002022  6FED               	movwf	?_SRAMalloc& (0+255),b
  9772  002024  0E00               	movlw	0
  9773  002026  6FEE               	movwf	(?_SRAMalloc+1)& (0+255),b
  9774                           
  9775                           ; BSR set to: 0
  9776  002028  0012               	return	
  9777  00202A                     i1l272:
  9778                           
  9779                           ;sralloc.c: 203: pHeap = (SALLOC *)_uDynamicHeap;
  9780                           
  9781                           ; BSR set to: 0
  9782  00202A  0E59               	movlw	low __uDynamicHeap
  9783  00202C  0101               	movlb	1	; () banked
  9784  00202E  6F05               	movwf	SRAMalloc@pHeap& (0+255),b
  9785  002030  0E03               	movlw	high __uDynamicHeap
  9786  002032  6F06               	movwf	(SRAMalloc@pHeap+1)& (0+255),b
  9787  002034                     
  9788                           ;sralloc.c: 206: {
  9789                           ;sralloc.c: 208: segHeader = *pHeap;
  9790                           
  9791                           ; BSR set to: 1
  9792  002034  C105  FFD9         	movff	SRAMalloc@pHeap,fsr2l
  9793  002038  C106  FFDA         	movff	SRAMalloc@pHeap+1,fsr2h
  9794  00203C  50DF               	movf	indf2,w,c
  9795  00203E  0101               	movlb	1	; () banked
  9796  002040  6F03               	movwf	SRAMalloc@segHeader& (0+255),b
  9797                           
  9798                           ; BSR set to: 1
  9799                           ;sralloc.c: 211: segLen = segHeader.bits.count - 1;
  9800  002042  5103               	movf	SRAMalloc@segHeader& (0+255),w,b
  9801  002044  0B7F               	andlw	127
  9802  002046  0100               	movlb	0	; () banked
  9803  002048  6FEF               	movwf	??_SRAMalloc& (0+255),b
  9804  00204A  05EF               	decf	??_SRAMalloc& (0+255),w,b
  9805  00204C  0101               	movlb	1	; () banked
  9806  00204E  6F02               	movwf	SRAMalloc@segLen& (0+255),b
  9807                           
  9808                           ; BSR set to: 1
  9809                           ;sralloc.c: 214: if (segHeader.byte == 0) return (0);
  9810  002050  5103               	movf	SRAMalloc@segHeader& (0+255),w,b
  9811  002052  A4D8               	btfss	status,2,c
  9812  002054  D006               	goto	i1l275
  9813                           
  9814                           ; BSR set to: 1
  9815  002056  0E00               	movlw	0
  9816  002058  0100               	movlb	0	; () banked
  9817  00205A  6FED               	movwf	?_SRAMalloc& (0+255),b
  9818  00205C  0E00               	movlw	0
  9819  00205E  6FEE               	movwf	(?_SRAMalloc+1)& (0+255),b
  9820                           
  9821                           ; BSR set to: 0
  9822  002060  0012               	return	
  9823  002062                     i1l275:
  9824                           
  9825                           ; BSR set to: 1
  9826                           ;sralloc.c: 217: if (!(segHeader.bits.alloc))
  9827  002062  BF03               	btfsc	SRAMalloc@segHeader& (0+255),7,b
  9828  002064  D04C               	goto	i1l276
  9829                           
  9830                           ; BSR set to: 1
  9831                           ;sralloc.c: 218: {
  9832                           ;sralloc.c: 220: if (nBytes > segLen)
  9833  002066  5104               	movf	SRAMalloc@nBytes& (0+255),w,b
  9834  002068  5D02               	subwf	SRAMalloc@segLen& (0+255),w,b
  9835  00206A  B0D8               	btfsc	status,0,c
  9836  00206C  D00B               	goto	i1l277
  9837                           
  9838                           ; BSR set to: 1
  9839                           ;sralloc.c: 221: {
  9840                           ;sralloc.c: 223: if (!(_SRAMmerge(pHeap))) pHeap += segHeader.bits.count;
  9841  00206E  C105  F0E5         	movff	SRAMalloc@pHeap,__SRAMmerge@pSegA
  9842  002072  C106  F0E6         	movff	SRAMalloc@pHeap+1,__SRAMmerge@pSegA+1
  9843  002076  EC38  F014         	call	__SRAMmerge	;wreg free
  9844  00207A  0900               	iorlw	0
  9845  00207C  A4D8               	btfss	status,2,c
  9846  00207E  D7DA               	goto	i1l274
  9847  002080  0101               	movlb	1	; () banked
  9848  002082  D03D               	goto	i1l276
  9849  002084                     i1l277:
  9850                           
  9851                           ; BSR set to: 1
  9852                           ;sralloc.c: 225: else
  9853                           ;sralloc.c: 229: if (nBytes == segLen)
  9854                           
  9855                           ; BSR set to: 1
  9856  002084  5102               	movf	SRAMalloc@segLen& (0+255),w,b
  9857  002086  1904               	xorwf	SRAMalloc@nBytes& (0+255),w,b
  9858  002088  A4D8               	btfss	status,2,c
  9859  00208A  D00F               	goto	i1l280
  9860                           
  9861                           ; BSR set to: 1
  9862                           ;sralloc.c: 230: {
  9863                           ;sralloc.c: 232: (*pHeap).bits.alloc = 1;
  9864  00208C  C105  FFD9         	movff	SRAMalloc@pHeap,fsr2l
  9865  002090  C106  FFDA         	movff	SRAMalloc@pHeap+1,fsr2h
  9866  002094  8EDF               	bsf	indf2,7,c
  9867                           
  9868                           ; BSR set to: 1
  9869                           ;sralloc.c: 235: return ((unsigned char *)(pHeap + 1));
  9870  002096  0E01               	movlw	1
  9871  002098  2505               	addwf	SRAMalloc@pHeap& (0+255),w,b
  9872  00209A  0100               	movlb	0	; () banked
  9873  00209C  6FED               	movwf	?_SRAMalloc& (0+255),b
  9874  00209E  0E00               	movlw	0
  9875  0020A0  0101               	movlb	1	; () banked
  9876  0020A2  2106               	addwfc	(SRAMalloc@pHeap+1)& (0+255),w,b
  9877  0020A4  0100               	movlb	0	; () banked
  9878  0020A6  6FEE               	movwf	(?_SRAMalloc+1)& (0+255),b
  9879                           
  9880                           ; BSR set to: 0
  9881  0020A8  0012               	return	
  9882  0020AA                     i1l280:
  9883                           
  9884                           ;sralloc.c: 239: else
  9885                           ;sralloc.c: 240: {
  9886                           ;sralloc.c: 242: (*pHeap).byte = nBytes + 0x81;
  9887                           
  9888                           ; BSR set to: 0
  9889  0020AA  0101               	movlb	1	; () banked
  9890  0020AC  5104               	movf	SRAMalloc@nBytes& (0+255),w,b
  9891  0020AE  0F81               	addlw	129
  9892  0020B0  C105  FFD9         	movff	SRAMalloc@pHeap,fsr2l
  9893  0020B4  C106  FFDA         	movff	SRAMalloc@pHeap+1,fsr2h
  9894  0020B8  6EDF               	movwf	indf2,c
  9895                           
  9896                           ; BSR set to: 1
  9897                           ;sralloc.c: 245: temp = pHeap + 1;
  9898  0020BA  0E01               	movlw	1
  9899  0020BC  2505               	addwf	SRAMalloc@pHeap& (0+255),w,b
  9900  0020BE  6F00               	movwf	SRAMalloc@temp& (0+255),b
  9901  0020C0  0E00               	movlw	0
  9902  0020C2  2106               	addwfc	(SRAMalloc@pHeap+1)& (0+255),w,b
  9903  0020C4  6F01               	movwf	(SRAMalloc@temp+1)& (0+255),b
  9904                           
  9905                           ; BSR set to: 1
  9906                           ;sralloc.c: 248: pHeap += (nBytes + 1);
  9907  0020C6  5104               	movf	SRAMalloc@nBytes& (0+255),w,b
  9908  0020C8  0100               	movlb	0	; () banked
  9909  0020CA  6FEF               	movwf	??_SRAMalloc& (0+255),b
  9910  0020CC  6BF0               	clrf	(??_SRAMalloc+1)& (0+255),b
  9911  0020CE  0E01               	movlw	1
  9912  0020D0  27EF               	addwf	??_SRAMalloc& (0+255),f,b
  9913  0020D2  0E00               	movlw	0
  9914  0020D4  23F0               	addwfc	(??_SRAMalloc+1)& (0+255),f,b
  9915  0020D6  51EF               	movf	??_SRAMalloc& (0+255),w,b
  9916  0020D8  0101               	movlb	1	; () banked
  9917  0020DA  2705               	addwf	SRAMalloc@pHeap& (0+255),f,b
  9918  0020DC  0100               	movlb	0	; () banked
  9919  0020DE  51F0               	movf	(??_SRAMalloc+1)& (0+255),w,b
  9920  0020E0  0101               	movlb	1	; () banked
  9921  0020E2  2306               	addwfc	(SRAMalloc@pHeap+1)& (0+255),f,b
  9922                           
  9923                           ;sralloc.c: 251: (*pHeap).byte = segLen - nBytes;
  9924  0020E4  5104               	movf	SRAMalloc@nBytes& (0+255),w,b
  9925  0020E6  0800               	sublw	0
  9926  0020E8  2502               	addwf	SRAMalloc@segLen& (0+255),w,b
  9927  0020EA  C105  FFD9         	movff	SRAMalloc@pHeap,fsr2l
  9928  0020EE  C106  FFDA         	movff	SRAMalloc@pHeap+1,fsr2h
  9929  0020F2  6EDF               	movwf	indf2,c
  9930                           
  9931                           ; BSR set to: 1
  9932                           ;sralloc.c: 254: return ((unsigned char *) temp);
  9933  0020F4  C100  F0ED         	movff	SRAMalloc@temp,?_SRAMalloc
  9934  0020F8  C101  F0EE         	movff	SRAMalloc@temp+1,?_SRAMalloc+1
  9935                           
  9936                           ; BSR set to: 1
  9937  0020FC  0012               	return	
  9938  0020FE                     i1l276:
  9939                           
  9940                           ; BSR set to: 1
  9941                           ;sralloc.c: 259: else
  9942                           ;sralloc.c: 260: {
  9943                           ;sralloc.c: 261: pHeap += segHeader.bits.count;
  9944                           
  9945                           ; BSR set to: 1
  9946  0020FE  5103               	movf	SRAMalloc@segHeader& (0+255),w,b
  9947  002100  0B7F               	andlw	127
  9948  002102  0100               	movlb	0	; () banked
  9949  002104  6FEF               	movwf	??_SRAMalloc& (0+255),b
  9950  002106  51EF               	movf	??_SRAMalloc& (0+255),w,b
  9951  002108  0D01               	mullw	1
  9952  00210A  50F3               	movf	prodl,w,c
  9953  00210C  0101               	movlb	1	; () banked
  9954  00210E  2705               	addwf	SRAMalloc@pHeap& (0+255),f,b
  9955  002110  50F4               	movf	prodh,w,c
  9956  002112  2306               	addwfc	(SRAMalloc@pHeap+1)& (0+255),f,b
  9957                           
  9958                           ; BSR set to: 1
  9959                           
  9960                           ; BSR set to: 1
  9961  002114  D78F               	goto	i1l274
  9962  002116                     __end_of_SRAMalloc:
  9963                           	opt stack 0
  9964                           tosu	equ	0xFFF
  9965                           tosh	equ	0xFFE
  9966                           tosl	equ	0xFFD
  9967                           stkptr	equ	0xFFC
  9968                           tblptru	equ	0xFF8
  9969                           tblptrh	equ	0xFF7
  9970                           tblptrl	equ	0xFF6
  9971                           tablat	equ	0xFF5
  9972                           prodh	equ	0xFF4
  9973                           prodl	equ	0xFF3
  9974                           intcon	equ	0xFF2
  9975                           indf0	equ	0xFEF
  9976                           postinc0	equ	0xFEE
  9977                           plusw0	equ	0xFEB
  9978                           fsr0h	equ	0xFEA
  9979                           fsr0l	equ	0xFE9
  9980                           wreg	equ	0xFE8
  9981                           postinc1	equ	0xFE6
  9982                           postdec1	equ	0xFE5
  9983                           plusw1	equ	0xFE3
  9984                           fsr1h	equ	0xFE2
  9985                           fsr1l	equ	0xFE1
  9986                           bsr	equ	0xFE0
  9987                           indf2	equ	0xFDF
  9988                           postinc2	equ	0xFDE
  9989                           postdec2	equ	0xFDD
  9990                           plusw2	equ	0xFDB
  9991                           fsr2h	equ	0xFDA
  9992                           fsr2l	equ	0xFD9
  9993                           status	equ	0xFD8
  9994                           
  9995 ;; *************** function __SRAMmerge *****************
  9996 ;; Defined at:
  9997 ;;		line 360 in file "sralloc.c"
  9998 ;; Parameters:    Size  Location     Type
  9999 ;;  pSegA           2   13[BANK0 ] PTR struct _SALLOC
 10000 ;;		 -> _uDynamicHeap(512), 
 10001 ;; Auto vars:     Size  Location     Type
 10002 ;;  pSegB           2   17[BANK0 ] PTR struct _SALLOC
 10003 ;;		 -> _uDynamicHeap(512), 
 10004 ;;  uSegB           1   20[BANK0 ] struct _SALLOC
 10005 ;;  uSegA           1   19[BANK0 ] struct _SALLOC
 10006 ;;  uSum            1   16[BANK0 ] struct _SALLOC
 10007 ;; Return value:  Size  Location     Type
 10008 ;;                  1    wreg      unsigned char 
 10009 ;; Registers used:
 10010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10011 ;; Tracked objects:
 10012 ;;		On entry : 0/0
 10013 ;;		On exit  : 0/0
 10014 ;;		Unchanged: 0/0
 10015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10016 ;;      Params:         0       2       0       0       0       0       0
 10017 ;;      Locals:         0       5       0       0       0       0       0
 10018 ;;      Temps:          0       1       0       0       0       0       0
 10019 ;;      Totals:         0       8       0       0       0       0       0
 10020 ;;Total ram usage:        8 bytes
 10021 ;; Hardware stack levels used:    1
 10022 ;; Hardware stack levels required when called:    4
 10023 ;; This function calls:
 10024 ;;		Nothing
 10025 ;; This function is called by:
 10026 ;;		_SRAMalloc
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           	psect	text49
 10031  002870                     __ptext49:
 10032                           	opt stack 0
 10033  002870                     __SRAMmerge:
 10034                           	opt stack 20
 10035                           
 10036                           ;sralloc.c: 362: SALLOC *  pSegB;
 10037                           ;sralloc.c: 363: SALLOC uSegA, uSegB, uSum;
 10038                           ;sralloc.c: 367: pSegB = pSegA + (*pSegA).byte;
 10039                           
 10040                           ;incstack = 0
 10041  002870  C0E5  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
 10042  002874  C0E6  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
 10043  002878  50DF               	movf	indf2,w,c
 10044  00287A  0100               	movlb	0	; () banked
 10045  00287C  6FE7               	movwf	??__SRAMmerge& (0+255),b
 10046  00287E  51E7               	movf	??__SRAMmerge& (0+255),w,b
 10047  002880  0D01               	mullw	1
 10048  002882  50F3               	movf	prodl,w,c
 10049  002884  25E5               	addwf	__SRAMmerge@pSegA& (0+255),w,b
 10050  002886  6FE9               	movwf	__SRAMmerge@pSegB& (0+255),b
 10051  002888  50F4               	movf	prodh,w,c
 10052  00288A  21E6               	addwfc	(__SRAMmerge@pSegA+1)& (0+255),w,b
 10053  00288C  6FEA               	movwf	(__SRAMmerge@pSegB+1)& (0+255),b
 10054                           
 10055                           ; BSR set to: 0
 10056                           ;sralloc.c: 370: uSegA = *pSegA;
 10057  00288E  C0E5  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
 10058  002892  C0E6  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
 10059  002896  50DF               	movf	indf2,w,c
 10060  002898  6FEB               	movwf	__SRAMmerge@uSegA& (0+255),b
 10061                           
 10062                           ; BSR set to: 0
 10063                           ;sralloc.c: 371: uSegB = *pSegB;
 10064  00289A  C0E9  FFD9         	movff	__SRAMmerge@pSegB,fsr2l
 10065  00289E  C0EA  FFDA         	movff	__SRAMmerge@pSegB+1,fsr2h
 10066  0028A2  50DF               	movf	indf2,w,c
 10067  0028A4  6FEC               	movwf	__SRAMmerge@uSegB& (0+255),b
 10068                           
 10069                           ; BSR set to: 0
 10070                           ;sralloc.c: 374: if (uSegB.byte == 0) return (0);
 10071  0028A6  51EC               	movf	__SRAMmerge@uSegB& (0+255),w,b
 10072  0028A8  A4D8               	btfss	status,2,c
 10073  0028AA  D002               	goto	i1l298
 10074                           
 10075                           ; BSR set to: 0
 10076  0028AC  0E00               	movlw	0
 10077                           
 10078                           ; BSR set to: 0
 10079  0028AE  0012               	return	
 10080  0028B0                     i1l298:
 10081                           
 10082                           ; BSR set to: 0
 10083                           ;sralloc.c: 377: if (uSegA.bits.alloc || uSegB.bits.alloc) return (0);
 10084  0028B0  BFEB               	btfsc	__SRAMmerge@uSegA& (0+255),7,b
 10085  0028B2  D002               	goto	i1u269_20
 10086                           
 10087                           ; BSR set to: 0
 10088  0028B4  AFEC               	btfss	__SRAMmerge@uSegB& (0+255),7,b
 10089  0028B6  D002               	goto	i1l300
 10090  0028B8                     i1u269_20:
 10091                           
 10092                           ; BSR set to: 0
 10093                           
 10094                           ; BSR set to: 0
 10095  0028B8  0E00               	movlw	0
 10096                           
 10097                           ; BSR set to: 0
 10098  0028BA  0012               	return	
 10099  0028BC                     i1l300:
 10100                           
 10101                           ; BSR set to: 0
 10102                           ;sralloc.c: 380: if (uSegA.bits.count == 0x7F) return (0);
 10103                           
 10104                           ; BSR set to: 0
 10105  0028BC  51EB               	movf	__SRAMmerge@uSegA& (0+255),w,b
 10106  0028BE  0B7F               	andlw	127
 10107  0028C0  0A7F               	xorlw	127
 10108  0028C2  A4D8               	btfss	status,2,c
 10109  0028C4  D002               	goto	i1l303
 10110                           
 10111                           ; BSR set to: 0
 10112  0028C6  0E00               	movlw	0
 10113                           
 10114                           ; BSR set to: 0
 10115  0028C8  0012               	return	
 10116  0028CA                     i1l303:
 10117                           
 10118                           ; BSR set to: 0
 10119                           ;sralloc.c: 383: uSum.byte = uSegA.byte + uSegB.byte;
 10120                           
 10121                           ; BSR set to: 0
 10122  0028CA  51EB               	movf	__SRAMmerge@uSegA& (0+255),w,b
 10123  0028CC  25EC               	addwf	__SRAMmerge@uSegB& (0+255),w,b
 10124  0028CE  6FE8               	movwf	__SRAMmerge@uSum& (0+255),b
 10125                           
 10126                           ;sralloc.c: 389: if ((uSum.byte) > 0x7F)
 10127  0028D0  0E7F               	movlw	127
 10128  0028D2  65E8               	cpfsgt	__SRAMmerge@uSum& (0+255),b
 10129  0028D4  D01A               	goto	i1l304
 10130                           
 10131                           ; BSR set to: 0
 10132                           ;sralloc.c: 390: {
 10133                           ;sralloc.c: 391: (*pSegA).byte = 0x7F;
 10134  0028D6  C0E5  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
 10135  0028DA  C0E6  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
 10136  0028DE  0E7F               	movlw	127
 10137  0028E0  6EDF               	movwf	indf2,c
 10138                           
 10139                           ; BSR set to: 0
 10140                           ;sralloc.c: 392: pSegA += 0x7F;
 10141  0028E2  0E7F               	movlw	127
 10142  0028E4  27E5               	addwf	__SRAMmerge@pSegA& (0+255),f,b
 10143  0028E6  0E00               	movlw	0
 10144  0028E8  23E6               	addwfc	(__SRAMmerge@pSegA+1)& (0+255),f,b
 10145                           
 10146                           ; BSR set to: 0
 10147                           ;sralloc.c: 393: pSegB += uSegB.byte;
 10148  0028EA  51EC               	movf	__SRAMmerge@uSegB& (0+255),w,b
 10149  0028EC  0D01               	mullw	1
 10150  0028EE  50F3               	movf	prodl,w,c
 10151  0028F0  27E9               	addwf	__SRAMmerge@pSegB& (0+255),f,b
 10152  0028F2  50F4               	movf	prodh,w,c
 10153  0028F4  23EA               	addwfc	(__SRAMmerge@pSegB+1)& (0+255),f,b
 10154                           
 10155                           ; BSR set to: 0
 10156                           ;sralloc.c: 394: (*pSegA).byte = pSegB - pSegA;
 10157  0028F6  51E5               	movf	__SRAMmerge@pSegA& (0+255),w,b
 10158  0028F8  0800               	sublw	0
 10159  0028FA  25E9               	addwf	__SRAMmerge@pSegB& (0+255),w,b
 10160  0028FC  C0E5  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
 10161  002900  C0E6  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
 10162  002904  6EDF               	movwf	indf2,c
 10163                           
 10164                           ; BSR set to: 0
 10165                           ;sralloc.c: 396: return (0x7F);
 10166  002906  0E7F               	movlw	127
 10167                           
 10168                           ; BSR set to: 0
 10169                           ;sralloc.c: 397: }
 10170                           
 10171                           ; BSR set to: 0
 10172  002908  0012               	return	
 10173  00290A                     i1l304:
 10174                           
 10175                           ; BSR set to: 0
 10176                           ;sralloc.c: 400: else
 10177                           ;sralloc.c: 401: {
 10178                           ;sralloc.c: 402: return ((*pSegA).byte = uSum.byte);
 10179                           
 10180                           ; BSR set to: 0
 10181  00290A  C0E5  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
 10182  00290E  C0E6  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
 10183  002912  C0E8  FFDF         	movff	__SRAMmerge@uSum,indf2
 10184  002916  50DF               	movf	indf2,w,c
 10185                           
 10186                           ; BSR set to: 0
 10187  002918  0012               	return	
 10188  00291A                     __end_of__SRAMmerge:
 10189                           	opt stack 0
 10190                           tosu	equ	0xFFF
 10191                           tosh	equ	0xFFE
 10192                           tosl	equ	0xFFD
 10193                           stkptr	equ	0xFFC
 10194                           tblptru	equ	0xFF8
 10195                           tblptrh	equ	0xFF7
 10196                           tblptrl	equ	0xFF6
 10197                           tablat	equ	0xFF5
 10198                           prodh	equ	0xFF4
 10199                           prodl	equ	0xFF3
 10200                           intcon	equ	0xFF2
 10201                           indf0	equ	0xFEF
 10202                           postinc0	equ	0xFEE
 10203                           plusw0	equ	0xFEB
 10204                           fsr0h	equ	0xFEA
 10205                           fsr0l	equ	0xFE9
 10206                           wreg	equ	0xFE8
 10207                           postinc1	equ	0xFE6
 10208                           postdec1	equ	0xFE5
 10209                           plusw1	equ	0xFE3
 10210                           fsr1h	equ	0xFE2
 10211                           fsr1l	equ	0xFE1
 10212                           bsr	equ	0xFE0
 10213                           indf2	equ	0xFDF
 10214                           postinc2	equ	0xFDE
 10215                           postdec2	equ	0xFDD
 10216                           plusw2	equ	0xFDB
 10217                           fsr2h	equ	0xFDA
 10218                           fsr2l	equ	0xFD9
 10219                           status	equ	0xFD8
 10220                           
 10221 ;; *************** function _nojoDelay *****************
 10222 ;; Defined at:
 10223 ;;		line 78 in file "kernel.c"
 10224 ;; Parameters:    Size  Location     Type
 10225 ;;  ms              4    6[BANK1 ] unsigned long 
 10226 ;; Auto vars:     Size  Location     Type
 10227 ;;		None
 10228 ;; Return value:  Size  Location     Type
 10229 ;;                  1    wreg      void 
 10230 ;; Registers used:
 10231 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+8, btemp+9, btemp+10, 
      +btemp+11, prodl, prodh, cstack
 10232 ;; Tracked objects:
 10233 ;;		On entry : 0/0
 10234 ;;		On exit  : 0/0
 10235 ;;		Unchanged: 0/0
 10236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10237 ;;      Params:         0       0       4       0       0       0       0
 10238 ;;      Locals:         0       0       0       0       0       0       0
 10239 ;;      Temps:          0       0       0       0       0       0       0
 10240 ;;      Totals:         0       0       4       0       0       0       0
 10241 ;;Total ram usage:        4 bytes
 10242 ;; Hardware stack levels used:    1
 10243 ;; Hardware stack levels required when called:    7
 10244 ;; This function calls:
 10245 ;;		_delay_queue_insert
 10246 ;;		_nojoDispatcher
 10247 ;; This function is called by:
 10248 ;;		_limpeza
 10249 ;; This function uses a non-reentrant model
 10250 ;;
 10251                           
 10252                           	psect	text50
 10253  00317E                     __ptext50:
 10254                           	opt stack 0
 10255  00317E                     _nojoDelay:
 10256                           	opt stack 19
 10257                           
 10258                           ;kernel.c: 79: INTCONbits.GIE = 0;
 10259                           
 10260                           ; BSR set to: 0
 10261                           ;incstack = 0
 10262  00317E  9EF2               	bcf	intcon,7,c	;volatile
 10263                           
 10264                           ;kernel.c: 81: delay_queue_insert(&Q_DELAY, F_APTOS.task_running, ms);
 10265  003180  0E80               	movlw	low _Q_DELAY
 10266  003182  0100               	movlb	0	; () banked
 10267  003184  6FE5               	movwf	delay_queue_insert@delay_queue_handler& (0+255),b
 10268  003186  0E00               	movlw	high _Q_DELAY
 10269  003188  6FE6               	movwf	(delay_queue_insert@delay_queue_handler+1)& (0+255),b
 10270  00318A  C355  F0E7         	movff	_F_APTOS+564,delay_queue_insert@task_pos
 10271  00318E  C356  F0E8         	movff	_F_APTOS+565,delay_queue_insert@task_pos+1
 10272  003192  C357  F0E9         	movff	_F_APTOS+566,delay_queue_insert@task_pos+2
 10273  003196  C358  F0EA         	movff	_F_APTOS+567,delay_queue_insert@task_pos+3
 10274  00319A  C106  F0EB         	movff	nojoDelay@ms,delay_queue_insert@ms
 10275  00319E  C107  F0EC         	movff	nojoDelay@ms+1,delay_queue_insert@ms+1
 10276  0031A2  C108  F0ED         	movff	nojoDelay@ms+2,delay_queue_insert@ms+2
 10277  0031A6  C109  F0EE         	movff	nojoDelay@ms+3,delay_queue_insert@ms+3
 10278  0031AA  ECFE  F00E         	call	_delay_queue_insert	;wreg free
 10279                           
 10280                           ;kernel.c: 82: nojoDispatcher(WAITING);
 10281  0031AE  0E02               	movlw	2
 10282  0031B0  6EE6               	movwf	postinc1,c
 10283  0031B2  EC0E  F003         	call	_nojoDispatcher	;wreg free
 10284                           
 10285                           ;kernel.c: 84: INTCONbits.GIE = 1;
 10286  0031B6  8EF2               	bsf	intcon,7,c	;volatile
 10287  0031B8  0012               	return		;funcret
 10288  0031BA                     __end_of_nojoDelay:
 10289                           	opt stack 0
 10290                           tosu	equ	0xFFF
 10291                           tosh	equ	0xFFE
 10292                           tosl	equ	0xFFD
 10293                           stkptr	equ	0xFFC
 10294                           tblptru	equ	0xFF8
 10295                           tblptrh	equ	0xFF7
 10296                           tblptrl	equ	0xFF6
 10297                           tablat	equ	0xFF5
 10298                           prodh	equ	0xFF4
 10299                           prodl	equ	0xFF3
 10300                           intcon	equ	0xFF2
 10301                           indf0	equ	0xFEF
 10302                           postinc0	equ	0xFEE
 10303                           plusw0	equ	0xFEB
 10304                           fsr0h	equ	0xFEA
 10305                           fsr0l	equ	0xFE9
 10306                           wreg	equ	0xFE8
 10307                           postinc1	equ	0xFE6
 10308                           postdec1	equ	0xFE5
 10309                           plusw1	equ	0xFE3
 10310                           fsr1h	equ	0xFE2
 10311                           fsr1l	equ	0xFE1
 10312                           bsr	equ	0xFE0
 10313                           indf2	equ	0xFDF
 10314                           postinc2	equ	0xFDE
 10315                           postdec2	equ	0xFDD
 10316                           plusw2	equ	0xFDB
 10317                           fsr2h	equ	0xFDA
 10318                           fsr2l	equ	0xFD9
 10319                           status	equ	0xFD8
 10320                           
 10321 ;; *************** function _delay_queue_insert *****************
 10322 ;; Defined at:
 10323 ;;		line 15 in file "delay.c"
 10324 ;; Parameters:    Size  Location     Type
 10325 ;;  delay_queue_    2   13[BANK0 ] PTR struct queue_delay
 10326 ;;		 -> Q_DELAY(36), 
 10327 ;;  task_pos        4   15[BANK0 ] unsigned long 
 10328 ;;  ms              4   19[BANK0 ] unsigned long 
 10329 ;; Auto vars:     Size  Location     Type
 10330 ;;  i               2   23[BANK0 ] int 
 10331 ;; Return value:  Size  Location     Type
 10332 ;;                  1    wreg      void 
 10333 ;; Registers used:
 10334 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10335 ;; Tracked objects:
 10336 ;;		On entry : 0/0
 10337 ;;		On exit  : 0/0
 10338 ;;		Unchanged: 0/0
 10339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10340 ;;      Params:         0      10       0       0       0       0       0
 10341 ;;      Locals:         0       2       0       0       0       0       0
 10342 ;;      Temps:          0       0       6       0       0       0       0
 10343 ;;      Totals:         0      12       6       0       0       0       0
 10344 ;;Total ram usage:       18 bytes
 10345 ;; Hardware stack levels used:    1
 10346 ;; Hardware stack levels required when called:    5
 10347 ;; This function calls:
 10348 ;;		_nojoScheduler
 10349 ;; This function is called by:
 10350 ;;		_nojoDelay
 10351 ;; This function uses a non-reentrant model
 10352 ;;
 10353                           
 10354                           	psect	text51
 10355  001DFC                     __ptext51:
 10356                           	opt stack 0
 10357  001DFC                     _delay_queue_insert:
 10358                           	opt stack 20
 10359                           
 10360                           ;delay.c: 16: int i;
 10361                           ;delay.c: 18: if (TMR0ON == 0) nojoScheduler();
 10362                           
 10363                           ;incstack = 0
 10364  001DFC  AED5               	btfss	4053,7,c	;volatile
 10365  001DFE  EC62  F019         	call	_nojoScheduler	;wreg free
 10366                           
 10367                           ;delay.c: 20: for (i = 0; i < 4; i++) {
 10368  001E02  0E00               	movlw	0
 10369  001E04  0100               	movlb	0	; () banked
 10370  001E06  6FF0               	movwf	(delay_queue_insert@i+1)& (0+255),b
 10371  001E08  0E00               	movlw	0
 10372  001E0A  6FEF               	movwf	delay_queue_insert@i& (0+255),b
 10373                           
 10374                           ; BSR set to: 0
 10375  001E0C  BFF0               	btfsc	(delay_queue_insert@i+1)& (0+255),7,b
 10376  001E0E  D008               	goto	i1l21
 10377  001E10  51F0               	movf	(delay_queue_insert@i+1)& (0+255),w,b
 10378  001E12  E105               	bnz	i1u280_20
 10379  001E14  0E04               	movlw	4
 10380  001E16  5DEF               	subwf	delay_queue_insert@i& (0+255),w,b
 10381  001E18  B0D8               	btfsc	status,0,c
 10382  001E1A  0012               	return	
 10383  001E1C  D001               	goto	i1l21
 10384  001E1E                     i1u280_20:
 10385                           
 10386                           ; BSR set to: 0
 10387  001E1E  0012               	return	
 10388  001E20                     i1l21:
 10389                           
 10390                           ; BSR set to: 0
 10391                           ;delay.c: 21: if (delay_queue_handler->delay_QUEUE[i].task_pos_ready_queue == 0) {
 10392                           
 10393                           ; BSR set to: 0
 10394  001E20  C0EF  F100         	movff	delay_queue_insert@i,??_delay_queue_insert
 10395  001E24  C0F0  F101         	movff	delay_queue_insert@i+1,??_delay_queue_insert+1
 10396  001E28  0101               	movlb	1	; () banked
 10397  001E2A  90D8               	bcf	status,0,c
 10398  001E2C  3700               	rlcf	??_delay_queue_insert& (0+255),f,b
 10399  001E2E  3701               	rlcf	(??_delay_queue_insert+1)& (0+255),f,b
 10400  001E30  90D8               	bcf	status,0,c
 10401  001E32  3700               	rlcf	??_delay_queue_insert& (0+255),f,b
 10402  001E34  3701               	rlcf	(??_delay_queue_insert+1)& (0+255),f,b
 10403  001E36  90D8               	bcf	status,0,c
 10404  001E38  3700               	rlcf	??_delay_queue_insert& (0+255),f,b
 10405  001E3A  3701               	rlcf	(??_delay_queue_insert+1)& (0+255),f,b
 10406  001E3C  5100               	movf	??_delay_queue_insert& (0+255),w,b
 10407  001E3E  0100               	movlb	0	; () banked
 10408  001E40  25E5               	addwf	delay_queue_insert@delay_queue_handler& (0+255),w,b
 10409  001E42  6ED9               	movwf	fsr2l,c
 10410  001E44  0101               	movlb	1	; () banked
 10411  001E46  5101               	movf	(??_delay_queue_insert+1)& (0+255),w,b
 10412  001E48  0100               	movlb	0	; () banked
 10413  001E4A  21E6               	addwfc	(delay_queue_insert@delay_queue_handler+1)& (0+255),w,b
 10414  001E4C  6EDA               	movwf	fsr2h,c
 10415  001E4E  50DE               	movf	postinc2,w,c
 10416  001E50  10DE               	iorwf	postinc2,w,c
 10417  001E52  10DE               	iorwf	postinc2,w,c
 10418  001E54  10DE               	iorwf	postinc2,w,c
 10419  001E56  A4D8               	btfss	status,2,c
 10420  001E58  D050               	goto	i1l23
 10421                           
 10422                           ; BSR set to: 0
 10423                           ;delay.c: 22: delay_queue_handler->delay_QUEUE[i].task_pos_ready_queue = task_pos;
 10424  001E5A  C0EF  F100         	movff	delay_queue_insert@i,??_delay_queue_insert
 10425  001E5E  C0F0  F101         	movff	delay_queue_insert@i+1,??_delay_queue_insert+1
 10426  001E62  0101               	movlb	1	; () banked
 10427  001E64  90D8               	bcf	status,0,c
 10428  001E66  3700               	rlcf	??_delay_queue_insert& (0+255),f,b
 10429  001E68  3701               	rlcf	(??_delay_queue_insert+1)& (0+255),f,b
 10430  001E6A  90D8               	bcf	status,0,c
 10431  001E6C  3700               	rlcf	??_delay_queue_insert& (0+255),f,b
 10432  001E6E  3701               	rlcf	(??_delay_queue_insert+1)& (0+255),f,b
 10433  001E70  90D8               	bcf	status,0,c
 10434  001E72  3700               	rlcf	??_delay_queue_insert& (0+255),f,b
 10435  001E74  3701               	rlcf	(??_delay_queue_insert+1)& (0+255),f,b
 10436  001E76  5100               	movf	??_delay_queue_insert& (0+255),w,b
 10437  001E78  0100               	movlb	0	; () banked
 10438  001E7A  25E5               	addwf	delay_queue_insert@delay_queue_handler& (0+255),w,b
 10439  001E7C  6ED9               	movwf	fsr2l,c
 10440  001E7E  0101               	movlb	1	; () banked
 10441  001E80  5101               	movf	(??_delay_queue_insert+1)& (0+255),w,b
 10442  001E82  0100               	movlb	0	; () banked
 10443  001E84  21E6               	addwfc	(delay_queue_insert@delay_queue_handler+1)& (0+255),w,b
 10444  001E86  6EDA               	movwf	fsr2h,c
 10445  001E88  C0E7  FFDE         	movff	delay_queue_insert@task_pos,postinc2
 10446  001E8C  C0E8  FFDE         	movff	delay_queue_insert@task_pos+1,postinc2
 10447  001E90  C0E9  FFDE         	movff	delay_queue_insert@task_pos+2,postinc2
 10448  001E94  C0EA  FFDE         	movff	delay_queue_insert@task_pos+3,postinc2
 10449                           
 10450                           ;delay.c: 23: delay_queue_handler->delay_QUEUE[i].task_delay_remaning = ms;
 10451  001E98  C0EF  F100         	movff	delay_queue_insert@i,??_delay_queue_insert
 10452  001E9C  C0F0  F101         	movff	delay_queue_insert@i+1,??_delay_queue_insert+1
 10453  001EA0  0101               	movlb	1	; () banked
 10454  001EA2  90D8               	bcf	status,0,c
 10455  001EA4  3700               	rlcf	??_delay_queue_insert& (0+255),f,b
 10456  001EA6  3701               	rlcf	(??_delay_queue_insert+1)& (0+255),f,b
 10457  001EA8  90D8               	bcf	status,0,c
 10458  001EAA  3700               	rlcf	??_delay_queue_insert& (0+255),f,b
 10459  001EAC  3701               	rlcf	(??_delay_queue_insert+1)& (0+255),f,b
 10460  001EAE  90D8               	bcf	status,0,c
 10461  001EB0  3700               	rlcf	??_delay_queue_insert& (0+255),f,b
 10462  001EB2  3701               	rlcf	(??_delay_queue_insert+1)& (0+255),f,b
 10463  001EB4  C0E5  F102         	movff	delay_queue_insert@delay_queue_handler,??_delay_queue_insert+2
 10464  001EB8  C0E6  F103         	movff	delay_queue_insert@delay_queue_handler+1,??_delay_queue_insert+3
 10465  001EBC  5100               	movf	??_delay_queue_insert& (0+255),w,b
 10466  001EBE  2702               	addwf	(??_delay_queue_insert+2)& (0+255),f,b
 10467  001EC0  5101               	movf	(??_delay_queue_insert+1)& (0+255),w,b
 10468  001EC2  2303               	addwfc	(??_delay_queue_insert+3)& (0+255),f,b
 10469  001EC4  0E04               	movlw	4
 10470  001EC6  2502               	addwf	(??_delay_queue_insert+2)& (0+255),w,b
 10471  001EC8  6ED9               	movwf	fsr2l,c
 10472  001ECA  0E00               	movlw	0
 10473  001ECC  2103               	addwfc	(??_delay_queue_insert+3)& (0+255),w,b
 10474  001ECE  6EDA               	movwf	fsr2h,c
 10475  001ED0  C0EB  FFDE         	movff	delay_queue_insert@ms,postinc2
 10476  001ED4  C0EC  FFDE         	movff	delay_queue_insert@ms+1,postinc2
 10477  001ED8  C0ED  FFDE         	movff	delay_queue_insert@ms+2,postinc2
 10478  001EDC  C0EE  FFDE         	movff	delay_queue_insert@ms+3,postinc2
 10479                           
 10480                           ;delay.c: 24: delay_queue_handler->delay_queue_size++;
 10481  001EE0  0100               	movlb	0	; () banked
 10482  001EE2  EE20 F020          	lfsr	2,32
 10483  001EE6  51E5               	movf	delay_queue_insert@delay_queue_handler& (0+255),w,b
 10484  001EE8  26D9               	addwf	fsr2l,f,c
 10485  001EEA  51E6               	movf	(delay_queue_insert@delay_queue_handler+1)& (0+255),w,b
 10486  001EEC  22DA               	addwfc	fsr2h,f,c
 10487  001EEE  2ADE               	incf	postinc2,f,c
 10488  001EF0  0E00               	movlw	0
 10489  001EF2  22DE               	addwfc	postinc2,f,c
 10490  001EF4  22DE               	addwfc	postinc2,f,c
 10491  001EF6  22DE               	addwfc	postinc2,f,c
 10492                           
 10493                           ;delay.c: 25: break;
 10494  001EF8  0012               	return	
 10495  001EFA                     i1l23:
 10496                           
 10497                           ; BSR set to: 0
 10498                           
 10499                           ; BSR set to: 0
 10500  001EFA  4BEF               	infsnz	delay_queue_insert@i& (0+255),f,b
 10501  001EFC  2BF0               	incf	(delay_queue_insert@i+1)& (0+255),f,b
 10502                           
 10503                           ; BSR set to: 0
 10504  001EFE  BFF0               	btfsc	(delay_queue_insert@i+1)& (0+255),7,b
 10505  001F00  D78F               	goto	i1l21
 10506  001F02  51F0               	movf	(delay_queue_insert@i+1)& (0+255),w,b
 10507  001F04  E101               	bnz	i1l24
 10508  001F06  D786               	goto	L8
 10509  001F08                     i1l24:
 10510                           
 10511                           ; BSR set to: 0
 10512  001F08  0012               	return		;funcret
 10513  001F0A                     __end_of_delay_queue_insert:
 10514                           	opt stack 0
 10515                           tosu	equ	0xFFF
 10516                           tosh	equ	0xFFE
 10517                           tosl	equ	0xFFD
 10518                           stkptr	equ	0xFFC
 10519                           tblptru	equ	0xFF8
 10520                           tblptrh	equ	0xFF7
 10521                           tblptrl	equ	0xFF6
 10522                           tablat	equ	0xFF5
 10523                           prodh	equ	0xFF4
 10524                           prodl	equ	0xFF3
 10525                           intcon	equ	0xFF2
 10526                           indf0	equ	0xFEF
 10527                           postinc0	equ	0xFEE
 10528                           plusw0	equ	0xFEB
 10529                           fsr0h	equ	0xFEA
 10530                           fsr0l	equ	0xFE9
 10531                           wreg	equ	0xFE8
 10532                           postinc1	equ	0xFE6
 10533                           postdec1	equ	0xFE5
 10534                           plusw1	equ	0xFE3
 10535                           fsr1h	equ	0xFE2
 10536                           fsr1l	equ	0xFE1
 10537                           bsr	equ	0xFE0
 10538                           indf2	equ	0xFDF
 10539                           postinc2	equ	0xFDE
 10540                           postdec2	equ	0xFDD
 10541                           plusw2	equ	0xFDB
 10542                           fsr2h	equ	0xFDA
 10543                           fsr2l	equ	0xFD9
 10544                           status	equ	0xFD8
 10545                           
 10546 ;; *************** function _timer_ISR *****************
 10547 ;; Defined at:
 10548 ;;		line 36 in file "timer.c"
 10549 ;; Parameters:    Size  Location     Type
 10550 ;;		None
 10551 ;; Auto vars:     Size  Location     Type
 10552 ;;		None
 10553 ;; Return value:  Size  Location     Type
 10554 ;;                  1    wreg      void 
 10555 ;; Registers used:
 10556 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+8, btemp+9, btemp+10, 
      +btemp+11, prodl, prodh, cstack
 10557 ;; Tracked objects:
 10558 ;;		On entry : 0/0
 10559 ;;		On exit  : 0/0
 10560 ;;		Unchanged: 0/0
 10561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10562 ;;      Params:         0       0       0       0       0       0       0
 10563 ;;      Locals:         0       0       0       0       0       0       0
 10564 ;;      Temps:         14       0       0       0       0       0       0
 10565 ;;      Totals:        14       0       0       0       0       0       0
 10566 ;;Total ram usage:       14 bytes
 10567 ;; Hardware stack levels used:    1
 10568 ;; Hardware stack levels required when called:    3
 10569 ;; This function calls:
 10570 ;;		_delay_queue_refresh
 10571 ;;		_nojoDispatcher
 10572 ;;		_resetTimer
 10573 ;; This function is called by:
 10574 ;;		Interrupt level 2
 10575 ;; This function uses a non-reentrant model
 10576 ;;
 10577                           
 10578                           	psect	intcode
 10579  000008                     __pintcode:
 10580                           	opt stack 0
 10581  000008                     _timer_ISR:
 10582                           	opt stack 19
 10583                           
 10584                           ; BSR set to: 0
 10585                           ;incstack = 0
 10586  000008  CFE1 F03F          	movff	fsr1l,??_timer_ISR
 10587  00000C  CFE2 F040          	movff	fsr1h,??_timer_ISR+1
 10588  000010  CFD9 F041          	movff	fsr2l,??_timer_ISR+2
 10589  000014  CFDA F042          	movff	fsr2h,??_timer_ISR+3
 10590  000018  CFF3 F043          	movff	prodl,??_timer_ISR+4
 10591  00001C  CFF4 F044          	movff	prodh,??_timer_ISR+5
 10592  000020  C04F  F045         	movff	btemp,??_timer_ISR+6
 10593  000024  C050  F046         	movff	btemp+1,??_timer_ISR+7
 10594  000028  C051  F047         	movff	btemp+2,??_timer_ISR+8
 10595  00002C  C052  F048         	movff	btemp+3,??_timer_ISR+9
 10596  000030  C057  F049         	movff	btemp+8,??_timer_ISR+10
 10597  000034  C058  F04A         	movff	btemp+9,??_timer_ISR+11
 10598  000038  C059  F04B         	movff	btemp+10,??_timer_ISR+12
 10599  00003C  C05A  F04C         	movff	btemp+11,??_timer_ISR+13
 10600  000040  EE15  F092         	lfsr	1,___inthi_sp
 10601                           
 10602                           ;timer.c: 38: if (INTCONbits.T0IE && INTCONbits.T0IF) {
 10603  000044  BAF2               	btfsc	intcon,5,c	;volatile
 10604  000046  A4F2               	btfss	intcon,2,c	;volatile
 10605  000048  D021               	goto	i2l442
 10606                           
 10607                           ;timer.c: 39: resetTimer();
 10608  00004A  EC68  F019         	call	_resetTimer	;wreg free
 10609                           
 10610                           ;timer.c: 41: if (Q_DELAY.delay_queue_size > 0)
 10611  00004E  0100               	movlb	0	; () banked
 10612  000050  51A0               	movf	(_Q_DELAY+32)& (0+255),w,b
 10613  000052  11A1               	iorwf	(_Q_DELAY+33)& (0+255),w,b
 10614  000054  11A2               	iorwf	(_Q_DELAY+34)& (0+255),w,b
 10615  000056  11A3               	iorwf	(_Q_DELAY+35)& (0+255),w,b
 10616  000058  B4D8               	btfsc	status,2,c
 10617  00005A  D006               	goto	i2l441
 10618                           
 10619                           ; BSR set to: 0
 10620                           ;timer.c: 42: delay_queue_refresh(&Q_DELAY);
 10621  00005C  0E80               	movlw	low _Q_DELAY
 10622  00005E  6E33               	movwf	delay_queue_refresh@delay_queue_handler,c
 10623  000060  0E00               	movlw	high _Q_DELAY
 10624  000062  6E34               	movwf	delay_queue_refresh@delay_queue_handler+1,c
 10625  000064  EC88  F011         	call	_delay_queue_refresh	;wreg free
 10626  000068                     i2l441:
 10627                           
 10628                           ;timer.c: 44: contagem++;
 10629  000068  4A08               	infsnz	_contagem,f,c
 10630  00006A  2A09               	incf	_contagem+1,f,c
 10631                           
 10632                           ;timer.c: 46: if (contagem >= 6) {
 10633  00006C  BE09               	btfsc	_contagem+1,7,c
 10634  00006E  D00E               	goto	i2l442
 10635  000070  5009               	movf	_contagem+1,w,c
 10636  000072  E104               	bnz	i2u328_40
 10637  000074  0E06               	movlw	6
 10638  000076  5C08               	subwf	_contagem,w,c
 10639  000078  A0D8               	btfss	status,0,c
 10640  00007A  D008               	goto	i2l442
 10641  00007C                     i2u328_40:
 10642                           
 10643                           ;timer.c: 47: contagem = 0;
 10644  00007C  0E00               	movlw	0
 10645  00007E  6E09               	movwf	_contagem+1,c
 10646  000080  0E00               	movlw	0
 10647  000082  6E08               	movwf	_contagem,c
 10648                           
 10649                           ;timer.c: 48: nojoDispatcher(READY);
 10650  000084  0E00               	movlw	0
 10651  000086  6EE6               	movwf	postinc1,c
 10652  000088  EC0E  F003         	call	_nojoDispatcher	;wreg free
 10653  00008C                     i2l442:
 10654  00008C  C04C  F05A         	movff	??_timer_ISR+13,btemp+11
 10655  000090  C04B  F059         	movff	??_timer_ISR+12,btemp+10
 10656  000094  C04A  F058         	movff	??_timer_ISR+11,btemp+9
 10657  000098  C049  F057         	movff	??_timer_ISR+10,btemp+8
 10658  00009C  C048  F052         	movff	??_timer_ISR+9,btemp+3
 10659  0000A0  C047  F051         	movff	??_timer_ISR+8,btemp+2
 10660  0000A4  C046  F050         	movff	??_timer_ISR+7,btemp+1
 10661  0000A8  C045  F04F         	movff	??_timer_ISR+6,btemp
 10662  0000AC  C044  FFF4         	movff	??_timer_ISR+5,prodh
 10663  0000B0  C043  FFF3         	movff	??_timer_ISR+4,prodl
 10664  0000B4  C042  FFDA         	movff	??_timer_ISR+3,fsr2h
 10665  0000B8  C041  FFD9         	movff	??_timer_ISR+2,fsr2l
 10666  0000BC  C040  FFE2         	movff	??_timer_ISR+1,fsr1h
 10667  0000C0  C03F  FFE1         	movff	??_timer_ISR,fsr1l
 10668  0000C4  0011               	retfie		f
 10669  0000C6                     __end_of_timer_ISR:
 10670                           	opt stack 0
 10671                           tosu	equ	0xFFF
 10672                           tosh	equ	0xFFE
 10673                           tosl	equ	0xFFD
 10674                           stkptr	equ	0xFFC
 10675                           tblptru	equ	0xFF8
 10676                           tblptrh	equ	0xFF7
 10677                           tblptrl	equ	0xFF6
 10678                           tablat	equ	0xFF5
 10679                           prodh	equ	0xFF4
 10680                           prodl	equ	0xFF3
 10681                           intcon	equ	0xFF2
 10682                           indf0	equ	0xFEF
 10683                           postinc0	equ	0xFEE
 10684                           plusw0	equ	0xFEB
 10685                           fsr0h	equ	0xFEA
 10686                           fsr0l	equ	0xFE9
 10687                           wreg	equ	0xFE8
 10688                           postinc1	equ	0xFE6
 10689                           postdec1	equ	0xFE5
 10690                           plusw1	equ	0xFE3
 10691                           fsr1h	equ	0xFE2
 10692                           fsr1l	equ	0xFE1
 10693                           bsr	equ	0xFE0
 10694                           indf2	equ	0xFDF
 10695                           postinc2	equ	0xFDE
 10696                           postdec2	equ	0xFDD
 10697                           plusw2	equ	0xFDB
 10698                           fsr2h	equ	0xFDA
 10699                           fsr2l	equ	0xFD9
 10700                           status	equ	0xFD8
 10701                           
 10702 ;; *************** function _resetTimer *****************
 10703 ;; Defined at:
 10704 ;;		line 28 in file "timer.c"
 10705 ;; Parameters:    Size  Location     Type
 10706 ;;		None
 10707 ;; Auto vars:     Size  Location     Type
 10708 ;;		None
 10709 ;; Return value:  Size  Location     Type
 10710 ;;                  1    wreg      void 
 10711 ;; Registers used:
 10712 ;;		wreg, status,2
 10713 ;; Tracked objects:
 10714 ;;		On entry : 0/0
 10715 ;;		On exit  : 0/0
 10716 ;;		Unchanged: 0/0
 10717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10718 ;;      Params:         0       0       0       0       0       0       0
 10719 ;;      Locals:         0       0       0       0       0       0       0
 10720 ;;      Temps:          0       0       0       0       0       0       0
 10721 ;;      Totals:         0       0       0       0       0       0       0
 10722 ;;Total ram usage:        0 bytes
 10723 ;; Hardware stack levels used:    1
 10724 ;; This function calls:
 10725 ;;		Nothing
 10726 ;; This function is called by:
 10727 ;;		_timer_ISR
 10728 ;; This function uses a non-reentrant model
 10729 ;;
 10730                           
 10731                           	psect	text53
 10732  0032D0                     __ptext53:
 10733                           	opt stack 0
 10734  0032D0                     _resetTimer:
 10735                           	opt stack 21
 10736                           
 10737                           ;timer.c: 30: INTCONbits.TMR0IF = 0;
 10738                           
 10739                           ;incstack = 0
 10740  0032D0  94F2               	bcf	intcon,2,c	;volatile
 10741                           
 10742                           ;timer.c: 31: TMR0 = 64911;
 10743  0032D2  0EFD               	movlw	253
 10744  0032D4  6ED7               	movwf	4055,c	;volatile
 10745  0032D6  0E8F               	movlw	143
 10746  0032D8  6ED6               	movwf	4054,c	;volatile
 10747  0032DA  0012               	return		;funcret
 10748  0032DC                     __end_of_resetTimer:
 10749                           	opt stack 0
 10750                           tosu	equ	0xFFF
 10751                           tosh	equ	0xFFE
 10752                           tosl	equ	0xFFD
 10753                           stkptr	equ	0xFFC
 10754                           tblptru	equ	0xFF8
 10755                           tblptrh	equ	0xFF7
 10756                           tblptrl	equ	0xFF6
 10757                           tablat	equ	0xFF5
 10758                           prodh	equ	0xFF4
 10759                           prodl	equ	0xFF3
 10760                           intcon	equ	0xFF2
 10761                           indf0	equ	0xFEF
 10762                           postinc0	equ	0xFEE
 10763                           plusw0	equ	0xFEB
 10764                           fsr0h	equ	0xFEA
 10765                           fsr0l	equ	0xFE9
 10766                           wreg	equ	0xFE8
 10767                           postinc1	equ	0xFE6
 10768                           postdec1	equ	0xFE5
 10769                           plusw1	equ	0xFE3
 10770                           fsr1h	equ	0xFE2
 10771                           fsr1l	equ	0xFE1
 10772                           bsr	equ	0xFE0
 10773                           indf2	equ	0xFDF
 10774                           postinc2	equ	0xFDE
 10775                           postdec2	equ	0xFDD
 10776                           plusw2	equ	0xFDB
 10777                           fsr2h	equ	0xFDA
 10778                           fsr2l	equ	0xFD9
 10779                           status	equ	0xFD8
 10780                           
 10781 ;; *************** function _delay_queue_refresh *****************
 10782 ;; Defined at:
 10783 ;;		line 36 in file "delay.c"
 10784 ;; Parameters:    Size  Location     Type
 10785 ;;  delay_queue_    2   10[COMRAM] PTR struct queue_delay
 10786 ;;		 -> Q_DELAY(36), 
 10787 ;; Auto vars:     Size  Location     Type
 10788 ;;  i               2   20[COMRAM] int 
 10789 ;; Return value:  Size  Location     Type
 10790 ;;                  1    wreg      void 
 10791 ;; Registers used:
 10792 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh, cstack
 10793 ;; Tracked objects:
 10794 ;;		On entry : 0/0
 10795 ;;		On exit  : 0/0
 10796 ;;		Unchanged: 0/0
 10797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10798 ;;      Params:         2       0       0       0       0       0       0
 10799 ;;      Locals:         2       0       0       0       0       0       0
 10800 ;;      Temps:          8       0       0       0       0       0       0
 10801 ;;      Totals:        12       0       0       0       0       0       0
 10802 ;;Total ram usage:       12 bytes
 10803 ;; Hardware stack levels used:    1
 10804 ;; Hardware stack levels required when called:    2
 10805 ;; This function calls:
 10806 ;;		_delay_queue_remove
 10807 ;; This function is called by:
 10808 ;;		_timer_ISR
 10809 ;; This function uses a non-reentrant model
 10810 ;;
 10811                           
 10812                           	psect	text54
 10813  002310                     __ptext54:
 10814                           	opt stack 0
 10815  002310                     _delay_queue_refresh:
 10816                           	opt stack 19
 10817                           
 10818                           ;delay.c: 37: int i;
 10819                           ;delay.c: 38: for (i = 0; i < 4; i++) {
 10820                           
 10821                           ;incstack = 0
 10822  002310  0E00               	movlw	0
 10823  002312  6E3E               	movwf	delay_queue_refresh@i+1,c
 10824  002314  0E00               	movlw	0
 10825  002316  6E3D               	movwf	delay_queue_refresh@i,c
 10826  002318  BE3E               	btfsc	delay_queue_refresh@i+1,7,c
 10827  00231A  D006               	goto	i2l30
 10828  00231C  503E               	movf	delay_queue_refresh@i+1,w,c
 10829  00231E  E174               	bnz	i2l31
 10830  002320  0E04               	movlw	4
 10831  002322  5C3D               	subwf	delay_queue_refresh@i,w,c
 10832  002324  B0D8               	btfsc	status,0,c
 10833  002326  0012               	return	
 10834  002328                     i2l30:
 10835                           
 10836                           ;delay.c: 39: if (delay_queue_handler->delay_QUEUE[i].task_pos_ready_queue != 0) {
 10837  002328  C03D  F035         	movff	delay_queue_refresh@i,??_delay_queue_refresh
 10838  00232C  C03E  F036         	movff	delay_queue_refresh@i+1,??_delay_queue_refresh+1
 10839  002330  90D8               	bcf	status,0,c
 10840  002332  3635               	rlcf	??_delay_queue_refresh,f,c
 10841  002334  3636               	rlcf	??_delay_queue_refresh+1,f,c
 10842  002336  90D8               	bcf	status,0,c
 10843  002338  3635               	rlcf	??_delay_queue_refresh,f,c
 10844  00233A  3636               	rlcf	??_delay_queue_refresh+1,f,c
 10845  00233C  90D8               	bcf	status,0,c
 10846  00233E  3635               	rlcf	??_delay_queue_refresh,f,c
 10847  002340  3636               	rlcf	??_delay_queue_refresh+1,f,c
 10848  002342  5035               	movf	??_delay_queue_refresh,w,c
 10849  002344  2433               	addwf	delay_queue_refresh@delay_queue_handler,w,c
 10850  002346  6ED9               	movwf	fsr2l,c
 10851  002348  5036               	movf	??_delay_queue_refresh+1,w,c
 10852  00234A  2034               	addwfc	delay_queue_refresh@delay_queue_handler+1,w,c
 10853  00234C  6EDA               	movwf	fsr2h,c
 10854  00234E  50DE               	movf	postinc2,w,c
 10855  002350  10DE               	iorwf	postinc2,w,c
 10856  002352  10DE               	iorwf	postinc2,w,c
 10857  002354  10DE               	iorwf	postinc2,w,c
 10858  002356  B4D8               	btfsc	status,2,c
 10859  002358  D050               	goto	i2l33
 10860                           
 10861                           ;delay.c: 40: delay_queue_handler->delay_QUEUE[i].task_delay_remaning--;
 10862  00235A  C03D  F035         	movff	delay_queue_refresh@i,??_delay_queue_refresh
 10863  00235E  C03E  F036         	movff	delay_queue_refresh@i+1,??_delay_queue_refresh+1
 10864  002362  90D8               	bcf	status,0,c
 10865  002364  3635               	rlcf	??_delay_queue_refresh,f,c
 10866  002366  3636               	rlcf	??_delay_queue_refresh+1,f,c
 10867  002368  90D8               	bcf	status,0,c
 10868  00236A  3635               	rlcf	??_delay_queue_refresh,f,c
 10869  00236C  3636               	rlcf	??_delay_queue_refresh+1,f,c
 10870  00236E  90D8               	bcf	status,0,c
 10871  002370  3635               	rlcf	??_delay_queue_refresh,f,c
 10872  002372  3636               	rlcf	??_delay_queue_refresh+1,f,c
 10873  002374  C033  F037         	movff	delay_queue_refresh@delay_queue_handler,??_delay_queue_refresh+2
 10874  002378  C034  F038         	movff	delay_queue_refresh@delay_queue_handler+1,??_delay_queue_refresh+3
 10875  00237C  5035               	movf	??_delay_queue_refresh,w,c
 10876  00237E  2637               	addwf	??_delay_queue_refresh+2,f,c
 10877  002380  5036               	movf	??_delay_queue_refresh+1,w,c
 10878  002382  2238               	addwfc	??_delay_queue_refresh+3,f,c
 10879  002384  0E04               	movlw	4
 10880  002386  2437               	addwf	??_delay_queue_refresh+2,w,c
 10881  002388  6ED9               	movwf	fsr2l,c
 10882  00238A  0E00               	movlw	0
 10883  00238C  2038               	addwfc	??_delay_queue_refresh+3,w,c
 10884  00238E  6EDA               	movwf	fsr2h,c
 10885  002390  06DE               	decf	postinc2,f,c
 10886  002392  0E00               	movlw	0
 10887  002394  5ADE               	subwfb	postinc2,f,c
 10888  002396  5ADE               	subwfb	postinc2,f,c
 10889  002398  5ADE               	subwfb	postinc2,f,c
 10890                           
 10891                           ;delay.c: 41: if (delay_queue_handler->delay_QUEUE[i].task_delay_remaning <= 0)
 10892  00239A  C03D  F035         	movff	delay_queue_refresh@i,??_delay_queue_refresh
 10893  00239E  C03E  F036         	movff	delay_queue_refresh@i+1,??_delay_queue_refresh+1
 10894  0023A2  90D8               	bcf	status,0,c
 10895  0023A4  3635               	rlcf	??_delay_queue_refresh,f,c
 10896  0023A6  3636               	rlcf	??_delay_queue_refresh+1,f,c
 10897  0023A8  90D8               	bcf	status,0,c
 10898  0023AA  3635               	rlcf	??_delay_queue_refresh,f,c
 10899  0023AC  3636               	rlcf	??_delay_queue_refresh+1,f,c
 10900  0023AE  90D8               	bcf	status,0,c
 10901  0023B0  3635               	rlcf	??_delay_queue_refresh,f,c
 10902  0023B2  3636               	rlcf	??_delay_queue_refresh+1,f,c
 10903  0023B4  C033  F037         	movff	delay_queue_refresh@delay_queue_handler,??_delay_queue_refresh+2
 10904  0023B8  C034  F038         	movff	delay_queue_refresh@delay_queue_handler+1,??_delay_queue_refresh+3
 10905  0023BC  5035               	movf	??_delay_queue_refresh,w,c
 10906  0023BE  2637               	addwf	??_delay_queue_refresh+2,f,c
 10907  0023C0  5036               	movf	??_delay_queue_refresh+1,w,c
 10908  0023C2  2238               	addwfc	??_delay_queue_refresh+3,f,c
 10909  0023C4  0E04               	movlw	4
 10910  0023C6  2437               	addwf	??_delay_queue_refresh+2,w,c
 10911  0023C8  6ED9               	movwf	fsr2l,c
 10912  0023CA  0E00               	movlw	0
 10913  0023CC  2038               	addwfc	??_delay_queue_refresh+3,w,c
 10914  0023CE  6EDA               	movwf	fsr2h,c
 10915  0023D0  50DE               	movf	postinc2,w,c
 10916  0023D2  10DE               	iorwf	postinc2,w,c
 10917  0023D4  10DE               	iorwf	postinc2,w,c
 10918  0023D6  10DE               	iorwf	postinc2,w,c
 10919  0023D8  A4D8               	btfss	status,2,c
 10920  0023DA  D00F               	goto	i2l33
 10921                           
 10922                           ;delay.c: 42: delay_queue_remove(delay_queue_handler, i);
 10923  0023DC  C033  F029         	movff	delay_queue_refresh@delay_queue_handler,delay_queue_remove@delay_queue_handler
 10924  0023E0  C034  F02A         	movff	delay_queue_refresh@delay_queue_handler+1,delay_queue_remove@delay_queue_handler+
      +                          1
 10925  0023E4  C03D  F02B         	movff	delay_queue_refresh@i,delay_queue_remove@task_pos
 10926  0023E8  C03E  F02C         	movff	delay_queue_refresh@i+1,delay_queue_remove@task_pos+1
 10927  0023EC  0E00               	movlw	0
 10928  0023EE  BE2C               	btfsc	delay_queue_remove@task_pos+1,7,c
 10929  0023F0  0EFF               	movlw	-1
 10930  0023F2  6E2D               	movwf	delay_queue_remove@task_pos+2,c
 10931  0023F4  6E2E               	movwf	delay_queue_remove@task_pos+3,c
 10932  0023F6  EC8D  F014         	call	_delay_queue_remove	;wreg free
 10933  0023FA                     i2l33:
 10934  0023FA  4A3D               	infsnz	delay_queue_refresh@i,f,c
 10935  0023FC  2A3E               	incf	delay_queue_refresh@i+1,f,c
 10936  0023FE  BE3E               	btfsc	delay_queue_refresh@i+1,7,c
 10937  002400  D793               	goto	i2l30
 10938  002402  503E               	movf	delay_queue_refresh@i+1,w,c
 10939  002404  E101               	bnz	i2l34
 10940  002406  D78C               	goto	L9
 10941  002408                     i2l31:
 10942  002408                     i2l34:
 10943  002408  0012               	return		;funcret
 10944  00240A                     __end_of_delay_queue_refresh:
 10945                           	opt stack 0
 10946                           tosu	equ	0xFFF
 10947                           tosh	equ	0xFFE
 10948                           tosl	equ	0xFFD
 10949                           stkptr	equ	0xFFC
 10950                           tblptru	equ	0xFF8
 10951                           tblptrh	equ	0xFF7
 10952                           tblptrl	equ	0xFF6
 10953                           tablat	equ	0xFF5
 10954                           prodh	equ	0xFF4
 10955                           prodl	equ	0xFF3
 10956                           intcon	equ	0xFF2
 10957                           indf0	equ	0xFEF
 10958                           postinc0	equ	0xFEE
 10959                           plusw0	equ	0xFEB
 10960                           fsr0h	equ	0xFEA
 10961                           fsr0l	equ	0xFE9
 10962                           wreg	equ	0xFE8
 10963                           postinc1	equ	0xFE6
 10964                           postdec1	equ	0xFE5
 10965                           plusw1	equ	0xFE3
 10966                           fsr1h	equ	0xFE2
 10967                           fsr1l	equ	0xFE1
 10968                           bsr	equ	0xFE0
 10969                           indf2	equ	0xFDF
 10970                           postinc2	equ	0xFDE
 10971                           postdec2	equ	0xFDD
 10972                           plusw2	equ	0xFDB
 10973                           fsr2h	equ	0xFDA
 10974                           fsr2l	equ	0xFD9
 10975                           status	equ	0xFD8
 10976                           
 10977 ;; *************** function _delay_queue_remove *****************
 10978 ;; Defined at:
 10979 ;;		line 30 in file "delay.c"
 10980 ;; Parameters:    Size  Location     Type
 10981 ;;  delay_queue_    2    0[COMRAM] PTR struct queue_delay
 10982 ;;		 -> Q_DELAY(36), 
 10983 ;;  task_pos        4    2[COMRAM] unsigned long 
 10984 ;; Auto vars:     Size  Location     Type
 10985 ;;		None
 10986 ;; Return value:  Size  Location     Type
 10987 ;;                  1    wreg      void 
 10988 ;; Registers used:
 10989 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
 10990 ;; Tracked objects:
 10991 ;;		On entry : 0/0
 10992 ;;		On exit  : 0/0
 10993 ;;		Unchanged: 0/0
 10994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10995 ;;      Params:         6       0       0       0       0       0       0
 10996 ;;      Locals:         0       0       0       0       0       0       0
 10997 ;;      Temps:          4       0       0       0       0       0       0
 10998 ;;      Totals:        10       0       0       0       0       0       0
 10999 ;;Total ram usage:       10 bytes
 11000 ;; Hardware stack levels used:    1
 11001 ;; Hardware stack levels required when called:    1
 11002 ;; This function calls:
 11003 ;;		___wmul
 11004 ;; This function is called by:
 11005 ;;		_delay_queue_refresh
 11006 ;; This function uses a non-reentrant model
 11007 ;;
 11008                           
 11009                           	psect	text55
 11010  00291A                     __ptext55:
 11011                           	opt stack 0
 11012  00291A                     _delay_queue_remove:
 11013                           	opt stack 19
 11014                           
 11015                           ;delay.c: 31: F_APTOS.FILA_APTOS[delay_queue_handler->delay_QUEUE[task_pos].task_pos_rea
      +                          dy_queue].task_STATE = READY;
 11016                           
 11017                           ;incstack = 0
 11018  00291A  0E70               	movlw	112
 11019  00291C  6EE6               	movwf	postinc1,c
 11020  00291E  0E00               	movlw	0
 11021  002920  6EE6               	movwf	postinc1,c
 11022  002922  C02B  F02F         	movff	delay_queue_remove@task_pos,??_delay_queue_remove
 11023  002926  C02C  F030         	movff	delay_queue_remove@task_pos+1,??_delay_queue_remove+1
 11024  00292A  90D8               	bcf	status,0,c
 11025  00292C  362F               	rlcf	??_delay_queue_remove,f,c
 11026  00292E  3630               	rlcf	??_delay_queue_remove+1,f,c
 11027  002930  90D8               	bcf	status,0,c
 11028  002932  362F               	rlcf	??_delay_queue_remove,f,c
 11029  002934  3630               	rlcf	??_delay_queue_remove+1,f,c
 11030  002936  90D8               	bcf	status,0,c
 11031  002938  362F               	rlcf	??_delay_queue_remove,f,c
 11032  00293A  3630               	rlcf	??_delay_queue_remove+1,f,c
 11033  00293C  502F               	movf	??_delay_queue_remove,w,c
 11034  00293E  2429               	addwf	delay_queue_remove@delay_queue_handler,w,c
 11035  002940  6ED9               	movwf	fsr2l,c
 11036  002942  5030               	movf	??_delay_queue_remove+1,w,c
 11037  002944  202A               	addwfc	delay_queue_remove@delay_queue_handler+1,w,c
 11038  002946  6EDA               	movwf	fsr2h,c
 11039  002948  CFDE F031          	movff	postinc2,??_delay_queue_remove+2
 11040  00294C  CFDD F032          	movff	postdec2,??_delay_queue_remove+3
 11041  002950  C031  FFE6         	movff	??_delay_queue_remove+2,postinc1
 11042  002954  C032  FFE6         	movff	??_delay_queue_remove+3,postinc1
 11043  002958  EC10  F016         	call	___wmul	;wreg free
 11044  00295C  0E08               	movlw	8
 11045  00295E  264F               	addwf	btemp,f,c
 11046  002960  0E00               	movlw	0
 11047  002962  2250               	addwfc	btemp+1,f,c
 11048  002964  0E21               	movlw	low _F_APTOS
 11049  002966  244F               	addwf	btemp,w,c
 11050  002968  6ED9               	movwf	fsr2l,c
 11051  00296A  0E01               	movlw	high _F_APTOS
 11052  00296C  2050               	addwfc	btemp+1,w,c
 11053  00296E  6EDA               	movwf	fsr2h,c
 11054  002970  0E00               	movlw	0
 11055  002972  6EDF               	movwf	indf2,c
 11056                           
 11057                           ;delay.c: 32: delay_queue_handler->delay_QUEUE[task_pos].task_pos_ready_queue = 0;
 11058  002974  C02B  F02F         	movff	delay_queue_remove@task_pos,??_delay_queue_remove
 11059  002978  C02C  F030         	movff	delay_queue_remove@task_pos+1,??_delay_queue_remove+1
 11060  00297C  90D8               	bcf	status,0,c
 11061  00297E  362F               	rlcf	??_delay_queue_remove,f,c
 11062  002980  3630               	rlcf	??_delay_queue_remove+1,f,c
 11063  002982  90D8               	bcf	status,0,c
 11064  002984  362F               	rlcf	??_delay_queue_remove,f,c
 11065  002986  3630               	rlcf	??_delay_queue_remove+1,f,c
 11066  002988  90D8               	bcf	status,0,c
 11067  00298A  362F               	rlcf	??_delay_queue_remove,f,c
 11068  00298C  3630               	rlcf	??_delay_queue_remove+1,f,c
 11069  00298E  502F               	movf	??_delay_queue_remove,w,c
 11070  002990  2429               	addwf	delay_queue_remove@delay_queue_handler,w,c
 11071  002992  6ED9               	movwf	fsr2l,c
 11072  002994  5030               	movf	??_delay_queue_remove+1,w,c
 11073  002996  202A               	addwfc	delay_queue_remove@delay_queue_handler+1,w,c
 11074  002998  6EDA               	movwf	fsr2h,c
 11075  00299A  6ADE               	clrf	postinc2,c
 11076  00299C  6ADE               	clrf	postinc2,c
 11077  00299E  6ADE               	clrf	postinc2,c
 11078  0029A0  6ADD               	clrf	postdec2,c
 11079                           
 11080                           ;delay.c: 33: delay_queue_handler->delay_queue_size--;
 11081  0029A2  EE20 F020          	lfsr	2,32
 11082  0029A6  5029               	movf	delay_queue_remove@delay_queue_handler,w,c
 11083  0029A8  26D9               	addwf	fsr2l,f,c
 11084  0029AA  502A               	movf	delay_queue_remove@delay_queue_handler+1,w,c
 11085  0029AC  22DA               	addwfc	fsr2h,f,c
 11086  0029AE  06DE               	decf	postinc2,f,c
 11087  0029B0  0E00               	movlw	0
 11088  0029B2  5ADE               	subwfb	postinc2,f,c
 11089  0029B4  5ADE               	subwfb	postinc2,f,c
 11090  0029B6  5ADE               	subwfb	postinc2,f,c
 11091  0029B8  0012               	return		;funcret
 11092  0029BA                     __end_of_delay_queue_remove:
 11093                           	opt stack 0
 11094                           tosu	equ	0xFFF
 11095                           tosh	equ	0xFFE
 11096                           tosl	equ	0xFFD
 11097                           stkptr	equ	0xFFC
 11098                           tblptru	equ	0xFF8
 11099                           tblptrh	equ	0xFF7
 11100                           tblptrl	equ	0xFF6
 11101                           tablat	equ	0xFF5
 11102                           prodh	equ	0xFF4
 11103                           prodl	equ	0xFF3
 11104                           intcon	equ	0xFF2
 11105                           indf0	equ	0xFEF
 11106                           postinc0	equ	0xFEE
 11107                           plusw0	equ	0xFEB
 11108                           fsr0h	equ	0xFEA
 11109                           fsr0l	equ	0xFE9
 11110                           wreg	equ	0xFE8
 11111                           postinc1	equ	0xFE6
 11112                           postdec1	equ	0xFE5
 11113                           plusw1	equ	0xFE3
 11114                           fsr1h	equ	0xFE2
 11115                           fsr1l	equ	0xFE1
 11116                           bsr	equ	0xFE0
 11117                           indf2	equ	0xFDF
 11118                           postinc2	equ	0xFDE
 11119                           postdec2	equ	0xFDD
 11120                           plusw2	equ	0xFDB
 11121                           fsr2h	equ	0xFDA
 11122                           fsr2l	equ	0xFD9
 11123                           status	equ	0xFD8
 11124                           tosu	equ	0xFFF
 11125                           tosh	equ	0xFFE
 11126                           tosl	equ	0xFFD
 11127                           stkptr	equ	0xFFC
 11128                           tblptru	equ	0xFF8
 11129                           tblptrh	equ	0xFF7
 11130                           tblptrl	equ	0xFF6
 11131                           tablat	equ	0xFF5
 11132                           prodh	equ	0xFF4
 11133                           prodl	equ	0xFF3
 11134                           intcon	equ	0xFF2
 11135                           indf0	equ	0xFEF
 11136                           postinc0	equ	0xFEE
 11137                           plusw0	equ	0xFEB
 11138                           fsr0h	equ	0xFEA
 11139                           fsr0l	equ	0xFE9
 11140                           wreg	equ	0xFE8
 11141                           postinc1	equ	0xFE6
 11142                           postdec1	equ	0xFE5
 11143                           plusw1	equ	0xFE3
 11144                           fsr1h	equ	0xFE2
 11145                           fsr1l	equ	0xFE1
 11146                           bsr	equ	0xFE0
 11147                           indf2	equ	0xFDF
 11148                           postinc2	equ	0xFDE
 11149                           postdec2	equ	0xFDD
 11150                           plusw2	equ	0xFDB
 11151                           fsr2h	equ	0xFDA
 11152                           fsr2l	equ	0xFD9
 11153                           status	equ	0xFD8
 11154                           
 11155                           	psect	text56
 11156  000000                     __ptext56:
 11157                           	opt stack 0
 11158                           tosu	equ	0xFFF
 11159                           tosh	equ	0xFFE
 11160                           tosl	equ	0xFFD
 11161                           stkptr	equ	0xFFC
 11162                           tblptru	equ	0xFF8
 11163                           tblptrh	equ	0xFF7
 11164                           tblptrl	equ	0xFF6
 11165                           tablat	equ	0xFF5
 11166                           prodh	equ	0xFF4
 11167                           prodl	equ	0xFF3
 11168                           intcon	equ	0xFF2
 11169                           indf0	equ	0xFEF
 11170                           postinc0	equ	0xFEE
 11171                           plusw0	equ	0xFEB
 11172                           fsr0h	equ	0xFEA
 11173                           fsr0l	equ	0xFE9
 11174                           wreg	equ	0xFE8
 11175                           postinc1	equ	0xFE6
 11176                           postdec1	equ	0xFE5
 11177                           plusw1	equ	0xFE3
 11178                           fsr1h	equ	0xFE2
 11179                           fsr1l	equ	0xFE1
 11180                           bsr	equ	0xFE0
 11181                           indf2	equ	0xFDF
 11182                           postinc2	equ	0xFDE
 11183                           postdec2	equ	0xFDD
 11184                           plusw2	equ	0xFDB
 11185                           fsr2h	equ	0xFDA
 11186                           fsr2l	equ	0xFD9
 11187                           status	equ	0xFD8
 11188                           
 11189                           	psect	rparam
 11190  0000                     tosu	equ	0xFFF
 11191                           tosh	equ	0xFFE
 11192                           tosl	equ	0xFFD
 11193                           stkptr	equ	0xFFC
 11194                           tblptru	equ	0xFF8
 11195                           tblptrh	equ	0xFF7
 11196                           tblptrl	equ	0xFF6
 11197                           tablat	equ	0xFF5
 11198                           prodh	equ	0xFF4
 11199                           prodl	equ	0xFF3
 11200                           intcon	equ	0xFF2
 11201                           indf0	equ	0xFEF
 11202                           postinc0	equ	0xFEE
 11203                           plusw0	equ	0xFEB
 11204                           fsr0h	equ	0xFEA
 11205                           fsr0l	equ	0xFE9
 11206                           wreg	equ	0xFE8
 11207                           postinc1	equ	0xFE6
 11208                           postdec1	equ	0xFE5
 11209                           plusw1	equ	0xFE3
 11210                           fsr1h	equ	0xFE2
 11211                           fsr1l	equ	0xFE1
 11212                           bsr	equ	0xFE0
 11213                           indf2	equ	0xFDF
 11214                           postinc2	equ	0xFDE
 11215                           postdec2	equ	0xFDD
 11216                           plusw2	equ	0xFDB
 11217                           fsr2h	equ	0xFDA
 11218                           fsr2l	equ	0xFD9
 11219                           status	equ	0xFD8
 11220                           
 11221                           	psect	temp
 11222  00004F                     btemp:
 11223                           	opt stack 0
 11224  00004F                     	ds	12
 11225  0000                     wtemp0	set	btemp
 11226  0000                     wtemp1	set	btemp+2
 11227  0000                     wtemp2	set	btemp+4
 11228  0000                     wtemp3	set	btemp+6
 11229  0000                     wtemp4	set	btemp+8
 11230  0000                     wtemp5	set	btemp+10
 11231  0000                     wtemp6	set	btemp+1
 11232  0000                     ttemp0	set	btemp
 11233  0000                     ttemp1	set	btemp+3
 11234  0000                     ttemp2	set	btemp+6
 11235  0000                     ttemp3	set	btemp+9
 11236  0000                     ltemp0	set	btemp
 11237  0000                     ltemp1	set	btemp+4
 11238  0000                     ltemp2	set	btemp+8
 11239                           tosu	equ	0xFFF
 11240                           tosh	equ	0xFFE
 11241                           tosl	equ	0xFFD
 11242                           stkptr	equ	0xFFC
 11243                           tblptru	equ	0xFF8
 11244                           tblptrh	equ	0xFF7
 11245                           tblptrl	equ	0xFF6
 11246                           tablat	equ	0xFF5
 11247                           prodh	equ	0xFF4
 11248                           prodl	equ	0xFF3
 11249                           intcon	equ	0xFF2
 11250                           indf0	equ	0xFEF
 11251                           postinc0	equ	0xFEE
 11252                           plusw0	equ	0xFEB
 11253                           fsr0h	equ	0xFEA
 11254                           fsr0l	equ	0xFE9
 11255                           wreg	equ	0xFE8
 11256                           postinc1	equ	0xFE6
 11257                           postdec1	equ	0xFE5
 11258                           plusw1	equ	0xFE3
 11259                           fsr1h	equ	0xFE2
 11260                           fsr1l	equ	0xFE1
 11261                           bsr	equ	0xFE0
 11262                           indf2	equ	0xFDF
 11263                           postinc2	equ	0xFDE
 11264                           postdec2	equ	0xFDD
 11265                           plusw2	equ	0xFDB
 11266                           fsr2h	equ	0xFDA
 11267                           fsr2l	equ	0xFD9
 11268                           status	equ	0xFD8


Data Sizes:
    Strings     25
    Constant    0
    Data        1
    BSS         1208
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          115     38      79
    BANK0           128     25     113
    BANK1           256     33      33
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sp_S55tcb$task_PTR	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__F_APTOS.FILA_APTOS.task_PTR	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp_nojoTaskCreate@task_PTR	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> trunc@expon(UNKNOWN), 

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_4(CODE[10]), STR_3(CODE[4]), STR_2(CODE[3]), STR_1(CODE[8]), 

    sp__limpeza	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__controle	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__ph	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__cloro	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    _SRAMmerge@pSegA	PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    _SRAMmerge@pSegB	PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMInitHeap@pHeap	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMfree@pSRAM	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 

    SRAMalloc@temp	PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMalloc@pHeap	PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    sem_post@handler	PTR struct sem size(2) Largest target is 26
		 -> s_2(BANK0[26]), s_1(BANK0[26]), 

    sem_wait@handler	PTR struct sem size(2) Largest target is 26
		 -> s_2(BANK0[26]), s_1(BANK0[26]), 

    sem_create@handler	PTR struct sem size(2) Largest target is 26
		 -> s_2(BANK0[26]), s_1(BANK0[26]), 

    queue_remove@queue_handler	PTR struct queue size(2) Largest target is 26
		 -> s_2(BANK0[26]), s_1(BANK0[26]), 

    queue_insert@queue_handler	PTR struct queue size(2) Largest target is 26
		 -> s_2(BANK0[26]), s_1(BANK0[26]), 

    queue_create@queue_handler	PTR struct queue size(2) Largest target is 26
		 -> s_2(BANK0[26]), s_1(BANK0[26]), 

    pipe_destroy@pipe_handler.p_msg_queue	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 

    pipe_destroy@pipe_handler	PTR struct pipe size(2) Largest target is 23
		 -> mensagens(COMRAM[22]), 

    pipe_write@pipe_handler.p_msg_queue	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 

    pipe_write@pipe_handler	PTR struct pipe size(2) Largest target is 23
		 -> mensagens(COMRAM[22]), 

    pipe_read@msg	PTR unsigned char  size(2) Largest target is 1
		 -> controle@msg(BANK0[1]), 

    pipe_read@pipe_handler.p_msg_queue	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 

    pipe_read@pipe_handler	PTR struct pipe size(2) Largest target is 23
		 -> mensagens(COMRAM[22]), 

    sp__SRAMalloc	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 

    pipe_create@pipe_handler.p_msg_queue	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 

    pipe_create@pipe_handler	PTR struct pipe size(2) Largest target is 23
		 -> mensagens(COMRAM[22]), 

    S265pipe$p_msg_queue	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 

    mensagens.p_msg_queue	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 

    sp__nojoTaskIdle	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    nojoTaskCreate@task_PTR	PTR FTN()PTR void  size(2) Largest target is 3
		 -> controle(), ph(), cloro(), limpeza(), 

    delay_queue_refresh@delay_queue_handler	PTR struct queue_delay size(2) Largest target is 36
		 -> Q_DELAY(BANK0[36]), 

    S55tcb$task_PTR	PTR FTN()PTR void  size(2) Largest target is 3
		 -> controle(), ph(), cloro(), limpeza(), 
		 -> nojoTaskIdle(), 

    F_APTOS.FILA_APTOS.task_PTR	PTR FTN()PTR void  size(2) Largest target is 3
		 -> controle(), ph(), cloro(), limpeza(), 
		 -> nojoTaskIdle(), 

    delay_queue_remove@delay_queue_handler	PTR struct queue_delay size(2) Largest target is 36
		 -> Q_DELAY(BANK0[36]), 

    delay_queue_insert@delay_queue_handler	PTR struct queue_delay size(2) Largest target is 36
		 -> Q_DELAY(BANK0[36]), 

    delay_queue_create@delay_queue_handler	PTR struct queue_delay size(2) Largest target is 36
		 -> Q_DELAY(BANK0[36]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _cloro in COMRAM

    None.

Critical Paths under _ph in COMRAM

    None.

Critical Paths under _controle in COMRAM

    _pipe_destroy->_SRAMfree

Critical Paths under _limpeza in COMRAM

    None.

Critical Paths under _timer_ISR in COMRAM

    _timer_ISR->_delay_queue_refresh
    _delay_queue_refresh->_delay_queue_remove

Critical Paths under _main in BANK0

    None.

Critical Paths under _cloro in BANK0

    None.

Critical Paths under _ph in BANK0

    None.

Critical Paths under _controle in BANK0

    _controle->_pipe_read

Critical Paths under _limpeza in BANK0

    _pipe_create->_SRAMalloc
    _SRAMalloc->__SRAMmerge
    _nojoDelay->_delay_queue_insert

Critical Paths under _timer_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_nojoTaskCreate
    _sem_create->_queue_create
    _nojoStart->_delay_queue_create

Critical Paths under _cloro in BANK1

    None.

Critical Paths under _ph in BANK1

    None.

Critical Paths under _controle in BANK1

    None.

Critical Paths under _limpeza in BANK1

    _limpeza->_pipe_create
    _pipe_create->_SRAMalloc
    _nojoDelay->_delay_queue_insert

Critical Paths under _timer_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _cloro in BANK2

    None.

Critical Paths under _ph in BANK2

    None.

Critical Paths under _controle in BANK2

    None.

Critical Paths under _limpeza in BANK2

    None.

Critical Paths under _timer_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _cloro in BANK3

    None.

Critical Paths under _ph in BANK3

    None.

Critical Paths under _controle in BANK3

    None.

Critical Paths under _limpeza in BANK3

    None.

Critical Paths under _timer_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _cloro in BANK4

    None.

Critical Paths under _ph in BANK4

    None.

Critical Paths under _controle in BANK4

    None.

Critical Paths under _limpeza in BANK4

    None.

Critical Paths under _timer_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _cloro in BANK5

    None.

Critical Paths under _ph in BANK5

    None.

Critical Paths under _controle in BANK5

    None.

Critical Paths under _limpeza in BANK5

    None.

Critical Paths under _timer_ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5169
                            _ADCInit
                          _LCDGotoXY
                            _LCDInit
                     _LCDWriteString
                           _PORTInit
                       _SRAMInitHeap
                      _nojoScheduler
                          _nojoStart
                     _nojoTaskCreate
                         _sem_create
                         _setupTimer
 ---------------------------------------------------------------------------------
 (1) _setupTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sem_create                                           6     0      6     605
                                             19 BANK1      6     0      6
                       _queue_create
 ---------------------------------------------------------------------------------
 (2) _queue_create                                         2     0      2     152
                                             17 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _nojoTaskCreate                                      16     6     10    2382
                                             17 BANK1     16     6     10
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4    1116
 ---------------------------------------------------------------------------------
 (1) _nojoStart                                            0     0      0     251
                 _delay_queue_create
 ---------------------------------------------------------------------------------
 (2) _delay_queue_create                                   6     4      2     251
                                             17 BANK1      6     4      2
 ---------------------------------------------------------------------------------
 (7) _nojoScheduler                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SRAMInitHeap                                         4     4      0     229
                                             17 BANK1      4     4      0
 ---------------------------------------------------------------------------------
 (1) _PORTInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _LCDWriteString                                       2     0      2     538
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              2     2      0     566
                                             17 BANK1      2     2      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (5) _LCDGotoXY                                            2     0      2     598
                            _LCDByte
 ---------------------------------------------------------------------------------
 (6) _LCDByte                                              5     3      2     421
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (7) _LCDBusyLoop                                          3     3      0     114
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _cloro                                                0     0      0   18022
                            _ADCRead
                          _LCDGotoXY
                        _LCDWriteInt
                     _LCDWriteString
                            ___ftmul
                            ___fttol
                           ___lwtoft
                              _round
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (5) _sem_wait                                             2     0      2    4182
                             ___wmul
                     _nojoDispatcher
                       _queue_insert
 ---------------------------------------------------------------------------------
 (6) _queue_insert                                        10     4      6     157
 ---------------------------------------------------------------------------------
 (5) _sem_post                                             2     0      2    4170
                             ___wmul
                     _nojoDispatcher
                       _queue_remove
 ---------------------------------------------------------------------------------
 (6) _queue_remove                                         6     4      2     145
 ---------------------------------------------------------------------------------
 (10) _nojoDispatcher                                      5     4      1    2777
                       _RR_scheduler
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) _RR_scheduler                                       12    12      0    1565
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4    1116
 ---------------------------------------------------------------------------------
 (12) ___llmod                                             9     1      8     310
 ---------------------------------------------------------------------------------
 (5) _round                                                6     3      3    4881
                            ___ftadd
                            ___ftsub
                              _trunc
 ---------------------------------------------------------------------------------
 (6) _trunc                                                8     5      3    1484
                           ___altoft
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _frexp                                                5     0      5     232
 ---------------------------------------------------------------------------------
 (7) ___fttol                                              9     6      3     288
 ---------------------------------------------------------------------------------
 (7) ___altoft                                             6     2      4     777
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    1698
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                              9     3      6    1563
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lwtoft                                             2     0      2     673
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             12     6      6    1027
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             5     0      5     627
 ---------------------------------------------------------------------------------
 (5) _LCDWriteString                                       2     0      2     538
                            _LCDByte
 ---------------------------------------------------------------------------------
 (5) _LCDWriteInt                                         13     9      4    1621
                            _LCDByte
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     320
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     324
 ---------------------------------------------------------------------------------
 (5) _LCDGotoXY                                            2     0      2     598
                            _LCDByte
 ---------------------------------------------------------------------------------
 (6) _LCDByte                                              5     3      2     421
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (7) _LCDBusyLoop                                          3     3      0     114
 ---------------------------------------------------------------------------------
 (5) _ADCRead                                              1     0      1      44
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ph                                                   0     0      0   18022
                            _ADCRead
                          _LCDGotoXY
                        _LCDWriteInt
                     _LCDWriteString
                            ___ftmul
                            ___fttol
                           ___lwtoft
                              _round
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (5) _sem_wait                                             2     0      2    4182
                             ___wmul
                     _nojoDispatcher
                       _queue_insert
 ---------------------------------------------------------------------------------
 (6) _queue_insert                                        10     4      6     157
 ---------------------------------------------------------------------------------
 (5) _sem_post                                             2     0      2    4170
                             ___wmul
                     _nojoDispatcher
                       _queue_remove
 ---------------------------------------------------------------------------------
 (6) _queue_remove                                         6     4      2     145
 ---------------------------------------------------------------------------------
 (10) _nojoDispatcher                                      5     4      1    2777
                       _RR_scheduler
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) _RR_scheduler                                       12    12      0    1565
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4    1116
 ---------------------------------------------------------------------------------
 (12) ___llmod                                             9     1      8     310
 ---------------------------------------------------------------------------------
 (5) _round                                                6     3      3    4881
                            ___ftadd
                            ___ftsub
                              _trunc
 ---------------------------------------------------------------------------------
 (6) _trunc                                                8     5      3    1484
                           ___altoft
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _frexp                                                5     0      5     232
 ---------------------------------------------------------------------------------
 (7) ___fttol                                              9     6      3     288
 ---------------------------------------------------------------------------------
 (7) ___altoft                                             6     2      4     777
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    1698
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                              9     3      6    1563
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lwtoft                                             2     0      2     673
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             12     6      6    1027
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             5     0      5     627
 ---------------------------------------------------------------------------------
 (5) _LCDWriteString                                       2     0      2     538
                            _LCDByte
 ---------------------------------------------------------------------------------
 (5) _LCDWriteInt                                         13     9      4    1621
                            _LCDByte
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     320
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     324
 ---------------------------------------------------------------------------------
 (5) _LCDGotoXY                                            2     0      2     598
                            _LCDByte
 ---------------------------------------------------------------------------------
 (6) _LCDByte                                              5     3      2     421
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (7) _LCDBusyLoop                                          3     3      0     114
 ---------------------------------------------------------------------------------
 (5) _ADCRead                                              1     0      1      44
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _controle                                             1     1      0    5071
                                             12 BANK0      1     1      0
                       _pipe_destroy
                          _pipe_read
 ---------------------------------------------------------------------------------
 (5) _pipe_read                                           12     8      4    4730
                                              0 BANK0     12     8      4
                            ___llmod
                   _libera_processos
                     _nojoDispatcher
 ---------------------------------------------------------------------------------
 (10) _nojoDispatcher                                      5     4      1    2777
                       _RR_scheduler
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) _RR_scheduler                                       12    12      0    1565
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___llmod                                             9     1      8     310
 ---------------------------------------------------------------------------------
 (6) _libera_processos                                     2     2      0    1215
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4    1116
 ---------------------------------------------------------------------------------
 (5) _pipe_destroy                                         2     0      2     242
                                              0 BANK0      2     0      2
                           _SRAMfree
 ---------------------------------------------------------------------------------
 (6) _SRAMfree                                             2     0      2     121
                                             36 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _limpeza                                              0     0      0   19862
                          _LCDGotoXY
                     _LCDWriteString
                          _nojoDelay
                        _pipe_create
                         _pipe_write
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (5) _sem_wait                                             2     0      2    4182
                             ___wmul
                     _nojoDispatcher
                       _queue_insert
 ---------------------------------------------------------------------------------
 (6) _queue_insert                                        10     4      6     157
 ---------------------------------------------------------------------------------
 (5) _sem_post                                             2     0      2    4170
                             ___wmul
                     _nojoDispatcher
                       _queue_remove
 ---------------------------------------------------------------------------------
 (6) _queue_remove                                         6     4      2     145
 ---------------------------------------------------------------------------------
 (5) _pipe_write                                          11     8      3    4941
                                             13 BANK0     11     8      3
                            ___llmod
                   _libera_processos
                     _nojoDispatcher
 ---------------------------------------------------------------------------------
 (6) _libera_processos                                     2     2      0    1215
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _pipe_create                                         10     0     10    1918
                                              7 BANK1     10     0     10
                          _SRAMalloc
 ---------------------------------------------------------------------------------
 (6) _SRAMalloc                                           11     9      2    1369
                                             21 BANK0      4     2      2
                                              0 BANK1      7     7      0
                         __SRAMmerge
 ---------------------------------------------------------------------------------
 (7) __SRAMmerge                                           8     6      2     666
                                             13 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (5) _nojoDelay                                            4     0      4    3515
                                              6 BANK1      4     0      4
                 _delay_queue_insert
                     _nojoDispatcher
 ---------------------------------------------------------------------------------
 (10) _nojoDispatcher                                      5     4      1    2777
                       _RR_scheduler
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) _RR_scheduler                                       12    12      0    1565
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4    1116
 ---------------------------------------------------------------------------------
 (12) ___llmod                                             9     1      8     310
 ---------------------------------------------------------------------------------
 (6) _delay_queue_insert                                  18     8     10     617
                                             13 BANK0     12     2     10
                                              0 BANK1      6     6      0
                      _nojoScheduler
 ---------------------------------------------------------------------------------
 (7) _nojoScheduler                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _LCDWriteString                                       2     0      2     538
                            _LCDByte
 ---------------------------------------------------------------------------------
 (5) _LCDGotoXY                                            2     0      2     598
                            _LCDByte
 ---------------------------------------------------------------------------------
 (6) _LCDByte                                              5     3      2     421
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (7) _LCDBusyLoop                                          3     3      0     114
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _timer_ISR                                           14    14      0    4634
                                             22 COMRAM    14    14      0
                _delay_queue_refresh
                     _nojoDispatcher
                         _resetTimer
 ---------------------------------------------------------------------------------
 (10) _resetTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _nojoDispatcher                                      5     4      1    2777
                       _RR_scheduler
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) _RR_scheduler                                       12    12      0    1565
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___llmod                                             9     1      8     310
 ---------------------------------------------------------------------------------
 (10) _delay_queue_refresh                                12    10      2    1857
                                             10 COMRAM    12    10      2
                 _delay_queue_remove
 ---------------------------------------------------------------------------------
 (11) _delay_queue_remove                                 10     4      6    1451
                                              0 COMRAM    10     4      6
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4    1116
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _LCDGotoXY
     _LCDByte
       _LCDBusyLoop
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _LCDWriteString
     _LCDByte
       _LCDBusyLoop
   _PORTInit
   _SRAMInitHeap
   _nojoScheduler
   _nojoStart
     _delay_queue_create
   _nojoTaskCreate
     ___wmul
   _sem_create
     _queue_create
   _setupTimer

 _cloro (ROOT)
   _ADCRead
   _LCDGotoXY
     _LCDByte
       _LCDBusyLoop
   _LCDWriteInt
     _LCDByte
       _LCDBusyLoop
     ___awdiv
     ___awmod
   _LCDWriteString
     _LCDByte
       _LCDBusyLoop
   ___ftmul
     ___ftpack
   ___fttol
   ___lwtoft
     ___ftpack
   _round
     ___ftadd
       ___ftpack
     ___ftsub
       ___ftadd
         ___ftpack
     _trunc
       ___altoft
         ___ftpack
       ___fttol
       _frexp
   _sem_post
     ___wmul
     _nojoDispatcher
       _RR_scheduler
         ___llmod
         ___wmul
       ___wmul
     _queue_remove
   _sem_wait
     ___wmul
     _nojoDispatcher
       _RR_scheduler
         ___llmod
         ___wmul
       ___wmul
     _queue_insert

 _ph (ROOT)
   _ADCRead
   _LCDGotoXY
     _LCDByte
       _LCDBusyLoop
   _LCDWriteInt
     _LCDByte
       _LCDBusyLoop
     ___awdiv
     ___awmod
   _LCDWriteString
     _LCDByte
       _LCDBusyLoop
   ___ftmul
     ___ftpack
   ___fttol
   ___lwtoft
     ___ftpack
   _round
     ___ftadd
       ___ftpack
     ___ftsub
       ___ftadd
         ___ftpack
     _trunc
       ___altoft
         ___ftpack
       ___fttol
       _frexp
   _sem_post
     ___wmul
     _nojoDispatcher
       _RR_scheduler
         ___llmod
         ___wmul
       ___wmul
     _queue_remove
   _sem_wait
     ___wmul
     _nojoDispatcher
       _RR_scheduler
         ___llmod
         ___wmul
       ___wmul
     _queue_insert

 _controle (ROOT)
   _pipe_destroy
     _SRAMfree
   _pipe_read
     ___llmod
     _libera_processos
       ___wmul
     _nojoDispatcher
       _RR_scheduler
         ___llmod
         ___wmul
       ___wmul

 _limpeza (ROOT)
   _LCDGotoXY
     _LCDByte
       _LCDBusyLoop
   _LCDWriteString
     _LCDByte
       _LCDBusyLoop
   _nojoDelay
     _delay_queue_insert
       _nojoScheduler
     _nojoDispatcher
       _RR_scheduler
         ___llmod
         ___wmul
       ___wmul
   _pipe_create
     _SRAMalloc
       __SRAMmerge
   _pipe_write
     ___llmod
     _libera_processos
       ___wmul
     _nojoDispatcher
       _RR_scheduler
         ___llmod
         ___wmul
       ___wmul
   _sem_post
     ___wmul
     _nojoDispatcher
       _RR_scheduler
         ___llmod
         ___wmul
       ___wmul
     _queue_remove
   _sem_wait
     ___wmul
     _nojoDispatcher
       _RR_scheduler
         ___llmod
         ___wmul
       ___wmul
     _queue_insert

 _timer_ISR (ROOT)
   _delay_queue_refresh
     _delay_queue_remove
       ___wmul
   _nojoDispatcher
     _RR_scheduler
       ___llmod
       ___wmul
     ___wmul
   _resetTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     438      17       70.4%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     21      21       7       12.9%
BITBANK0            80      0       0       4        0.0%
BANK0               80     19      71       5       88.3%
BITCOMRAM           73      0       0       0        0.0%
COMRAM              73     26      4F       1       68.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0      2A       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E1      15        0.0%
DATA                 0      0     543       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Dec  8 10:35:16 2017

                                    BSR 000FE0                                      l15 2F88  
                                    l17 2FBC                                      l80 0986  
                          _queue_create 321E                                      _ph 27BE  
                          _queue_insert 1996               __size_of_libera_processos 00B8  
                         SRAMalloc@temp 0100                             __CFG_OSC$HS 000000  
                          _queue_remove 15FE                                     ?_ph 0029  
                                   l402 3118                                     l162 1992  
                                   l403 313C                                     l404 312E  
                                   l290 302C                                     l291 305A  
                                   l390 1B0E                                     l391 1B12  
                                   l383 1ADE                                     l375 3164  
                                   l711 1DF2                                     l384 1BA2  
                                   l392 1B26                                     l393 1B42  
                                   l385 1AEC                                     l394 1B46  
                                   l386 1AF4                                     l395 1B5A  
                                   l388 1BBC                                     l492 147E  
                                   l389 1AFC                                     l813 15F4  
                                   l750 0C72                                     l751 0C7C  
                                   l496 3206                                     l497 3218  
                                   l746 0E64                                     l792 12A4  
                                   l797 121A                                     _s_1 00BE  
                                   _s_2 00A4                                     _val 000E  
                       __end_of_ADCInit 32E2                         __end_of_ADCRead 3140  
                                   wreg 000FE8                          SRAMalloc@pHeap 0105  
                     SRAMInitHeap@pHeap 0111                                    ??_ph 004D  
                       __end_of_LCDByte 2A54                         __end_of_LCDInit 301C  
                     SRAMInitHeap@count 0113                            __CFG_WDT$OFF 000000  
                                  l1053 27B4                                    l2301 1D9E  
                                  l1079 2598                                    l3203 11A6  
                                  l2309 1DE0                                    l3215 1256  
                                  l3207 11E2                                    l2431 2B44  
                                  l2281 1D20                                    l2505 0DDE  
                                  l4043 1B0E                                    l2291 1D70  
                                  l2283 1D34                                    l4053 1B42  
                                  l2293 1D82                                    l2517 0E46  
                                  l2429 2B2E                                    l2279 1D0E  
                                  l2527 14D6                                    l2289 1D5C  
                                  l3185 111E                                    l2481 0D0E  
                                  l2449 0C14                                    l2553 1594  
                                  l2545 156A                                    l2491 0D76  
                                  l2459 0C60                                    l2555 15AA  
                                  l2547 1586                                    l3507 2498  
                                  l3621 261E                                    l2813 1852  
                                  l2805 1820                                    l2477 0CE2  
                                  l3615 25B0                                    l2479 0CF4  
                                  l2591 250A                                    l3447 2A64  
                                  l3519 2F78                                    l2833 215E  
                                  l2825 2136                                    l2489 0D64  
                                  l3633 29EE                                    l3619 2600  
                                  l2851 2200                                    l2843 21CE  
                                  l2499 0DB6                                    l3635 29F0  
                                  l3803 2EF2                                    l2829 2148  
                                  l3901 1364                                    l3557 226E  
                                  l2791 178E                                    l3911 13CE  
                                  l2767 30D8                                    l2863 2746  
                                  l3719 0B1A                                    l3807 2F34  
                                  l2785 1770                                    l3913 13EE  
                                  l2779 175A                                    l3923 1432  
                                  l3907 1384                                    l3499 242C  
                                  l3917 1400                                    l3909 13A2  
                                  l2869 276A                                    l3693 085A  
                                  l3689 06C2                                    l3875 2C18  
                                  l3895 12F0                                    l3887 2E64  
                                  _ADON 007E10                                    STR_1 060B  
                                  STR_2 0617                                    STR_3 0613  
                                  STR_4 0601                                    u3000 3038  
                                  _LATB 000F8A                                    _LATD 000F8C  
                                  u3297 2FCA                                    i1l21 1E20  
                                  i1l23 1EFA                                    i1l24 1F08  
                                  u2970 1008                                    i2l30 2328  
                                  i2l31 2408                                    u2975 0FFE  
                                  i2l33 23FA                                    i2l34 2408  
                                  _TMR0 000FD6                                    _TOSH 000FFE  
                                  _TOSL 000FFD                                    _TOSU 000FFF  
                         SRAMfree@pSRAM 004D                                    _tBSR 0011  
                                  _main 1868                      __size_of_LCDGotoXY 0030  
                                  fsr0h 000FEA                                    fsr1h 000FE2  
                                  indf0 000FEF                                    fsr2h 000FDA  
                                  fsr0l 000FE9                                    indf2 000FDF  
                                  fsr1l 000FE1                                    fsr2l 000FD9  
                                  btemp 004F                     delay_queue_create@i 0115  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 00C6                         SRAMalloc@nBytes 0104  
                          ___param_bank 000000                         SRAMalloc@segLen 0102  
                   delay_queue_insert@i 00EF                    __end_of_RR_scheduler 2310  
                                 STATUS 000FD8                                   ?_main 0029  
                       __end_of___awdiv 1868                                   _ADRES 000FC3  
                       __end_of___ftadd 0E6E                         __end_of___awmod 2216  
                          LCDInit@style 0112                         __end_of___ftmul 12AE  
                       __end_of___llmod 24E0                         __end_of___ftsub 3102  
                       __end_of___fttol 15FE                                   i1l200 1C0A  
                                 i1l201 1CE0                                   i1l300 28BC  
                                 i1l303 28CA                                   i1l304 290A  
                                 i1l280 20AA                                   i1l272 202A  
                                 i1l274 2034                                   i1l275 2062  
                                 i1l195 1F30                                   i1l276 20FE  
                                 i1l196 200E                                   i1l277 2084  
                                 i1l298 28B0                                   i2l441 0068  
                                 i2l442 008C                                   _PORTD 000F83  
                                 _TRISB 000F93                                   _TRISD 000F95  
                        _nojoDispatcher 061C                              __SRAMmerge 2870  
                                 _tWORK 0012                        __end_of_PORTInit 32B4  
                                 _cloro 265A                                   _medph 000A  
                                 _frexp 24E0                                   _errno 0006  
                      __end_of_SRAMfree 32C4                  pipe_write@pipe_handler 00E5  
                       __end_of_limpeza 1BCA                                   _state 005B  
                                 _round 2CB6                                   _trunc 270C  
                    __size_of_SRAMalloc 0104                                   tablat 000FF5  
                 __end_of_nojoScheduler 32D0                                   ltemp0 004F  
                                 ltemp1 0053                                   ltemp2 0057  
                                 plusw0 000FEB                                   plusw1 000FE3  
                                 plusw2 000FDB                             controle@msg 00E4  
                                 ttemp0 004F                                   ttemp1 0052  
                                 ttemp2 0055                                   ttemp3 0058  
                                 status 000FD8                                   wtemp0 004F  
                                 wtemp1 0051                                   wtemp2 0053  
                                 wtemp3 0055                                   wtemp4 0057  
                                 wtemp5 0059                                   wtemp6 0050  
                       __initialization 3078                            __end_of_main 1996  
                             ??_ADCInit 0111                    delay_queue_insert@ms 00EB  
                                ??_main 0121                       __end_of_LCDGotoXY 321E  
                         __activetblptr 000002                    delay_queue_refresh@i 003D  
                             ??_LCDInit 0111                  __end_of_nojoDispatcher 0B62  
                          ?_pipe_create 0107                                  ?_cloro 0029  
                                _ADCON0 000FC2                                  _ADCON2 000FC0  
                      __end_of___altoft 2B88                        __end_of___ftpack 1DFC  
                                _GODONE 007E11                                  u210_20 183E  
 delay_queue_insert@delay_queue_handler 00E5                          _nojoTaskCreate 0E6E  
                                u204_20 30D4                                  u220_20 275A  
                                i1l3851 1C0A                                  u215_20 2186  
                                u135_20 1D00                                  u151_20 0B8C  
                                u151_25 0B84                                  u208_20 17B6  
                                u152_20 0BBE                                  u152_25 0BB6  
                                u217_20 21EC                                  u161_20 0CA4  
                                u322_20 1B3E                                  u323_20 1B66  
                                u139_20 1D94                                  u155_20 0C04  
                                u307_20 2E12                                  u324_20 1B72  
                                u244_20 10C0                                  u172_20 14B4  
                                u308_21 12CA                                  u244_25 10B8  
                                u172_25 14AC                                  u165_20 0D26  
                                u149_20 2B28                                  u181_20 15DC  
                                u173_20 14CA                                  u246_20 10FA  
                                u158_20 0C4C                                  u174_20 14FA  
                                u246_25 10F2                                  u174_25 14F2  
                                u247_20 1110                                  u168_20 0D8E  
                                u273_20 2426                                  u274_20 2448  
                      __end_of___lwtoft 31EE                                  u179_20 15B2  
                                u187_20 255A                                  u187_26 255C  
                                u276_20 24BE                                  _TMR0ON 007EAF  
                                _STKPTR 000FFC                          _LCDWriteString 2EF0  
                                ___wmul 2C20                        __end_of_controle 317E  
                     __end_of_SRAMalloc 2116                    __size_of_LCDBusyLoop 009A  
                                clear_0 3092                                  clear_1 30A4  
                                clear_2 30B0                        _libera_processos 25A2  
                      __end_of_sem_wait 2C20                        __end_of_sem_post 2E6C  
                          __pdataCOMRAM 005B                               ??_limpeza 00F1  
                          __mediumconst 0000                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                           ?__SRAMmerge 00E5                  __end_of_nojoTaskCreate 1094  
 delay_queue_remove@delay_queue_handler 0029                    __size_of_LCDWriteInt 01DA  
                            __accesstop 0080                 __end_of__initialization 30B6  
                __end_of_LCDWriteString 2F5A                           ___rparam_used 000001  
                 __size_of_RR_scheduler 00FA  delay_queue_refresh@delay_queue_handler 0033  
                        __pcstackCOMRAM 0029                              ___inthi_sp 0592  
            delay_queue_insert@task_pos 00E7                           __end_of_cloro 270C  
                         __end_of_frexp 25A2                               ?_PORTInit 0029  
                         __end_of_round 2D4C                               ?_SRAMfree 004D  
                         __end_of_trunc 27BE                              __end_of_ph 2870  
                       __SRAMmerge@uSum 00E8                                 ??_cloro 004D  
                       ?_nojoTaskCreate 0111             __end_of_delay_queue_refresh 240A  
                            __pbssBANK0 0080                            _RR_scheduler 2216  
                     sem_create@handler 0113                           __uDynamicHeap 0359  
           __size_of_delay_queue_create 0064                           ?_pipe_destroy 00D8  
           __size_of_delay_queue_insert 010E                             nojoDelay@ms 0106  
           __size_of_delay_queue_remove 00A0                      __size_of_nojoDelay 003C  
                   __size_of__SRAMmerge 00AA                              ??_PORTInit 0111  
                    __size_of_pipe_read 0108                      __size_of_nojoStart 0084  
                            ??_SRAMfree 004F                                 _ADCInit 32DC  
                               _ADCRead 3102                      __size_of_timer_ISR 00BE  
                               _LCDByte 29BA                                 _LCDInit 2FBE  
            delay_queue_remove@task_pos 002B                                 _F_APTOS 0121  
                  __size_of_pipe_create 0094                                 _Q_DELAY 0080  
                             ?_controle 0029                          ??_pipe_destroy 004F  
                               __Hparam 0000                                 __Lparam 0000  
                nojoTaskCreate@task_PTR 0119                                 ___awdiv 1736  
                               ___ftadd 0B62                                 ___awmod 2116  
                       __size_of___wmul 0096                                 ___ftmul 1094  
                               ___llmod 240A                                 ___ftsub 30C0  
                               ___fttol 1488                                 _tSTATUS 0010  
                          __psmallconst 0600                                 __pcinit 3078  
                               __ramtop 0600                           ?_SRAMInitHeap 0029  
                               __ptext0 1868                                 __ptext1 328A  
                               __ptext2 324A                                 __ptext3 321E  
                               __ptext4 0E6E                                 __ptext5 2C20  
                               __ptext6 2E6C                                 __ptext7 2F5A  
                               __ptext8 32C4                                 __ptext9 301C  
                             _T0CONbits 000FD5                                 _limpeza 1AB0  
                             _LCDGotoXY 31EE                       __end_of_nojoDelay 31BA  
                  end_of_initialization 30B6                       __end_of_pipe_read 2012  
                            ??_controle 004F                       __end_of_nojoStart 2EF0  
                            _sem_create 324A                __end_of_libera_processos 265A  
                         __Lmediumconst 0000   delay_queue_create@delay_queue_handler 0111  
                            _pipe_write 1BCA                           pipe_create@id 0109  
                     __end_of_timer_ISR 00C6                              _resetTimer 32D0  
                               postdec1 000FE5                                 postdec2 000FDD  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                          ??_SRAMInitHeap 0111  
                             _PORTCbits 000F82                  __size_of_nojoScheduler 000C  
                            _setupTimer 328A                pipe_destroy@pipe_handler 00D8  
                             _SRAMalloc 2012                               _TRISCbits 000F94  
                          ??__SRAMmerge 00E7                           ?_queue_create 0111  
                    __end_of__SRAMmerge 291A                          __end_of___wmul 2CB6  
                         __pidataCOMRAM 32E2                           pipe_write@msg 00E7  
                     __size_of_PORTInit 0014                       __size_of_SRAMfree 0010  
                      ??_nojoTaskCreate 011B                              ?_SRAMalloc 00ED  
                  __end_of_pipe_destroy 328A                     start_initialization 3078  
                    SRAMalloc@segHeader 0103                        __SRAMmerge@pSegA 00E5  
                      __SRAMmerge@pSegB 00E9                        __SRAMmerge@uSegA 00EB  
                      __SRAMmerge@uSegB 00EC                             ?_sem_create 0113  
                         _nojoScheduler 32C4                             ?_pipe_write 00E5  
                           ?_resetTimer 0029                        nojoTaskCreate@id 0111  
                        ??_queue_create 0113                                ?_ADCInit 0029  
                           ?_setupTimer 0029                     __end_of_LCDBusyLoop 2AEE  
                     __size_of___altoft 009A                                ?_LCDInit 0029  
                     __size_of___ftpack 0118                             __pbssBIGRAM 0121  
                           __pbssCOMRAM 0001                       __size_of___lwtoft 0034  
                         __pcstackBANK0 00D8                           __pcstackBANK1 0100  
            __end_of_delay_queue_create 2FBE                        LCDWriteInt@F2966 0001  
                  __end_of_SRAMInitHeap 3078              __end_of_delay_queue_insert 1F0A  
                   __end_of_LCDWriteInt 1488                       __size_of_controle 003E  
            __end_of_delay_queue_remove 29BA            __size_of_delay_queue_refresh 00FA  
                             __pintcode 0008                       __size_of_sem_wait 0098  
                     __size_of_sem_post 008C                     __size_of_sem_create 0024  
                           __smallconst 0600                             ??_SRAMalloc 00EF  
                   __size_of_pipe_write 011A                                ?_limpeza 0029  
                         ??_pipe_create 00F1                     __size_of_resetTimer 000C  
                        __size_of_cloro 00B2                          __size_of_frexp 00C2  
                             _mensagens 0013                          __size_of_round 0096  
                        __size_of_trunc 00B2                             __size_of_ph 00B2  
                             _nojoDelay 317E                     __size_of_setupTimer 0016  
                             _pipe_read 1F0A                               _nojoStart 2E6C  
                              i1u280_20 1E1E                                i1u269_20 28B8  
                              i2u328_40 007C                             _LCDBusyLoop 2A54  
                             _timer_ISR 0008                            pipe_read@msg 00DA  
                              _PORTInit 32A0                                _SRAMfree 32B4  
                 __size_of_pipe_destroy 001C                        __size_of_ADCInit 0006  
                      __size_of_ADCRead 003E                        __size_of_LCDByte 009A  
                      __size_of_LCDInit 005E                   pipe_read@pipe_handler 00D8  
                           _LCDWriteInt 12AE                    __end_of_queue_create 324A  
                   __end_of_pipe_create 2DE0                    __end_of_queue_insert 1AB0  
                  __end_of_queue_remove 1736                 sem_create@initial_value 0115  
                            ?_nojoDelay 0106                              ?_pipe_read 00D8  
                            ?_nojoStart 0029                            _nojoTaskIdle 000000  
                              __Hrparam 0000                            _pipe_destroy 326E  
                              __Lrparam 0000                     nojoTaskCreate@prior 0115  
                            ?_timer_ISR 0029                        __size_of___awdiv 0132  
                      __size_of___ftadd 030C                        __size_of___awmod 0100  
                              ___altoft 2AEE                        __size_of___ftmul 021A  
                      __size_of___llmod 00D6                        __size_of___ftsub 0042  
                      __size_of___fttol 0176                                ___ftpack 1CE4  
             queue_create@queue_handler 0111                                ___lwtoft 31BA  
                       pipe_create@size 010D                        __size_of_limpeza 011A  
                 __size_of_SRAMInitHeap 005C                                __ptext10 32A0  
                              __ptext11 2EF0                                __ptext20 2DE0  
                              __ptext12 2FBE                                __ptext21 15FE  
                              __ptext13 31EE                                __ptext30 30C0  
                              __ptext22 061C                                __ptext14 29BA  
                              __ptext31 0B62                                __ptext23 2216  
                              __ptext15 2A54                                __ptext40 3140  
                              __ptext32 31BA                                __ptext24 240A  
                              __ptext16 32DC                                __ptext41 1F0A  
                              __ptext33 1094                                __ptext25 2CB6  
                              __ptext17 265A                                __ptext50 317E  
                              __ptext42 25A2                                __ptext34 1CE4  
                              __ptext26 270C                                __ptext18 2B88  
                              __ptext51 1DFC                                __ptext43 326E  
                              __ptext35 12AE                                __ptext27 24E0  
                              __ptext19 1996                                __ptext44 32B4  
                              __ptext36 2116                                __ptext28 1488  
                              __ptext53 32D0                                __ptext45 1AB0  
                              __ptext37 1736                                __ptext29 2AEE  
                              __ptext54 2310                                __ptext46 1BCA  
                              __ptext38 3102                                __ptext55 291A  
                              __ptext47 2D4C                                __ptext39 27BE  
                              __ptext56 0000                                __ptext48 2012  
                              __ptext49 2870                                _contagem 0008  
                              _controle 3140                                _medcloro 000C  
                          ??_sem_create 0119                           __size_of_main 012E  
                          ??_pipe_write 00E8                            ??_resetTimer 0029  
                              _sem_wait 2B88                                _sem_post 2DE0  
                          ??_setupTimer 0111                            _SRAMInitHeap 301C  
                    __end_of_sem_create 326E                              _INTCONbits 000FF2  
                    __end_of_pipe_write 1CE4                     _delay_queue_refresh 2310  
                           _pipe_create 2D4C                 __size_of_nojoDispatcher 0546  
                    __end_of_resetTimer 32DC                                intlevel1 0000  
                              intlevel2 0000                             ??_nojoDelay 00F1  
                           ??_pipe_read 00DC                             ??_nojoStart 0117  
                    __end_of_setupTimer 32A0                    ?_delay_queue_refresh 0033  
                           ??_timer_ISR 003F                      _delay_queue_create 2F5A  
                    _delay_queue_insert 1DFC                      _delay_queue_remove 291A  
                   ?_delay_queue_create 0111                   __size_of_queue_create 002C  
                   ?_delay_queue_insert 00E5                 pipe_create@pipe_handler 0107  
                   ?_delay_queue_remove 0029                   __size_of_queue_insert 011A  
                 __size_of_queue_remove 0138                 __size_of_nojoTaskCreate 0226  
                  ??_delay_queue_create 0113                   ??_delay_queue_refresh 0035  
                  ??_delay_queue_insert 0100                    ??_delay_queue_remove 002F  
               __size_of_LCDWriteString 006A  
